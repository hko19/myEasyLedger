{"ast":null,"code":"import _slicedToArray from \"/Users/kyle/Easy_Ledger/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/kyle/Easy_Ledger/front_end/src/components/table/journal-table.jsx\";\nimport React from 'react';\nimport Table from './table';\nimport axios from 'axios';\n\nfunction JournalTable() {\n  var columns = React.useMemo(function () {\n    return [// accessor is the \"key\" in the data},\n    {\n      Header: 'Date',\n      accessor: 'entryDate'\n    }, {\n      Header: 'Description',\n      accessor: 'description'\n    }, {\n      Header: 'Debit',\n      accessor: 'debitAmount'\n    }, {\n      Header: 'Credit',\n      accessor: 'creditAmount'\n    }];\n  }, []);\n  var API_URL = 'http://localhost:8080/v0.1'; // We'll start our table without any data\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      data = _React$useState2[0],\n      setData = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      pageCount = _React$useState4[0],\n      setPageCount = _React$useState4[1];\n\n  var _React$useState5 = React.useState(0),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      elementCount = _React$useState6[0],\n      setElementCount = _React$useState6[1];\n\n  var fetchIdRef = React.useRef(0);\n  var fetchData = React.useCallback(function (_ref) {\n    var pageSize = _ref.pageSize,\n        pageIndex = _ref.pageIndex;\n    // This will get called when the table needs new data\n    // You could fetch your data from literally anywhere,\n    // even a server. But for this example, we'll just fake it.\n    //pageSize = 2;\n    //fetch data from API\n    var url = \"\".concat(API_URL, \"/entryViewModel/?page=\").concat(pageIndex, \"&size=\").concat(pageSize);\n    axios.get(url).then(function (response) {\n      setData(response.data.content);\n      setPageCount(response.data.totalPages);\n      setElementCount(response.data.totalElements);\n    }).catch(console.log);\n  }, []);\n  return /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    data: data,\n    fetchData: fetchData,\n    pageCount: pageCount,\n    elementCount: elementCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  });\n}\n\nexport default JournalTable;","map":{"version":3,"sources":["/Users/kyle/Easy_Ledger/front_end/src/components/table/journal-table.jsx"],"names":["React","Table","axios","JournalTable","columns","useMemo","Header","accessor","API_URL","useState","data","setData","pageCount","setPageCount","elementCount","setElementCount","fetchIdRef","useRef","fetchData","useCallback","pageSize","pageIndex","url","get","then","response","content","totalPages","totalElements","catch","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,SAASC,YAAT,GAAwB;AAEtB,MAAMC,OAAO,GAAGJ,KAAK,CAACK,OAAN,CACd;AAAA,WAAM,CAAE;AACN;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,QAAQ,EAAE;AAA5B,KADI,EAEJ;AAAED,MAAAA,MAAM,EAAE,aAAV;AAAyBC,MAAAA,QAAQ,EAAE;AAAnC,KAFI,EAGJ;AAAED,MAAAA,MAAM,EAAE,OAAV;AAAmBC,MAAAA,QAAQ,EAAE;AAA7B,KAHI,EAIJ;AAAED,MAAAA,MAAM,EAAE,QAAV;AAAoBC,MAAAA,QAAQ,EAAE;AAA9B,KAJI,CAAN;AAAA,GADc,EAOd,EAPc,CAAhB;AASA,MAAMC,OAAO,GAAG,4BAAhB,CAXsB,CAatB;;AAbsB,wBAcER,KAAK,CAACS,QAAN,CAAe,EAAf,CAdF;AAAA;AAAA,MAcfC,IAde;AAAA,MAcTC,OAdS;;AAAA,yBAeYX,KAAK,CAACS,QAAN,CAAe,CAAf,CAfZ;AAAA;AAAA,MAefG,SAfe;AAAA,MAeJC,YAfI;;AAAA,yBAgBkBb,KAAK,CAACS,QAAN,CAAe,CAAf,CAhBlB;AAAA;AAAA,MAgBfK,YAhBe;AAAA,MAgBDC,eAhBC;;AAiBtB,MAAMC,UAAU,GAAGhB,KAAK,CAACiB,MAAN,CAAa,CAAb,CAAnB;AAEA,MAAMC,SAAS,GAAGlB,KAAK,CAACmB,WAAN,CAAkB,gBAA6B;AAAA,QAA1BC,QAA0B,QAA1BA,QAA0B;AAAA,QAAhBC,SAAgB,QAAhBA,SAAgB;AAC/D;AACA;AACA;AAGA;AACA;AACA,QAAMC,GAAG,aAAMd,OAAN,mCAAsCa,SAAtC,mBAAwDD,QAAxD,CAAT;AACAlB,IAAAA,KAAK,CAACqB,GAAN,CAAUD,GAAV,EAAeE,IAAf,CAAoB,UAAAC,QAAQ,EAAI;AAC5Bd,MAAAA,OAAO,CAACc,QAAQ,CAACf,IAAT,CAAcgB,OAAf,CAAP;AACAb,MAAAA,YAAY,CAACY,QAAQ,CAACf,IAAT,CAAciB,UAAf,CAAZ;AACAZ,MAAAA,eAAe,CAACU,QAAQ,CAACf,IAAT,CAAckB,aAAf,CAAf;AACD,KAJH,EAKGC,KALH,CAKSC,OAAO,CAACC,GALjB;AAOD,GAhBiB,EAgBf,EAhBe,CAAlB;AAkBA,sBACI,oBAAC,KAAD;AACE,IAAA,OAAO,EAAE3B,OADX;AAEE,IAAA,IAAI,EAAEM,IAFR;AAGE,IAAA,SAAS,EAAEQ,SAHb;AAIE,IAAA,SAAS,EAAEN,SAJb;AAKE,IAAA,YAAY,EAAEE,YALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AASD;;AAKD,eAAeX,YAAf","sourcesContent":["import React from 'react';\nimport Table from './table';\nimport axios from 'axios';\n\n\nfunction JournalTable() {\n\n  const columns = React.useMemo(\n    () => [ // accessor is the \"key\" in the data},\n      { Header: 'Date', accessor: 'entryDate'},\n      { Header: 'Description', accessor: 'description'},\n      { Header: 'Debit', accessor: 'debitAmount'},\n      { Header: 'Credit', accessor: 'creditAmount'},\n    ],\n    []\n  )\n  const API_URL = 'http://localhost:8080/v0.1';\n  \n  // We'll start our table without any data\n  const [data, setData] = React.useState([])\n  const [pageCount, setPageCount] = React.useState(0)\n  const [elementCount, setElementCount] = React.useState(0)\n  const fetchIdRef = React.useRef(0)\n\n  const fetchData = React.useCallback(({ pageSize, pageIndex }) => {\n    // This will get called when the table needs new data\n    // You could fetch your data from literally anywhere,\n    // even a server. But for this example, we'll just fake it.\n\n        \n    //pageSize = 2;\n    //fetch data from API\n    const url = `${API_URL}/entryViewModel/?page=${pageIndex}&size=${pageSize}`;\n    axios.get(url).then(response => {\n        setData(response.data.content);\n        setPageCount(response.data.totalPages);\n        setElementCount(response.data.totalElements);\n      })\n      .catch(console.log);\n    \n  }, [])\n\n  return (\n      <Table\n        columns={columns}\n        data={data}\n        fetchData={fetchData}\n        pageCount={pageCount}\n        elementCount={elementCount}\n      />\n  )\n}\n\n\n\n\nexport default JournalTable"]},"metadata":{},"sourceType":"module"}