{"ast":null,"code":"var _jsxFileName = \"/Users/kyle/Easy_Ledger/front_end/src/components/table/table.jsx\";\nimport React from 'react';\nimport { useTable, usePagination } from 'react-table'; //Generates a table with react-table 7 using pagination\n// Let's add a fetchData method to our Table component that will be used to fetch\n// new data when pagination state changes\n// We can also add a loading state to let our table know it's loading new data\n\nfunction Table(_ref) {\n  var _this = this;\n\n  var columns = _ref.columns,\n      data = _ref.data,\n      fetchData = _ref.fetchData,\n      loading = _ref.loading,\n      controlledPageCount = _ref.pageCount;\n\n  var _useTable = useTable({\n    columns,\n    data,\n    initialState: {\n      pageIndex: 0\n    },\n    // Pass our hoisted table state\n    manualPagination: true,\n    // Tell the usePagination\n    // hook that we'll handle our own data fetching\n    // This means we'll also have to provide our own\n    // pageCount.\n    pageCount: controlledPageCount\n  }, usePagination),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setPageSize = _useTable.setPageSize,\n      _useTable$state = _useTable.state,\n      pageIndex = _useTable$state.pageIndex,\n      pageSize = _useTable$state.pageSize; // Listen for changes in pagination and use the state to fetch our new data\n\n\n  React.useEffect(function () {\n    fetchData({\n      pageIndex,\n      pageSize\n    });\n  }, [fetchData, pageIndex, pageSize]); // Render the UI for your table\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, headerGroups.map(function (headerGroup) {\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }), headerGroup.headers.map(function (column) {\n      return /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }\n      }), column.render('Header'), /*#__PURE__*/React.createElement(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 19\n        }\n      }, column.isSorted ? column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼' : ''));\n    }));\n  })), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), page.map(function (row, i) {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    }), row.cells.map(function (cell) {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 26\n        }\n      }), cell.render('Cell'));\n    }));\n  }), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, loading ?\n  /*#__PURE__*/\n  // Use our custom loading state to show a loading indicator\n  React.createElement(\"td\", {\n    colSpan: \"10000\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"td\", {\n    colSpan: \"10000\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, \"Showing \", page.length, \" of ~\", controlledPageCount * pageSize, ' ', \"results\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(0);\n    },\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, '<<'), ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      return previousPage();\n    },\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, '<'), ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      return nextPage();\n    },\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, '>'), ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(pageCount - 1);\n    },\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, '>>'), ' ', /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, \"Page\", ' ', /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, pageIndex + 1, \" of \", pageOptions.length), ' '), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, \"| Go to page:\", ' ', /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: function onChange(e) {\n      var page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  })), ' ', /*#__PURE__*/React.createElement(\"select\", {\n    value: pageSize,\n    onChange: function onChange(e) {\n      setPageSize(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, [2, 10, 20, 30, 40, 50].map(function (pageSize) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: pageSize,\n      value: pageSize,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }\n    }, \"Show \", pageSize);\n  }))));\n}\n\nexport default Table;","map":{"version":3,"sources":["/Users/kyle/Easy_Ledger/front_end/src/components/table/table.jsx"],"names":["React","useTable","usePagination","Table","columns","data","fetchData","loading","controlledPageCount","pageCount","initialState","pageIndex","manualPagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","setPageSize","state","pageSize","useEffect","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","length","e","target","value","Number","width"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useTable, usePagination } from 'react-table'\n//Generates a table with react-table 7 using pagination\n\n// Let's add a fetchData method to our Table component that will be used to fetch\n// new data when pagination state changes\n// We can also add a loading state to let our table know it's loading new data\nfunction Table({\n  columns,\n  data,\n  fetchData,\n  loading,\n  pageCount: controlledPageCount,\n}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    // Get the state from the instance\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0 }, // Pass our hoisted table state\n      manualPagination: true, // Tell the usePagination\n      // hook that we'll handle our own data fetching\n      // This means we'll also have to provide our own\n      // pageCount.\n      pageCount: controlledPageCount,\n    },\n    usePagination\n  )\n\n  // Listen for changes in pagination and use the state to fetch our new data\n  React.useEffect(() => {\n    fetchData({ pageIndex, pageSize })\n  }, [fetchData, pageIndex, pageSize])\n\n  // Render the UI for your table\n  return (\n    <div>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? ' ðŸ”½'\n                        : ' ðŸ”¼'\n                      : ''}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n          <tr>\n            {loading ? (\n              // Use our custom loading state to show a loading indicator\n              <td colSpan=\"10000\">Loading...</td>\n            ) : (\n              <td colSpan=\"10000\">\n                Showing {page.length} of ~{controlledPageCount * pageSize}{' '}\n                results\n              </td>\n            )}\n          </tr>\n        </tbody>\n      </table>\n      {/* \n        Pagination can be built however you'd like. \n        This is just a very basic UI implementation:\n      */}\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{ width: '100px' }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={e => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[2, 10, 20, 30, 40, 50].map(pageSize => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  )\n}\n\nexport default Table\n\n"]},"metadata":{},"sourceType":"module"}