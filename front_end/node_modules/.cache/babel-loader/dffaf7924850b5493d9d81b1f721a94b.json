{"ast":null,"code":"var _jsxFileName = \"/Users/kyle/Easy_Ledger/front_end/src/components/table/table.jsx\";\nimport React from 'react';\nimport { useTable, usePagination } from 'react-table';\nimport { Link } from 'react-router-dom'; //Generates a table with react-table 7 using pagination\n// Let's add a fetchData method to our Table component that will be used to fetch\n// new data when pagination state changes\n// We can also add a loading state to let our table know it's loading new data\n\nfunction Table(_ref) {\n  var _this = this;\n\n  var columns = _ref.columns,\n      data = _ref.data,\n      fetchData = _ref.fetchData,\n      controlledPageCount = _ref.pageCount,\n      elementCount = _ref.elementCount;\n\n  var _useTable = useTable({\n    columns,\n    data,\n    initialState: {\n      pageIndex: 0,\n      pageSize: 2\n    },\n    // Pass our hoisted table state\n    manualPagination: true,\n    // Tell the usePagination\n    // hook that we'll handle our own data fetching\n    // This means we'll also have to provide our own\n    // pageCount.\n    pageCount: controlledPageCount\n  }, usePagination),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setPageSize = _useTable.setPageSize,\n      _useTable$state = _useTable.state,\n      pageIndex = _useTable$state.pageIndex,\n      pageSize = _useTable$state.pageSize; // Listen for changes in pagination and use the state to fetch our new data\n\n\n  React.useEffect(function () {\n    fetchData({\n      pageIndex,\n      pageSize\n    });\n  }, [fetchData, pageIndex, pageSize]); // Render the UI for your table\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-responsive\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", Object.assign({\n    className: \"table table-hover m-b-0 text-inverse\"\n  }, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, headerGroups.map(function (headerGroup) {\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }), headerGroup.headers.map(function (column) {\n      return /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }\n      }), column.render('Header'), /*#__PURE__*/React.createElement(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 19\n        }\n      }, column.isSorted ? column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼' : ''));\n    }));\n  })), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }), page.map(function (row, i) {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }), row.cells.map(function (cell) {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 26\n        }\n      }), cell.render('Cell'));\n    }));\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row px-3 py-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"pager m-t-0 m-b-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    className: canPreviousPage ? \"previous\" : \"previous disabled\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }, canPreviousPage ? /*#__PURE__*/React.createElement(Link, {\n    onClick: function onClick() {\n      return previousPage();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 43\n    }\n  }, \"\\u2190 Newer\") : null)), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"py-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, \"Showing \", pageIndex * page.length + 1 + \"-\" + (pageIndex + 1) * page.length, \" of \", elementCount, ' ', \"results\"), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"pager m-t-0 m-b-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    className: canNextPage ? \"next\" : \"next disabled\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }, canNextPage ? /*#__PURE__*/React.createElement(Link, {\n    onClick: function onClick() {\n      return nextPage();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 39\n    }\n  }, \"Older \\u2192\") : null))));\n}\n\nexport default Table;","map":{"version":3,"sources":["/Users/kyle/Easy_Ledger/front_end/src/components/table/table.jsx"],"names":["React","useTable","usePagination","Link","Table","columns","data","fetchData","controlledPageCount","pageCount","elementCount","initialState","pageIndex","pageSize","manualPagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","setPageSize","state","useEffect","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","length"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useTable, usePagination } from 'react-table'\nimport { Link } from 'react-router-dom';\n\n//Generates a table with react-table 7 using pagination\n\n// Let's add a fetchData method to our Table component that will be used to fetch\n// new data when pagination state changes\n// We can also add a loading state to let our table know it's loading new data\nfunction Table({\n  columns,\n  data,\n  fetchData,\n  pageCount: controlledPageCount,\n  elementCount\n}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    // Get the state from the instance\n    state: { pageIndex, pageSize},\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0, pageSize: 2 }, // Pass our hoisted table state\n      manualPagination: true, // Tell the usePagination\n      // hook that we'll handle our own data fetching\n      // This means we'll also have to provide our own\n      // pageCount.\n      pageCount: controlledPageCount,\n    },\n    usePagination\n  )\n\n\n  // Listen for changes in pagination and use the state to fetch our new data\n  React.useEffect(() => {\n    fetchData({ pageIndex, pageSize })\n  }, [fetchData, pageIndex, pageSize])\n\n  // Render the UI for your table\n\n  \n  return (\n    <><div className=\"table-responsive\">\n      <table  className=\"table table-hover m-b-0 text-inverse\" {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? ' ðŸ”½'\n                        : ' ðŸ”¼'\n                      : ''}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n\n        </tbody>\n    {/*}    <tfoot>\n            <tr style={{textAlign: 'center'}}>\n                {loading ? (\n                // Use our custom loading state to show a loading indicator\n                <td colSpan=\"10000\">\t\n                    <i className=\"fa-3x fas fa-circle-notch fa-spin\"></i>\n                </td>\n                ) : (\n                <>\n                <ul className=\"pager m-t-0 m-b-0\">\n                    <li className={canPreviousPage? \"previous\" : \"previous disabled\"}>\n                        <Link onClick={canPreviousPage? () => previousPage() : null}>&larr; Newer</Link>\n                    </li>\n                </ul>\n                <td colSpan=\"10000\">\n                    Showing {((pageIndex * page.length) + 1) + \"-\" + ((pageIndex + 1) * page.length)} of {elementCount}{' '}\n                    results\n                </td>\n                <ul className=\"pager m-t-0 m-b-0\">\n                    <li className={canNextPage? \"next\" : \"next disabled\"}>\n                        <Link onClick={canNextPage? () => nextPage() : null}>Older &rarr;</Link>\n                    </li>\n                </ul>\n                </>\n                )}\n            </tr>\n        </tfoot> */}\n      </table>\n      </div>\n      {/* \n        Pagination can be built however you'd like. \n        This is just a very basic UI implementation:\n      */}\n    <div className=\"row px-3 py-2\">\n        {/*<span >\n            <button className=\"btn btn-white \" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n                {'First'}\n            </button>{' '}\n            <button className=\"btn btn-white\" onClick={() => previousPage()} disabled={!canPreviousPage}>\n                {'Previous'}\n            </button>{' '}\n            <button className=\"btn btn-white\" onClick={() => nextPage()} disabled={!canNextPage}>\n                {'Next'}\n            </button>{' '}\n            <button className=\"btn btn-white\" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n                {'Last'}\n            </button>{' '}\n        </span> */}\n        \n                <ul className=\"pager m-t-0 m-b-0\">\n                    <li className={canPreviousPage? \"previous\" : \"previous disabled\"}>\n                        {canPreviousPage? <Link onClick={() => previousPage()}>&larr; Newer</Link> : null} \n                    </li>\n                </ul>\n                <span className=\"py-2\">\n                    Showing {((pageIndex * page.length) + 1) + \"-\" + ((pageIndex + 1) * page.length)} of {elementCount}{' '}\n                    results\n                </span>\n                <ul className=\"pager m-t-0 m-b-0\">\n                    <li className={canNextPage? \"next\" : \"next disabled\"}>\n                        {canNextPage? <Link onClick={() => nextPage()}>Older &rarr;</Link> : null}\n                    </li>\n                </ul>\n                \n        \n\n        {/* <span className=\"p-10\" style={{textAlign: \"center\"}}>\n            Page{' '}\n            <strong>\n                {pageIndex + 1} of {pageOptions.length}\n            </strong>{' '}\n         </span> */}\n\n        {/*go to page, page size*/}\n        {/*<span className=\"p-10\">\n            Go to page: {' '}\n            <input className=\"p-10 form-control-sm\"\n                type=\"number\"\n                defaultValue={pageIndex + 1}\n                onChange={e => {\n                const page = e.target.value ? Number(e.target.value) - 1 : 0\n                gotoPage(page)\n                }}\n            /> {' '}\n        </span>*/}\n\n\n\n    </div>\n\n    {/* <div className=\"row\">\n            <select className=\"form-control-sm\"\n                value={pageSize}\n                onChange={e => {\n                    setPageSize(Number(e.target.value))\n                }}\n            >\n                {[2, 10, 20, 30, 40, 50].map(pageSize => (\n                    <option key={pageSize} value={pageSize}>\n                        Show {pageSize}\n                    </option>\n                ))}\n            </select>\n    </div>  */}\n    </>\n  )\n}\n\nexport default Table\n\n"]},"metadata":{},"sourceType":"module"}