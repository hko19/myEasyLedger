{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { area, line, curveMonotoneX } from 'd3-shape';\nimport { scaleLinear } from 'd3-scale';\nimport { max } from 'd3-array';\nvar curveFunction = curveMonotoneX;\nvar defaultColors = {\n  area: 'rgba(199, 228, 255, 0.5)',\n  line: '#004585'\n};\n\nvar Sparkline = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Sparkline, _PureComponent);\n\n  function Sparkline() {\n    _classCallCheck(this, Sparkline);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Sparkline).apply(this, arguments));\n  }\n\n  _createClass(Sparkline, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          lines = _this$props.lines,\n          width = _this$props.width,\n          height = _this$props.height;\n      var maxX = max(lines, function (s) {\n        return s.values.length - 1;\n      });\n      var maxY = max(lines, function (s) {\n        return max(s.values);\n      });\n      var x = scaleLinear().domain([0, maxX]).range([0, width]); // Set range to 1 to make room for the line stroke\n\n      var y = scaleLinear().domain([0, maxY]).range([height, 1]);\n      var areaFunction = area().x(function (d, i) {\n        return x(i);\n      }).y0(height).y1(function (d) {\n        return y(d);\n      }).curve(curveFunction);\n      var lineFunction = line().x(function (d, i) {\n        return x(i);\n      }).y(function (d) {\n        return y(d);\n      }).curve(curveFunction);\n      return React.createElement(\"svg\", {\n        width: width,\n        height: height,\n        viewBox: \"0 0 \".concat(width, \" \").concat(height)\n      }, lines.map(function (line, index) {\n        var colors = _objectSpread({}, defaultColors, line.colors);\n\n        return React.createElement(\"g\", {\n          key: line.key || index\n        }, React.createElement(\"path\", {\n          d: areaFunction(line.values),\n          fill: colors.area\n        }, line.title && React.createElement(\"title\", null, line.title)), React.createElement(\"path\", {\n          d: lineFunction(line.values),\n          stroke: colors.line,\n          fill: \"none\"\n        }));\n      }));\n    }\n  }]);\n\n  return Sparkline;\n}(PureComponent);\n\n_defineProperty(Sparkline, \"displayName\", 'Sparkline');\n\n_defineProperty(Sparkline, \"propTypes\", {\n  lines: PropTypes.arrayOf(PropTypes.shape({\n    values: PropTypes.arrayOf(PropTypes.number.isRequired).isRequired,\n    colors: PropTypes.shape({\n      area: PropTypes.string.isRequired,\n      line: PropTypes.string.isRequired\n    }),\n    title: PropTypes.string,\n    key: PropTypes.any\n  })).isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired\n});\n\nexport { Sparkline as default };","map":{"version":3,"sources":["../src/index.js"],"names":["curveFunction","defaultColors","area","line","Sparkline","PureComponent","lines","values","PropTypes","colors","isRequired","title","key","any","width","height","maxX","max","s","maxY","x","scaleLinear","y","areaFunction","lineFunction","index"],"mappings":"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","sourcesContent":["import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport {area, line, curveMonotoneX} from 'd3-shape'\nimport {scaleLinear} from 'd3-scale'\nimport {max} from 'd3-array'\n\nconst curveFunction = curveMonotoneX\nconst defaultColors = {\n  area: 'rgba(199, 228, 255, 0.5)',\n  line: '#004585'\n}\n\nexport default class Sparkline extends PureComponent {\n  static displayName = 'Sparkline'\n\n  static propTypes = {\n    lines: PropTypes.arrayOf(\n      PropTypes.shape({\n        values: PropTypes.arrayOf(PropTypes.number.isRequired).isRequired,\n        colors: PropTypes.shape({\n          area: PropTypes.string.isRequired,\n          line: PropTypes.string.isRequired\n        }),\n        title: PropTypes.string,\n        key: PropTypes.any\n      })\n    ).isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired\n  }\n\n  render() {\n    const {lines, width, height} = this.props\n    const maxX = max(lines, s => s.values.length - 1)\n    const maxY = max(lines, s => max(s.values))\n    const x = scaleLinear().domain([0, maxX]).range([0, width])\n    // Set range to 1 to make room for the line stroke\n    const y = scaleLinear().domain([0, maxY]).range([height, 1])\n\n    const areaFunction =\n      area()\n        .x((d, i) => x(i))\n        .y0(height)\n        .y1(d => y(d))\n        .curve(curveFunction)\n\n    const lineFunction =\n      line()\n        .x((d, i) => x(i))\n        .y(d => y(d))\n        .curve(curveFunction)\n\n    return (\n      <svg width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n        {lines.map((line, index) => {\n          const colors = {\n            ...defaultColors,\n            ...line.colors\n          }\n          return (\n            <g key={line.key || index}>\n              <path d={areaFunction(line.values)} fill={colors.area}>\n                {line.title && <title>{line.title}</title>}\n              </path>\n              <path d={lineFunction(line.values)} stroke={colors.line} fill=\"none\"/>\n            </g>\n          )\n        })}\n      </svg>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}