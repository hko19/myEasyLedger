{"ast":null,"code":"var _jsxFileName = \"/Users/kyle/Easy_Ledger/front_end/src/components/table/line-item-form.jsx\";\nimport React from 'react';\nimport { useTable, useSortBy } from 'react-table';\n\nfunction LineItemForm(_ref) {\n  var _this = this;\n\n  var data = _ref.data,\n      setLineItemData = _ref.setLineItemData,\n      journalEntryDate = _ref.journalEntryDate,\n      setJournalEntryDate = _ref.setJournalEntryDate,\n      journalEntryDescription = _ref.journalEntryDescription,\n      setJournalEntryDescription = _ref.setJournalEntryDescription,\n      categories = _ref.categories,\n      accounts = _ref.accounts;\n  var columns = React.useMemo(function () {\n    return [// accessor is the \"key\" in the data},\n    {\n      Header: 'id',\n      accessor: 'lineItemId'\n    }, {\n      Header: 'Description',\n      accessor: 'description'\n    }, {\n      Header: 'Account',\n      accessor: 'accountName'\n    }, {\n      Header: 'Category',\n      accessor: 'categoryName'\n    }, {\n      Header: 'Debit',\n      accessor: 'debitAmount'\n    }, {\n      Header: 'Credit',\n      accessor: 'creditAmount'\n    }];\n  }, []);\n  var initialSort = React.useMemo(function () {\n    return [{\n      id: 'lineItemId',\n      desc: false\n    }];\n  }, []);\n\n  var _useTable = useTable({\n    columns,\n    data,\n    initialState: {\n      sortBy: initialSort,\n      hiddenColumns: [\"lineItemId\"]\n    }\n  }, useSortBy),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      rows = _useTable.rows,\n      prepareRow = _useTable.prepareRow;\n\n  var returnFormByColumnType = function returnFormByColumnType(cell) {\n    var columnId = cell.column.id;\n\n    switch (columnId) {\n      case \"description\":\n        /*#__PURE__*/\n        React.createElement(\"input\", {\n          type: \"text\",\n          value: cell.value ? cell.value : '',\n          onChange: function onChange(event) {\n            var updatedLineItemData = data.slice();\n            updatedLineItemData[cell.row.index][columnId] = event.target.value;\n            setLineItemData(updatedLineItemData);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 17\n          }\n        });\n\n      case \"debitAmount\":\n        return /*#__PURE__*/React.createElement(\"input\", {\n          type: \"number\",\n          value: cell.value ? cell.value : '',\n          step: \"any\",\n          onChange: function onChange(event) {\n            var updatedLineItemData = data.slice();\n            updatedLineItemData[cell.row.index][columnId] = event.target.value;\n            setLineItemData(updatedLineItemData);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 21\n          }\n        });\n\n      case \"creditAmount\":\n        return /*#__PURE__*/React.createElement(\"input\", {\n          type: \"number\",\n          value: cell.value ? cell.value : '',\n          step: \"any\",\n          onChange: function onChange(event) {\n            var updatedLineItemData = data.slice();\n            updatedLineItemData[cell.row.index][columnId] = event.target.value;\n            setLineItemData(updatedLineItemData);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }\n        });\n\n      case \"accountName\":\n      case \"categoryName\":\n        return cell.value ? cell.value : '';\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row m-b-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 43\n    }\n  }, \"Date\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-11\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    value: journalEntryDate,\n    onChange: function onChange(event) {\n      return setJournalEntryDate(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row m-b-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 43\n    }\n  }, \"Description\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-11\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: journalEntryDescription,\n    onChange: function onChange(event) {\n      return setJournalEntryDescription(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-responsive\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", Object.assign({\n    className: \"table\"\n  }, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }\n  }, headerGroups.map(function (headerGroup) {\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 29\n      }\n    }), headerGroup.headers.map(function (column) {\n      return (\n        /*#__PURE__*/\n        // Add the sorting props to control sorting. For this example\n        // we can add them into the header props\n        React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 37\n          }\n        }), column.render('Header'))\n      );\n    }));\n  })), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }), rows.map(function (row, i) {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 37\n      }\n    }), row.cells.map(function (cell) {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 49\n        }\n      }), returnFormByColumnType(cell));\n    }));\n  })))));\n}\n\nexport default LineItemForm;","map":{"version":3,"sources":["/Users/kyle/Easy_Ledger/front_end/src/components/table/line-item-form.jsx"],"names":["React","useTable","useSortBy","LineItemForm","data","setLineItemData","journalEntryDate","setJournalEntryDate","journalEntryDescription","setJournalEntryDescription","categories","accounts","columns","useMemo","Header","accessor","initialSort","id","desc","initialState","sortBy","hiddenColumns","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","returnFormByColumnType","cell","columnId","column","value","event","updatedLineItemData","slice","row","index","target","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","i","getRowProps","cells","getCellProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useTable, useSortBy } from 'react-table'\n\nfunction LineItemForm({\n    data, setLineItemData,\n    journalEntryDate, setJournalEntryDate,\n    journalEntryDescription, setJournalEntryDescription,\n    categories,\n    accounts\n}) {\n    \n\n\n    const columns = React.useMemo(\n        () => [ // accessor is the \"key\" in the data},\n            { Header: 'id', accessor: 'lineItemId' },\n            { Header: 'Description', accessor: 'description' },\n            { Header: 'Account', accessor: 'accountName' },\n            { Header: 'Category', accessor: 'categoryName' },\n            { Header: 'Debit', accessor: 'debitAmount' },\n            { Header: 'Credit', accessor: 'creditAmount' },\n        ],\n        []\n    )\n\n    const initialSort = React.useMemo(\n        () => [\n            { id: 'lineItemId', desc: false },\n        ],\n        [])\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n    } = useTable(\n        {\n            columns,\n            data,\n            initialState: {\n                sortBy: initialSort,\n                hiddenColumns: [\"lineItemId\"]\n            }\n        },\n        useSortBy\n    )\n    \n    const returnFormByColumnType = cell => {\n        const columnId = cell.column.id;\n        switch (columnId) {\n            case \"description\":\n                <input\n                    type=\"text\"\n                    value={cell.value ? cell.value : ''}\n                    onChange={event => {\n                        let updatedLineItemData = data.slice();\n                        updatedLineItemData[cell.row.index][columnId] = event.target.value;\n                        setLineItemData(updatedLineItemData);\n                    }}\n                />\n            case \"debitAmount\":\n                return(\n                    <input\n                        type=\"number\"\n                        value={cell.value ? cell.value : ''}\n                        step=\"any\"\n                        onChange={event => {\n                            let updatedLineItemData = data.slice();\n                            updatedLineItemData[cell.row.index][columnId] = event.target.value;\n                            setLineItemData(updatedLineItemData);\n                        }}\n                    />\n                )\n            case \"creditAmount\":\n                return(\n                    <input\n                        type=\"number\"\n                        value={cell.value ? cell.value : ''}\n                        step=\"any\"\n                        onChange={event => {\n                            let updatedLineItemData = data.slice();\n                            updatedLineItemData[cell.row.index][columnId] = event.target.value;\n                            setLineItemData(updatedLineItemData);\n                        }}\n                    />\n                )\n            case \"accountName\":\n            case \"categoryName\":\n                return (cell.value ? cell.value : '');\n        }\n    }\n\n\n    return (\n        <>\n            <div className=\"row m-b-10\">\n                <div className=\"col-md-1\"><strong>Date</strong></div> \n                <div className=\"col-md-11\">\n                    <input \n                        type=\"date\" \n                        value={journalEntryDate} \n                        onChange={event => setJournalEntryDate(event.target.value)}/>\n                    </div>\n            </div>\n            <div className=\"row m-b-10\">\n                <div className=\"col-md-1\"><strong>Description</strong></div> \n                <div className=\"col-md-11\">\n                    <input \n                        type=\"text\" \n                        value={journalEntryDescription} \n                        onChange={event => setJournalEntryDescription(event.target.value)}/>\n                    </div>\n            </div>\n            <br></br>\n\n            <div className=\"table-responsive\">\n                <table className=\"table\"{...getTableProps()}>\n                    <thead>\n                        {headerGroups.map(headerGroup => (\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n                                {headerGroup.headers.map(column => (\n                                    // Add the sorting props to control sorting. For this example\n                                    // we can add them into the header props\n                                    <th {...column.getHeaderProps()}>\n                                        {column.render('Header')}\n                                    </th>\n                                ))}\n                            </tr>\n                        ))}\n                    </thead>\n                    <tbody {...getTableBodyProps()}>\n                        {rows.map(\n                            (row, i) => {\n                                prepareRow(row);\n                                return (\n                                    <tr {...row.getRowProps()}>\n                                        {row.cells.map(cell => {\n                                            return (\n                                                <td {...cell.getCellProps()}>\n                                                    {returnFormByColumnType(cell)}\n                                                </td>\n                                            )\n                                        })}\n                                    </tr>\n                                )\n                            }\n                        )}\n                    </tbody>\n                </table>\n            </div>\n        </>\n    )\n}\n\nexport default LineItemForm\n"]},"metadata":{},"sourceType":"module"}