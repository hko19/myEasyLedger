{"ast":null,"code":"import _slicedToArray from \"/Users/kyle/Easy_Ledger/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/kyle/Easy_Ledger/front_end/src/components/table/table-of-entries.jsx\";\nimport React from 'react';\nimport { useTable, usePagination } from 'react-table';\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport LineItemTable from './line-item-table';\nimport \"./styles.css\"; //Generates a table with react-table 7 using pagination\n// Let's add a fetchData method to our Table component that will be used to fetch\n// new data when pagination state changes\n// We can also add a loading state to let our table know it's loading new data\n\nfunction TableOfEntries(_ref) {\n  var _this = this;\n\n  var columns = _ref.columns,\n      data = _ref.data,\n      fetchData = _ref.fetchData,\n      controlledPageCount = _ref.pageCount,\n      elementCount = _ref.elementCount;\n\n  var _useTable = useTable({\n    columns,\n    data,\n    initialState: {\n      pageIndex: 0,\n      pageSize: 10\n    },\n    // Pass our hoisted table state\n    manualPagination: true,\n    // Tell the usePagination\n    // hook that we'll handle our own data fetching\n    // This means we'll also have to provide our own\n    // pageCount.\n    pageCount: controlledPageCount\n  }, usePagination),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setPageSize = _useTable.setPageSize,\n      _useTable$state = _useTable.state,\n      pageIndex = _useTable$state.pageIndex,\n      pageSize = _useTable$state.pageSize;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      entryExpanded = _React$useState2[0],\n      setEntryExpanded = _React$useState2[1]; //Whether or not the modal  is shown\n\n\n  var toggleEntryExpanded = function toggleEntryExpanded() {\n    return setEntryExpanded(!entryExpanded);\n  }; //Toggles modal on or off\n\n\n  var API_URL = 'http://localhost:8080/v0.1';\n  var lineItemColumns = React.useMemo(function () {\n    return [// accessor is the \"key\" in the data},\n    {\n      Header: 'id',\n      accessor: 'lineItemId'\n    }, {\n      Header: 'Description',\n      accessor: 'description'\n    }, {\n      Header: 'Account',\n      accessor: 'accountName'\n    }, {\n      Header: 'Category',\n      accessor: 'categoryName'\n    }, {\n      Header: 'Debit',\n      accessor: 'debitAmount'\n    }, {\n      Header: 'Credit',\n      accessor: 'creditAmount'\n    }];\n  }, []);\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      lineItemData = _React$useState4[0],\n      setLineItemData = _React$useState4[1];\n\n  var expandEntry = function expandEntry(i) {\n    fetchEntry(i);\n    toggleEntryExpanded();\n  };\n\n  var fetchEntry = function fetchEntry(i) {\n    var url = \"\".concat(API_URL, \"/entry/\").concat(i);\n    axios.get(url).then(function (response) {\n      var entry = response.data;\n      var formattedLineItems = [];\n      entry.lineItems.forEach(function (lineItem) {\n        var formattedLineItem = {\n          lineItemId: lineItem.lineItemId,\n          accountName: lineItem.accountName,\n          description: lineItem.description,\n          debitAmount: lineItem.isCredit ? null : lineItem.amount.toFixed(2),\n          creditAmount: lineItem.isCredit ? lineItem.amount.toFixed(2) : null,\n          categoryName: lineItem.categoryName\n        };\n        formattedLineItems.push(formattedLineItem);\n      });\n      setLineItemData(formattedLineItems);\n    }).catch(console.log);\n  }; // Listen for changes in pagination and use the state to fetch our new data\n\n\n  React.useEffect(function () {\n    fetchData({\n      pageIndex,\n      pageSize\n    });\n  }, [fetchData, pageIndex, pageSize]); // Render the UI for your table\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-responsive\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", Object.assign({\n    className: \"table table-hover m-b-0 text-inverse\"\n  }, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, headerGroups.map(function (headerGroup) {\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }), headerGroup.headers.map(function (column) {\n      return /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }\n      }), column.render('Header'), /*#__PURE__*/React.createElement(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 19\n        }\n      }, column.isSorted ? column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼' : ''));\n    }));\n  })), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }), page.map(function (row, i) {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({\n      style: {\n        cursor: \"pointer\"\n      },\n      onClick: function onClick() {\n        return expandEntry(data[i].entryId);\n      }\n    }, row.getRowProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 15\n      }\n    }), row.cells.map(function (cell) {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 26\n        }\n      }), cell.render('Cell'));\n    }));\n  }))), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: entryExpanded,\n    toggle: function toggle() {\n      return toggleEntryExpanded();\n    },\n    modalClassName: \"custom-modal-style\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    toggle: function toggle() {\n      return toggleEntryExpanded();\n    },\n    className: \"bg-dark text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, \"Journal Entry\"), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(LineItemTable, {\n    columns: lineItemColumns,\n    data: lineItemData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, \"Action\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-white\",\n    onClick: function onClick() {\n      return toggleEntryExpanded();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, \"Close\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row px-3 py-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"pager m-t-0 m-b-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    className: canPreviousPage ? \"previous\" : \"previous disabled\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }\n  }, canPreviousPage ? /*#__PURE__*/React.createElement(Link, {\n    onClick: function onClick() {\n      return previousPage();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 43\n    }\n  }, \"\\u2190 Newer\") : null)), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"py-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }\n  }, \"Showing \", pageIndex * page.length + 1 + \"-\" + (pageIndex + 1) * page.length, \" of \", elementCount, ' ', \"results\"), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"pager m-t-0 m-b-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    className: canNextPage ? \"next\" : \"next disabled\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 21\n    }\n  }, canNextPage ? /*#__PURE__*/React.createElement(Link, {\n    onClick: function onClick() {\n      return nextPage();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 39\n    }\n  }, \"Older \\u2192\") : null))));\n}\n\nexport default TableOfEntries;","map":{"version":3,"sources":["/Users/kyle/Easy_Ledger/front_end/src/components/table/table-of-entries.jsx"],"names":["React","useTable","usePagination","Modal","ModalHeader","ModalBody","ModalFooter","Link","axios","LineItemTable","TableOfEntries","columns","data","fetchData","controlledPageCount","pageCount","elementCount","initialState","pageIndex","pageSize","manualPagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","setPageSize","state","useState","entryExpanded","setEntryExpanded","toggleEntryExpanded","API_URL","lineItemColumns","useMemo","Header","accessor","lineItemData","setLineItemData","expandEntry","i","fetchEntry","url","get","then","response","entry","formattedLineItems","lineItems","forEach","lineItem","formattedLineItem","lineItemId","accountName","description","debitAmount","isCredit","amount","toFixed","creditAmount","categoryName","push","catch","console","log","useEffect","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","isSorted","isSortedDesc","row","cursor","entryId","getRowProps","cells","cell","getCellProps","length"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useTable, usePagination } from 'react-table'\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport LineItemTable from './line-item-table';\nimport \"./styles.css\";\n\n//Generates a table with react-table 7 using pagination\n\n// Let's add a fetchData method to our Table component that will be used to fetch\n// new data when pagination state changes\n// We can also add a loading state to let our table know it's loading new data\nfunction TableOfEntries({\n  columns,\n  data,\n  fetchData,\n  pageCount: controlledPageCount,\n  elementCount\n}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    // Get the state from the instance\n    state: { pageIndex, pageSize},\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0, pageSize: 10 }, // Pass our hoisted table state\n      manualPagination: true, // Tell the usePagination\n      // hook that we'll handle our own data fetching\n      // This means we'll also have to provide our own\n      // pageCount.\n      pageCount: controlledPageCount,\n    },\n    usePagination\n  )\n\n  const [entryExpanded, setEntryExpanded] = React.useState(false); //Whether or not the modal  is shown\n  const toggleEntryExpanded = () => setEntryExpanded(!entryExpanded); //Toggles modal on or off\n\n  const API_URL = 'http://localhost:8080/v0.1';\n\n  const lineItemColumns = React.useMemo(\n    () => [ // accessor is the \"key\" in the data},\n      { Header: 'id', accessor: 'lineItemId'},\n      { Header: 'Description', accessor: 'description'},\n      { Header: 'Account', accessor: 'accountName'},\n      { Header: 'Category', accessor: 'categoryName'},\n      { Header: 'Debit', accessor: 'debitAmount'},\n      { Header: 'Credit', accessor: 'creditAmount'},\n    ],\n    []\n  )\n  const [lineItemData, setLineItemData] = React.useState([]);\n  const expandEntry = i => {\n    fetchEntry(i);\n    toggleEntryExpanded();\n  }\n\n  const fetchEntry = i => {\n    const url = `${API_URL}/entry/${i}`;\n    axios.get(url).then(response => {\n        var entry = response.data;\n        var formattedLineItems = [];\n        entry.lineItems.forEach( lineItem => {\n          var formattedLineItem = {\n            lineItemId: lineItem.lineItemId,\n            accountName: lineItem.accountName,\n            description: lineItem.description,\n            debitAmount: (lineItem.isCredit ? null : lineItem.amount.toFixed(2)),\n            creditAmount: (lineItem.isCredit ? lineItem.amount.toFixed(2) : null),\n            categoryName: lineItem.categoryName\n          };\n          formattedLineItems.push(formattedLineItem);\n        })\n        setLineItemData(formattedLineItems);\n      })\n      .catch(console.log);\n  }\n\n  // Listen for changes in pagination and use the state to fetch our new data\n  React.useEffect(() => {\n    fetchData({ pageIndex, pageSize })\n  }, [fetchData, pageIndex, pageSize])\n\n  // Render the UI for your table\n\n  \n  return (\n    <><div className=\"table-responsive\">\n      <table  className=\"table table-hover m-b-0 text-inverse\" {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? ' ðŸ”½'\n                        : ' ðŸ”¼'\n                      : ''}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr style={{cursor: \"pointer\"}} onClick={() => expandEntry(data[i].entryId)} {...row.getRowProps()}>{/* entry is represented as a clickable row that opens a modal when clicked*/}\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n\n      {/* Modal that opens when a row in the table is clicked */}\n      <Modal isOpen={entryExpanded} toggle={() => toggleEntryExpanded()} modalClassName=\"custom-modal-style\">\n          <ModalHeader toggle={() => toggleEntryExpanded()} className=\"bg-dark text-white\">Journal Entry</ModalHeader>\n          <ModalBody>\n            <LineItemTable columns={lineItemColumns} data={lineItemData}></LineItemTable>\n          </ModalBody>\n          <ModalFooter>\n            <button className=\"btn btn-primary\">Action</button>\n            <button className=\"btn btn-white\" onClick={() => toggleEntryExpanded()}>Close</button>\n          </ModalFooter>\n      </Modal>\n\n      </div>\n      {/* \n        Pagination can be built however you'd like. \n        This is just a very basic UI implementation:\n      */}\n    <div className=\"row px-3 py-2\">\n        {/*<span >\n            <button className=\"btn btn-white \" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n                {'First'}\n            </button>{' '}\n            <button className=\"btn btn-white\" onClick={() => previousPage()} disabled={!canPreviousPage}>\n                {'Previous'}\n            </button>{' '}\n            <button className=\"btn btn-white\" onClick={() => nextPage()} disabled={!canNextPage}>\n                {'Next'}\n            </button>{' '}\n            <button className=\"btn btn-white\" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n                {'Last'}\n            </button>{' '}\n        </span> */}\n        \n                <ul className=\"pager m-t-0 m-b-0\">\n                    <li className={canPreviousPage? \"previous\" : \"previous disabled\"}>\n                        {canPreviousPage? <Link onClick={() => previousPage()}>&larr; Newer</Link> : null} \n                    </li>\n                </ul>\n                <span className=\"py-2\">\n                    Showing {((pageIndex * page.length) + 1) + \"-\" + ((pageIndex + 1) * page.length)} of {elementCount}{' '}\n                    results\n                </span>\n                <ul className=\"pager m-t-0 m-b-0\">\n                    <li className={canNextPage? \"next\" : \"next disabled\"}>\n                        {canNextPage? <Link onClick={() => nextPage()}>Older &rarr;</Link> : null}\n                    </li>\n                </ul>\n                \n        \n\n        {/* <span className=\"p-10\" style={{textAlign: \"center\"}}>\n            Page{' '}\n            <strong>\n                {pageIndex + 1} of {pageOptions.length}\n            </strong>{' '}\n         </span> */}\n\n        {/*go to page, page size*/}\n        {/*<span className=\"p-10\">\n            Go to page: {' '}\n            <input className=\"p-10 form-control-sm\"\n                type=\"number\"\n                defaultValue={pageIndex + 1}\n                onChange={e => {\n                const page = e.target.value ? Number(e.target.value) - 1 : 0\n                gotoPage(page)\n                }}\n            /> {' '}\n        </span>*/}\n\n\n\n    </div>\n\n    </>\n  )\n}\n\nexport default TableOfEntries\n\n"]},"metadata":{},"sourceType":"module"}