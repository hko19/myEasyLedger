{"ast":null,"code":"var _jsxFileName = \"/Users/kyle/Easy_Ledger/front_end/src/components/table/line-item-form.jsx\";\nimport React from 'react';\nimport { useTable } from 'react-table';\n\nfunction LineItemForm(_ref) {\n  var _this = this;\n\n  var data = _ref.data,\n      setLineItemData = _ref.setLineItemData,\n      journalEntryDate = _ref.journalEntryDate,\n      setJournalEntryDate = _ref.setJournalEntryDate,\n      journalEntryDescription = _ref.journalEntryDescription,\n      setJournalEntryDescription = _ref.setJournalEntryDescription,\n      categories = _ref.categories,\n      accounts = _ref.accounts,\n      localization = _ref.localization;\n  var columns = React.useMemo(function () {\n    return [// accessor is the \"key\" in the data},\n    {\n      Header: 'Description',\n      accessor: 'description'\n    }, {\n      Header: 'Account',\n      accessor: 'accountName'\n    }, {\n      Header: 'Category',\n      accessor: 'categoryName'\n    }, {\n      Header: 'Debit',\n      accessor: 'debitAmount'\n    }, {\n      Header: 'Credit',\n      accessor: 'creditAmount'\n    }];\n  }, []);\n\n  var _useTable = useTable({\n    columns,\n    data\n  }),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      rows = _useTable.rows,\n      prepareRow = _useTable.prepareRow;\n\n  var returnFormByColumnType = function returnFormByColumnType(cell) {\n    var columnId = cell.column.id;\n    var accountTypesWithCategories = [3, 4, 5];\n\n    switch (columnId) {\n      case \"description\":\n        return /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          value: cell.value ? cell.value : '',\n          onChange: function onChange(event) {\n            var updatedLineItemData = data.slice();\n            updatedLineItemData[cell.row.index].description = event.target.value;\n            setLineItemData(updatedLineItemData);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 21\n          }\n        });\n\n      case \"debitAmount\":\n        return /*#__PURE__*/React.createElement(\"input\", {\n          type: \"number\",\n          className: \"form-control\",\n          value: cell.value ? cell.value : '',\n          step: \"any\",\n          onChange: function onChange(event) {\n            var updatedLineItemData = data.slice();\n            updatedLineItemData[cell.row.index].debitAmount = parseFloat(event.target.value);\n            updatedLineItemData[cell.row.index].creditAmount = null;\n            setLineItemData(updatedLineItemData);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 21\n          }\n        });\n\n      case \"creditAmount\":\n        return /*#__PURE__*/React.createElement(\"input\", {\n          type: \"number\",\n          className: \"form-control\",\n          value: cell.value ? cell.value : '',\n          step: \"any\",\n          onChange: function onChange(event) {\n            var updatedLineItemData = data.slice();\n            updatedLineItemData[cell.row.index].creditAmount = parseFloat(event.target.value);\n            updatedLineItemData[cell.row.index].debitAmount = null;\n            setLineItemData(updatedLineItemData);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }\n        });\n\n      case \"accountName\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"select\", {\n          value: data[cell.row.index].accountId,\n          className: \"form-control\",\n          onChange: function onChange(event) {\n            var updatedLineItemData = data.slice();\n            var selectedAccount = accounts.find(function (account) {\n              return account.accountId == event.target.value;\n            });\n            updatedLineItemData[cell.row.index].accountId = selectedAccount.accountId;\n            updatedLineItemData[cell.row.index].accountName = selectedAccount.accountName;\n            updatedLineItemData[cell.row.index].accountTypeId = selectedAccount.accountTypeId;\n\n            if (!accountTypesWithCategories.includes(selectedAccount.accountTypeId)) {\n              updatedLineItemData[cell.row.index].categoryId = null;\n              updatedLineItemData[cell.row.index].categoryName = null;\n            }\n\n            setLineItemData(updatedLineItemData);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }\n        }, accounts.map(function (account) {\n          return /*#__PURE__*/React.createElement(\"option\", {\n            key: account.accountId,\n            value: account.accountId,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 41\n            }\n          }, account.accountName);\n        })));\n\n      case \"categoryName\":\n        if (accountTypesWithCategories.includes(data[cell.row.index].accountTypeId)) {\n          var categoriesForThisAccountType = categories.filter(function (category) {\n            return category.accountTypeId == data[cell.row.index].accountTypeId;\n          });\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"select\", {\n            value: data[cell.row.index].categoryId ? data[cell.row.index].categoryId : \"\",\n            className: \"form-control\",\n            onChange: function onChange(event) {\n              var updatedLineItemData = data.slice();\n              var selectedCategory = categories.find(function (category) {\n                return category.categoryId == event.target.value;\n              });\n              updatedLineItemData[cell.row.index].categoryId = selectedCategory.categoryId;\n              updatedLineItemData[cell.row.index].categoryName = selectedCategory.categoryName;\n              setLineItemData(updatedLineItemData);\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }\n          }, categoriesForThisAccountType.map(function (category) {\n            return /*#__PURE__*/React.createElement(\"option\", {\n              key: category.categoryId,\n              value: category.categoryId,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 45\n              }\n            }, category.categoryName);\n          })));\n        } else {\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"select\", {\n            value: \"\",\n            readOnly: true,\n            className: \"form-control\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 29\n            }\n          }));\n        }\n\n      default:\n        return cell.value;\n    }\n  };\n\n  var addEmptyLineItem = function addEmptyLineItem() {\n    var updatedLineItemData = data.slice();\n    updatedLineItemData.push({\n      lineItemId: \"\",\n      accountName: \"\",\n      accountId: \"\",\n      accountTypeId: \"\",\n      description: \"\",\n      debitAmount: \"\",\n      creditAmount: \"\",\n      categoryName: \"\",\n      categoryId: \"\"\n    });\n    setLineItemData(updatedLineItemData);\n  };\n\n  var sumAmountsInColumn = function sumAmountsInColumn(columnName) {\n    var sum = 0;\n    data.forEach(function (row) {\n      sum += row[columnName];\n    });\n    return sum;\n  };\n\n  var removeRow = function removeRow(i) {\n    var updatedLineItemData = data.slice();\n    updatedLineItemData.splice(i, 1);\n    setLineItemData(updatedLineItemData);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row m-b-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 43\n    }\n  }, \"Date\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-11\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    className: \"form-control\",\n    value: journalEntryDate,\n    onChange: function onChange(event) {\n      return setJournalEntryDate(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row m-b-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 43\n    }\n  }, \"Description\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-11\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    value: journalEntryDescription,\n    onChange: function onChange(event) {\n      return setJournalEntryDescription(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-responsive\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", Object.assign({\n    className: \"table\"\n  }, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 21\n    }\n  }, headerGroups.map(function (headerGroup) {\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 29\n      }\n    }), headerGroup.headers.map(function (column) {\n      return (\n        /*#__PURE__*/\n        // Add the sorting props to control sorting. For this example\n        // we can add them into the header props\n        React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 37\n          }\n        }), column.render('Header'))\n      );\n    }), /*#__PURE__*/React.createElement(\"th\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 33\n      }\n    }));\n  })), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 21\n    }\n  }), rows.map(function (row, i) {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 37\n      }\n    }), row.cells.map(function (cell) {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 49\n        }\n      }), returnFormByColumnType(cell));\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-icon btn-white m-b-10\",\n      onClick: function onClick() {\n        return removeRow(i);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-times fa-fw fa-lg\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 49\n      }\n    }))));\n  })), /*#__PURE__*/React.createElement(\"tfoot\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 33\n    }\n  }, \"Total\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 29\n    }\n  }, new Intl.NumberFormat(localization.locale, {\n    style: 'currency',\n    currency: localization.currency\n  }).format(sumAmountsInColumn(\"debitAmount\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 29\n    }\n  }, new Intl.NumberFormat(localization.locale, {\n    style: 'currency',\n    currency: localization.currency\n  }).format(sumAmountsInColumn(\"creditAmount\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-green btn-block row m-b-10\",\n    style: {\n      margin: 'auto'\n    },\n    onClick: function onClick() {\n      return addEmptyLineItem();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 17\n    }\n  }, \"Add a Line Item\")));\n}\n\nexport default LineItemForm;","map":{"version":3,"sources":["/Users/kyle/Easy_Ledger/front_end/src/components/table/line-item-form.jsx"],"names":["React","useTable","LineItemForm","data","setLineItemData","journalEntryDate","setJournalEntryDate","journalEntryDescription","setJournalEntryDescription","categories","accounts","localization","columns","useMemo","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","returnFormByColumnType","cell","columnId","column","id","accountTypesWithCategories","value","event","updatedLineItemData","slice","row","index","description","target","debitAmount","parseFloat","creditAmount","accountId","selectedAccount","find","account","accountName","accountTypeId","includes","categoryId","categoryName","map","categoriesForThisAccountType","filter","category","selectedCategory","addEmptyLineItem","push","lineItemId","sumAmountsInColumn","columnName","sum","forEach","removeRow","i","splice","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","getRowProps","cells","getCellProps","Intl","NumberFormat","locale","style","currency","format","margin"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useTable } from 'react-table'\n\nfunction LineItemForm({\n    data, setLineItemData,\n    journalEntryDate, setJournalEntryDate,\n    journalEntryDescription, setJournalEntryDescription,\n    categories,\n    accounts,\n    localization\n}) {\n    \n\n\n    const columns = React.useMemo(\n        () => [ // accessor is the \"key\" in the data},\n            { Header: 'Description', accessor: 'description' },\n            { Header: 'Account', accessor: 'accountName' },\n            { Header: 'Category', accessor: 'categoryName' },\n            { Header: 'Debit', accessor: 'debitAmount' },\n            { Header: 'Credit', accessor: 'creditAmount' },\n        ],\n        []\n    )\n\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n    } = useTable(\n        {\n            columns,\n            data\n        }\n    )\n    \n    const returnFormByColumnType = cell => {\n        const columnId = cell.column.id;\n        const accountTypesWithCategories = [3, 4, 5];\n        switch (columnId) {\n            case \"description\":\n                return( \n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        value={cell.value ? cell.value : ''}\n                        onChange={event => {\n                            let updatedLineItemData = data.slice();\n                            updatedLineItemData[cell.row.index].description = event.target.value;\n                            setLineItemData(updatedLineItemData);\n                        }}\n                    />\n                )\n            case \"debitAmount\":\n                return(\n                    <input\n                        type=\"number\"\n                        className=\"form-control\"\n                        value={cell.value ? cell.value : ''}\n                        step=\"any\"\n                        onChange={event => {\n                            let updatedLineItemData = data.slice();\n                            updatedLineItemData[cell.row.index].debitAmount = parseFloat(event.target.value);\n                            updatedLineItemData[cell.row.index].creditAmount = null;\n                            setLineItemData(updatedLineItemData);\n                        }}\n                    />\n                )\n            case \"creditAmount\":\n                return(\n                    <input\n                        type=\"number\"\n                        className=\"form-control\"\n                        value={cell.value ? cell.value : ''}\n                        step=\"any\"\n                        onChange={event => {\n                            let updatedLineItemData = data.slice();\n                            updatedLineItemData[cell.row.index].creditAmount = parseFloat(event.target.value);\n                            updatedLineItemData[cell.row.index].debitAmount = null;\n                            setLineItemData(updatedLineItemData);\n                        }}\n                    />\n                )\n            case \"accountName\":\n                return(\n                    <>\n                        <select\n                            value={data[cell.row.index].accountId}\n                            className=\"form-control\"\n                            onChange={event => {\n                                let updatedLineItemData = data.slice();\n                                let selectedAccount = accounts.find(account => account.accountId == event.target.value);\n                                updatedLineItemData[cell.row.index].accountId = selectedAccount.accountId;\n                                updatedLineItemData[cell.row.index].accountName = selectedAccount.accountName;\n                                updatedLineItemData[cell.row.index].accountTypeId = selectedAccount.accountTypeId;\n                                if (!accountTypesWithCategories.includes(selectedAccount.accountTypeId)) {\n                                    updatedLineItemData[cell.row.index].categoryId = null;\n                                    updatedLineItemData[cell.row.index].categoryName = null;\n                                }\n                                setLineItemData(updatedLineItemData);\n                            }}\n                        >\n                            {accounts.map(\n                                (account) => {\n                                    return(\n                                        <option key={account.accountId} value={account.accountId}>{account.accountName}</option>\n                                    )\n                                }\n                            )}\n                        </select>\n                    </>\n                )\n            case \"categoryName\":\n                if (accountTypesWithCategories.includes(data[cell.row.index].accountTypeId)) {\n                    const categoriesForThisAccountType = categories.filter(category => category.accountTypeId == data[cell.row.index].accountTypeId);\n                    return(\n                        <>\n                            <select\n                                value={data[cell.row.index].categoryId ? data[cell.row.index].categoryId : \"\" }\n                                className=\"form-control\"\n                                onChange={event => {\n                                    let updatedLineItemData = data.slice();\n                                    let selectedCategory = categories.find(category => category.categoryId == event.target.value);\n                                    updatedLineItemData[cell.row.index].categoryId = selectedCategory.categoryId;\n                                    updatedLineItemData[cell.row.index].categoryName = selectedCategory.categoryName;\n                                    setLineItemData(updatedLineItemData);\n                                }}\n                            >\n                                {categoriesForThisAccountType.map(\n                                    (category) => {\n                                        return(\n                                            <option key={category.categoryId} value={category.categoryId}>{category.categoryName}</option>\n                                        )\n                                    }\n                                )}\n                            </select>\n                        </>\n                    )\n                } else {\n                    return(\n                        <>\n                            <select\n                                value=\"\"\n                                readOnly\n                                className=\"form-control\">\n                            </select>\n                        </>\n                    )\n                }\n            default:\n                return (cell.value);\n        }\n    }\n    const addEmptyLineItem = () => {\n        let updatedLineItemData = data.slice();\n        updatedLineItemData.push({\n            lineItemId: \"\",\n            accountName: \"\",\n            accountId: \"\",\n            accountTypeId: \"\",\n            description: \"\",\n            debitAmount: \"\",\n            creditAmount: \"\",\n            categoryName: \"\",\n            categoryId: \"\",\n        })\n        setLineItemData(updatedLineItemData);\n    }\n\n    const sumAmountsInColumn = columnName => {\n        let sum = 0;\n        data.forEach(row => {\n            sum += row[columnName];\n        });\n        return sum;\n    }\n    \n    const removeRow = i => {\n        let updatedLineItemData = data.slice();\n        updatedLineItemData.splice(i, 1);\n        setLineItemData(updatedLineItemData);\n    }\n\n    return (\n        <>\n            <div className=\"row m-b-10\">\n                <div className=\"col-md-1\"><strong>Date</strong></div> \n                <div className=\"col-md-11\">\n                    <input \n                        type=\"date\" \n                        className=\"form-control\"\n                        value={journalEntryDate} \n                        onChange={event => setJournalEntryDate(event.target.value)}/>\n                    </div>\n            </div>\n            <div className=\"row m-b-10\">\n                <div className=\"col-md-1\"><strong>Description</strong></div> \n                <div className=\"col-md-11\">\n                    <input \n                        type=\"text\" \n                        className=\"form-control\"\n                        value={journalEntryDescription} \n                        onChange={event => setJournalEntryDescription(event.target.value)}/>\n                    </div>\n            </div>\n            <br></br>\n\n            <div className=\"table-responsive\">\n                <table className=\"table\"{...getTableProps()}>\n                    <thead>\n                        {headerGroups.map(headerGroup => (\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n                                {headerGroup.headers.map(column => (\n                                    // Add the sorting props to control sorting. For this example\n                                    // we can add them into the header props\n                                    <th {...column.getHeaderProps()}>\n                                        {column.render('Header')}\n                                    </th>\n                                ))}\n                                <th></th>\n                            </tr>\n                        ))}\n                    </thead>\n                    <tbody {...getTableBodyProps()}>\n                        {rows.map(\n                            (row, i) => {\n                                prepareRow(row);\n                                return (\n                                    <tr {...row.getRowProps()}>\n                                        {row.cells.map(cell => {\n                                            return (\n                                                <td {...cell.getCellProps()}>\n                                                    {returnFormByColumnType(cell)}\n                                                </td>\n                                            )\n                                        })}\n                                        <td>\n                                            <button className=\"btn btn-icon btn-white m-b-10\" onClick={() => removeRow(i)}>\n                                                <i className=\"fas fa-times fa-fw fa-lg\"></i>\n                                            </button>\n                                        </td>\n                                    </tr>\n                                )\n                            }\n                        )}\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td><strong>Total</strong></td>\n                            <td></td>\n                            <td></td>\n                            <td>{new Intl.NumberFormat(localization.locale, { style: 'currency', currency:localization.currency }).format(sumAmountsInColumn(\"debitAmount\"))}</td>\n                            <td>{new Intl.NumberFormat(localization.locale, { style: 'currency', currency:localization.currency }).format(sumAmountsInColumn(\"creditAmount\"))}</td>\n                            <td></td>\n                        </tr>\n                    </tfoot>\n                </table>\n                <button className=\"btn btn-green btn-block row m-b-10\" style={{margin: 'auto'}} onClick={() => addEmptyLineItem()}>Add a Line Item</button>\n            </div>\n        </>\n    )\n}\n\nexport default LineItemForm\n"]},"metadata":{},"sourceType":"module"}