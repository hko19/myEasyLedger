[{"/Users/kyle/Easy_Ledger/front_end/src/index.js":"1","/Users/kyle/Easy_Ledger/front_end/src/app.jsx":"2","/Users/kyle/Easy_Ledger/front_end/src/config/page-settings.js":"3","/Users/kyle/Easy_Ledger/front_end/src/utils/constants.js":"4","/Users/kyle/Easy_Ledger/front_end/src/components/top-menu/top-menu.jsx":"5","/Users/kyle/Easy_Ledger/front_end/src/components/header/header.jsx":"6","/Users/kyle/Easy_Ledger/front_end/src/components/content/content.jsx":"7","/Users/kyle/Easy_Ledger/front_end/src/components/sidebar-right/sidebar-right.jsx":"8","/Users/kyle/Easy_Ledger/front_end/src/components/sidebar/sidebar.jsx":"9","/Users/kyle/Easy_Ledger/front_end/src/components/footer/footer.jsx":"10","/Users/kyle/Easy_Ledger/front_end/src/components/float-sub-menu/float-sub-menu.jsx":"11","/Users/kyle/Easy_Ledger/front_end/src/utils/interceptors.js":"12","/Users/kyle/Easy_Ledger/front_end/src/components/top-menu/top-menu-nav.jsx":"13","/Users/kyle/Easy_Ledger/front_end/src/components/sidebar/sidebar-nav.jsx":"14","/Users/kyle/Easy_Ledger/front_end/src/config/page-route.jsx":"15","/Users/kyle/Easy_Ledger/front_end/src/components/float-sub-menu/float-sub-menu-list.jsx":"16","/Users/kyle/Easy_Ledger/front_end/src/components/sidebar/sidebar-profile.jsx":"17","/Users/kyle/Easy_Ledger/front_end/src/components/header/dropdown/notification.jsx":"18","/Users/kyle/Easy_Ledger/front_end/src/components/header/dropdown/profile.jsx":"19","/Users/kyle/Easy_Ledger/front_end/src/components/header/dropdown/mega.jsx":"20","/Users/kyle/Easy_Ledger/front_end/src/components/header/dropdown/language.jsx":"21","/Users/kyle/Easy_Ledger/front_end/src/components/header/search/form.jsx":"22","/Users/kyle/Easy_Ledger/front_end/src/components/top-menu/menu.jsx":"23","/Users/kyle/Easy_Ledger/front_end/src/components/sidebar/menu.jsx":"24","/Users/kyle/Easy_Ledger/front_end/src/pages/chart-of-accounts/account-details.js":"25","/Users/kyle/Easy_Ledger/front_end/src/pages/reports/balance-sheet-report.js":"26","/Users/kyle/Easy_Ledger/front_end/src/pages/reports/income-statement-report.js":"27","/Users/kyle/Easy_Ledger/front_end/src/pages/reports/reports.js":"28","/Users/kyle/Easy_Ledger/front_end/src/pages/chart-of-accounts/chart-of-accounts.js":"29","/Users/kyle/Easy_Ledger/front_end/src/pages/dashboard/dashboard.js":"30","/Users/kyle/Easy_Ledger/front_end/src/pages/user/registration-successful.js":"31","/Users/kyle/Easy_Ledger/front_end/src/pages/user/register-v3.js":"32","/Users/kyle/Easy_Ledger/front_end/src/pages/user/logout.js":"33","/Users/kyle/Easy_Ledger/front_end/src/pages/user/login-v3.js":"34","/Users/kyle/Easy_Ledger/front_end/src/pages/user/login-v1.js":"35","/Users/kyle/Easy_Ledger/front_end/src/pages/helper/helper-css.js":"36","/Users/kyle/Easy_Ledger/front_end/src/pages/extra/extra-scrum-board.js":"37","/Users/kyle/Easy_Ledger/front_end/src/pages/user/login-v2.js":"38","/Users/kyle/Easy_Ledger/front_end/src/pages/extra/extra-cookie-acceptance-banner.js":"39","/Users/kyle/Easy_Ledger/front_end/src/pages/extra/extra-search.js":"40","/Users/kyle/Easy_Ledger/front_end/src/pages/extra/extra-invoice.js":"41","/Users/kyle/Easy_Ledger/front_end/src/pages/extra/extra-coming-soon.js":"42","/Users/kyle/Easy_Ledger/front_end/src/pages/extra/extra-timeline.js":"43","/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-search-sidebar.js":"44","/Users/kyle/Easy_Ledger/front_end/src/pages/extra/extra-profile.js":"45","/Users/kyle/Easy_Ledger/front_end/src/pages/extra/extra-error.js":"46","/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-transparent-sidebar.js":"47","/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-boxed-layout.js":"48","/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-mixed-menu.js":"49","/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-boxed-layout-with-mixed-menu.js":"50","/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-mega-menu.js":"51","/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-light-sidebar.js":"52","/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-top-menu.js":"53","/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-full-height.js":"54","/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-two-sidebar.js":"55","/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-wide-sidebar.js":"56","/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-without-sidebar.js":"57","/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-footer.js":"58","/Users/kyle/Easy_Ledger/front_end/src/pages/map/map.js":"59","/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-blank.js":"60","/Users/kyle/Easy_Ledger/front_end/src/pages/calendar/calendar.js":"61","/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-right-sidebar.js":"62","/Users/kyle/Easy_Ledger/front_end/src/pages/gallery/gallery.js":"63","/Users/kyle/Easy_Ledger/front_end/src/pages/chart/chart-js.js":"64","/Users/kyle/Easy_Ledger/front_end/src/pages/chart/chart-apex.js":"65","/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-minified-sidebar.js":"66","/Users/kyle/Easy_Ledger/front_end/src/pages/chart/chart-d3.js":"67","/Users/kyle/Easy_Ledger/front_end/src/pages/form/form-plugins.js":"68","/Users/kyle/Easy_Ledger/front_end/src/pages/table/table-basic.js":"69","/Users/kyle/Easy_Ledger/front_end/src/pages/form/form-elements.js":"70","/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-social-buttons.js":"71","/Users/kyle/Easy_Ledger/front_end/src/pages/bootstrap/bootstrap-4.js":"72","/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-language-bar-icon.js":"73","/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-simple-line-icons.js":"74","/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-icons.js":"75","/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-ionicons.js":"76","/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-buttons.js":"77","/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-media-object.js":"78","/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-widget-boxes.js":"79","/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-tabs-accordion.js":"80","/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-modal-notification.js":"81","/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-general.js":"82","/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-typography.js":"83","/Users/kyle/Easy_Ledger/front_end/src/pages/dashboard/dashboard-v3.js":"84","/Users/kyle/Easy_Ledger/front_end/src/pages/dashboard/dashboard-v2.js":"85","/Users/kyle/Easy_Ledger/front_end/src/pages/dashboard/dashboard-v1.js":"86","/Users/kyle/Easy_Ledger/front_end/src/components/sidebar/sidebar-nav-list.jsx":"87","/Users/kyle/Easy_Ledger/front_end/src/components/top-menu/top-menu-nav-list.jsx":"88","/Users/kyle/Easy_Ledger/front_end/src/pages/email/email-inbox.js":"89","/Users/kyle/Easy_Ledger/front_end/src/pages/email/email-compose.js":"90","/Users/kyle/Easy_Ledger/front_end/src/pages/email/email-detail.js":"91","/Users/kyle/Easy_Ledger/front_end/src/pages/widget/widget.js":"92","/Users/kyle/Easy_Ledger/front_end/src/pages/reports/components/report-type-list.js":"93","/Users/kyle/Easy_Ledger/front_end/src/pages/reports/components/balance-sheet-render.js":"94","/Users/kyle/Easy_Ledger/front_end/src/components/panel/panel.jsx":"95","/Users/kyle/Easy_Ledger/front_end/src/pages/chart-of-accounts/components/account-details-sidebar.js":"96","/Users/kyle/Easy_Ledger/front_end/src/pages/user/login-v3-render.js":"97","/Users/kyle/Easy_Ledger/front_end/src/pages/user/register-v3-render.js":"98","/Users/kyle/Easy_Ledger/front_end/src/pages/dashboard/components/income-and-expense-summary.js":"99","/Users/kyle/Easy_Ledger/front_end/src/pages/dashboard/components/balance-summary.js":"100","/Users/kyle/Easy_Ledger/front_end/src/pages/reports/components/income-statement-render.js":"101","/Users/kyle/Easy_Ledger/front_end/src/components/sidebar/toggle-mobile-sidebar-button.jsx":"102","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/login-v3-text.js":"103","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/balance-sheet-render-text.js":"104","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/report-type-list-text.js":"105","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/income-statement-render-text.js":"106","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/balance-sheet-report-text.js":"107","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/income-statement-report-text.js":"108","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/reports-text.js":"109","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/journal-entry-view-mode-text.js":"110","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/general-journal-text.js":"111","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/journal-entry-edit-mode-text.js":"112","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/table-of-journal-entries-text.js":"113","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/journals-text.js":"114","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/balance-summary-text.js":"115","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/income-and-expense-summary-text.js":"116","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/dashboard-text.js":"117","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/chart-of-accounts-text.js":"118","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/account-details-text.js":"119","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/account-details-sidebar-text.js":"120","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/sidebar-text.js":"121","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/register-v3-text.js":"122","/Users/kyle/Easy_Ledger/front_end/src/pages/settings/settings.js":"123","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/settings-text.js":"124","/Users/kyle/Easy_Ledger/front_end/src/pages/settings/manage-easyledger.js":"125","/Users/kyle/Easy_Ledger/front_end/src/pages/settings/components/organization-roster.js":"126","/Users/kyle/Easy_Ledger/front_end/src/components/sidebar/create-a-new-organization.js":"127","/Users/kyle/Easy_Ledger/front_end/src/components/sidebar/new-organization-form.js":"128","/Users/kyle/Easy_Ledger/front_end/src/pages/journals/journals.js":"129","/Users/kyle/Easy_Ledger/front_end/src/pages/journals/enterprise/general-journal.jsx":"130","/Users/kyle/Easy_Ledger/front_end/src/pages/journals/enterprise/table-of-journal-entries.jsx":"131","/Users/kyle/Easy_Ledger/front_end/src/pages/journals/enterprise/journal-entry-view-mode.jsx":"132","/Users/kyle/Easy_Ledger/front_end/src/pages/journals/enterprise/journal-entry-edit-mode.jsx":"133","/Users/kyle/Easy_Ledger/front_end/src/pages/accounts/accounts.js":"134","/Users/kyle/Easy_Ledger/front_end/src/pages/categories/categories.js":"135","/Users/kyle/Easy_Ledger/front_end/src/pages/journals/personal/table-of-transactions.jsx":"136","/Users/kyle/Easy_Ledger/front_end/src/pages/journals/personal/transaction-view-mode.jsx":"137","/Users/kyle/Easy_Ledger/front_end/src/pages/journals/personal/transaction-edit-mode.jsx":"138"},{"size":827,"mtime":1578275996000,"results":"139","hashOfConfig":"140"},{"size":15992,"mtime":1613273661356,"results":"141","hashOfConfig":"140"},{"size":78,"mtime":1547770483000,"results":"142","hashOfConfig":"140"},{"size":9448,"mtime":1613963324755,"results":"143","hashOfConfig":"140"},{"size":448,"mtime":1564580395000,"results":"144","hashOfConfig":"140"},{"size":3448,"mtime":1611980694094,"results":"145","hashOfConfig":"140"},{"size":1471,"mtime":1611036675139,"results":"146","hashOfConfig":"140"},{"size":2368,"mtime":1564631645000,"results":"147","hashOfConfig":"140"},{"size":1232,"mtime":1612508190230,"results":"148","hashOfConfig":"140"},{"size":390,"mtime":1548255605000,"results":"149","hashOfConfig":"140"},{"size":2365,"mtime":1564622980000,"results":"150","hashOfConfig":"140"},{"size":2446,"mtime":1605777870246,"results":"151","hashOfConfig":"140"},{"size":4375,"mtime":1548341456000,"results":"152","hashOfConfig":"140"},{"size":2887,"mtime":1613541457401,"results":"153","hashOfConfig":"140"},{"size":13239,"mtime":1613544393938,"results":"154","hashOfConfig":"140"},{"size":2425,"mtime":1564639384000,"results":"155","hashOfConfig":"140"},{"size":4073,"mtime":1613272833439,"results":"156","hashOfConfig":"140"},{"size":3200,"mtime":1564542038000,"results":"157","hashOfConfig":"140"},{"size":1180,"mtime":1597105252912,"results":"158","hashOfConfig":"140"},{"size":7063,"mtime":1564585623000,"results":"159","hashOfConfig":"140"},{"size":1432,"mtime":1564583657000,"results":"160","hashOfConfig":"140"},{"size":464,"mtime":1564544298000,"results":"161","hashOfConfig":"140"},{"size":6392,"mtime":1564998749000,"results":"162","hashOfConfig":"140"},{"size":7320,"mtime":1613544336671,"results":"163","hashOfConfig":"140"},{"size":8955,"mtime":1614058945178,"results":"164","hashOfConfig":"140"},{"size":1444,"mtime":1612226818409,"results":"165","hashOfConfig":"140"},{"size":1475,"mtime":1612226819799,"results":"166","hashOfConfig":"140"},{"size":1194,"mtime":1612226821158,"results":"167","hashOfConfig":"140"},{"size":27640,"mtime":1613548133745,"results":"168","hashOfConfig":"140"},{"size":1567,"mtime":1613196517787,"results":"169","hashOfConfig":"140"},{"size":2188,"mtime":1607413792268,"results":"170","hashOfConfig":"140"},{"size":695,"mtime":1612227861575,"results":"171","hashOfConfig":"140"},{"size":425,"mtime":1605776867875,"results":"172","hashOfConfig":"140"},{"size":705,"mtime":1605775953167,"results":"173","hashOfConfig":"140"},{"size":2119,"mtime":1564578127000,"results":"174","hashOfConfig":"140"},{"size":136032,"mtime":1564569494000,"results":"175","hashOfConfig":"140"},{"size":16522,"mtime":1578623308000,"results":"176","hashOfConfig":"140"},{"size":4351,"mtime":1564577946000,"results":"177","hashOfConfig":"140"},{"size":2063,"mtime":1578553159000,"results":"178","hashOfConfig":"140"},{"size":15236,"mtime":1564558875000,"results":"179","hashOfConfig":"140"},{"size":5247,"mtime":1548310025000,"results":"180","hashOfConfig":"140"},{"size":3480,"mtime":1564631698000,"results":"181","hashOfConfig":"140"},{"size":7956,"mtime":1564558899000,"results":"182","hashOfConfig":"140"},{"size":1119,"mtime":1578553512000,"results":"183","hashOfConfig":"140"},{"size":56558,"mtime":1564555429000,"results":"184","hashOfConfig":"140"},{"size":1094,"mtime":1564554927000,"results":"185","hashOfConfig":"140"},{"size":1171,"mtime":1564581674000,"results":"186","hashOfConfig":"140"},{"size":1115,"mtime":1564581045000,"results":"187","hashOfConfig":"140"},{"size":1095,"mtime":1564581616000,"results":"188","hashOfConfig":"140"},{"size":1255,"mtime":1564579025000,"results":"189","hashOfConfig":"140"},{"size":1104,"mtime":1564581118000,"results":"190","hashOfConfig":"140"},{"size":1123,"mtime":1564581110000,"results":"191","hashOfConfig":"140"},{"size":1170,"mtime":1564581671000,"results":"192","hashOfConfig":"140"},{"size":4478,"mtime":1564639008000,"results":"193","hashOfConfig":"140"},{"size":1108,"mtime":1564581676000,"results":"194","hashOfConfig":"140"},{"size":1116,"mtime":1564581146000,"results":"195","hashOfConfig":"140"},{"size":1277,"mtime":1564581678000,"results":"196","hashOfConfig":"140"},{"size":1071,"mtime":1564581070000,"results":"197","hashOfConfig":"140"},{"size":1094,"mtime":1564578159000,"results":"198","hashOfConfig":"140"},{"size":793,"mtime":1564578974000,"results":"199","hashOfConfig":"140"},{"size":2521,"mtime":1564545412000,"results":"200","hashOfConfig":"140"},{"size":1123,"mtime":1564581624000,"results":"201","hashOfConfig":"140"},{"size":12536,"mtime":1564568464000,"results":"202","hashOfConfig":"140"},{"size":8208,"mtime":1564545950000,"results":"203","hashOfConfig":"140"},{"size":29003,"mtime":1578801443000,"results":"204","hashOfConfig":"140"},{"size":1147,"mtime":1564581456000,"results":"205","hashOfConfig":"140"},{"size":15786,"mtime":1564545984000,"results":"206","hashOfConfig":"140"},{"size":12032,"mtime":1564568417000,"results":"207","hashOfConfig":"140"},{"size":14947,"mtime":1564585378000,"results":"208","hashOfConfig":"140"},{"size":31593,"mtime":1564559145000,"results":"209","hashOfConfig":"140"},{"size":12329,"mtime":1564584866000,"results":"210","hashOfConfig":"140"},{"size":17801,"mtime":1607927507621,"results":"211","hashOfConfig":"140"},{"size":54213,"mtime":1564583625000,"results":"212","hashOfConfig":"140"},{"size":18649,"mtime":1564584267000,"results":"213","hashOfConfig":"140"},{"size":175057,"mtime":1564583452000,"results":"214","hashOfConfig":"140"},{"size":152142,"mtime":1564583583000,"results":"215","hashOfConfig":"140"},{"size":17297,"mtime":1564582416000,"results":"216","hashOfConfig":"140"},{"size":12373,"mtime":1564583686000,"results":"217","hashOfConfig":"140"},{"size":20706,"mtime":1564639016000,"results":"218","hashOfConfig":"140"},{"size":10627,"mtime":1564585698000,"results":"219","hashOfConfig":"140"},{"size":12760,"mtime":1597806002217,"results":"220","hashOfConfig":"140"},{"size":15722,"mtime":1612249449141,"results":"221","hashOfConfig":"140"},{"size":14727,"mtime":1564585754000,"results":"222","hashOfConfig":"140"},{"size":36920,"mtime":1578302175000,"results":"223","hashOfConfig":"140"},{"size":18463,"mtime":1597804217604,"results":"224","hashOfConfig":"140"},{"size":26567,"mtime":1607842433380,"results":"225","hashOfConfig":"140"},{"size":2823,"mtime":1612518985360,"results":"226","hashOfConfig":"140"},{"size":1959,"mtime":1564581527000,"results":"227","hashOfConfig":"140"},{"size":19329,"mtime":1564638992000,"results":"228","hashOfConfig":"140"},{"size":9036,"mtime":1564638974000,"results":"229","hashOfConfig":"140"},{"size":8404,"mtime":1564638982000,"results":"230","hashOfConfig":"140"},{"size":76994,"mtime":1608189971688,"results":"231","hashOfConfig":"140"},{"size":1625,"mtime":1612226815253,"results":"232","hashOfConfig":"140"},{"size":13257,"mtime":1612340213238,"results":"233","hashOfConfig":"140"},{"size":3028,"mtime":1564545901000,"results":"234","hashOfConfig":"140"},{"size":10333,"mtime":1613176748530,"results":"235","hashOfConfig":"140"},{"size":5901,"mtime":1613091203602,"results":"236","hashOfConfig":"140"},{"size":11472,"mtime":1613026721022,"results":"237","hashOfConfig":"140"},{"size":7425,"mtime":1612590202574,"results":"238","hashOfConfig":"140"},{"size":3283,"mtime":1613543941288,"results":"239","hashOfConfig":"140"},{"size":12933,"mtime":1612586019411,"results":"240","hashOfConfig":"140"},{"size":494,"mtime":1611982504559,"results":"241","hashOfConfig":"140"},{"size":1691,"mtime":1612685221655,"results":"242","hashOfConfig":"140"},{"size":5904,"mtime":1612685221645,"results":"243","hashOfConfig":"140"},{"size":422,"mtime":1612685221657,"results":"244","hashOfConfig":"140"},{"size":1851,"mtime":1612685221651,"results":"245","hashOfConfig":"140"},{"size":298,"mtime":1612518821557,"results":"246","hashOfConfig":"140"},{"size":304,"mtime":1612685221652,"results":"247","hashOfConfig":"140"},{"size":180,"mtime":1612685221658,"results":"248","hashOfConfig":"140"},{"size":826,"mtime":1613892072166,"results":"249","hashOfConfig":"140"},{"size":408,"mtime":1612685221649,"results":"250","hashOfConfig":"140"},{"size":762,"mtime":1613633428904,"results":"251","hashOfConfig":"140"},{"size":1836,"mtime":1612685221660,"results":"252","hashOfConfig":"140"},{"size":187,"mtime":1612685221654,"results":"253","hashOfConfig":"140"},{"size":285,"mtime":1612685221645,"results":"254","hashOfConfig":"140"},{"size":940,"mtime":1612685221650,"results":"255","hashOfConfig":"140"},{"size":195,"mtime":1612685221648,"results":"256","hashOfConfig":"140"},{"size":8078,"mtime":1613547560365,"results":"257","hashOfConfig":"140"},{"size":744,"mtime":1613634485031,"results":"258","hashOfConfig":"140"},{"size":1999,"mtime":1612685221644,"results":"259","hashOfConfig":"140"},{"size":2081,"mtime":1613541674019,"results":"260","hashOfConfig":"140"},{"size":2647,"mtime":1612685221656,"results":"261","hashOfConfig":"140"},{"size":4288,"mtime":1613198518809,"results":"262","hashOfConfig":"140"},{"size":1168,"mtime":1613205499238,"results":"263","hashOfConfig":"140"},{"size":1493,"mtime":1613262745781,"results":"264","hashOfConfig":"140"},{"size":14256,"mtime":1613205322921,"results":"265","hashOfConfig":"140"},{"size":1058,"mtime":1613264332254,"results":"266","hashOfConfig":"140"},{"size":4236,"mtime":1613273012571,"results":"267","hashOfConfig":"140"},{"size":1051,"mtime":1613446375204,"results":"268","hashOfConfig":"140"},{"size":2134,"mtime":1613446273544,"results":"269","hashOfConfig":"140"},{"size":17444,"mtime":1613717236091,"results":"270","hashOfConfig":"140"},{"size":4060,"mtime":1613633503896,"results":"271","hashOfConfig":"140"},{"size":11819,"mtime":1613633475779,"results":"272","hashOfConfig":"140"},{"size":25075,"mtime":1613548232200,"results":"273","hashOfConfig":"140"},{"size":25130,"mtime":1613548190622,"results":"274","hashOfConfig":"140"},{"size":20274,"mtime":1614064371765,"results":"275","hashOfConfig":"140"},{"size":4995,"mtime":1613962220487,"results":"276","hashOfConfig":"140"},{"size":12210,"mtime":1614061177877,"results":"277","hashOfConfig":"140"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},"1120ydm",{"filePath":"281","messages":"282","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"280"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"280"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"280"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"280"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"280"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"280"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"280"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"280"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"479","usedDeprecatedRules":"280"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"280"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485","usedDeprecatedRules":"280"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"280"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491","usedDeprecatedRules":"280"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494","usedDeprecatedRules":"280"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"539","usedDeprecatedRules":"280"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"542","messages":"543","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546","usedDeprecatedRules":"280"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551","usedDeprecatedRules":"280"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"556","usedDeprecatedRules":"280"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"280"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562","usedDeprecatedRules":"280"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565","usedDeprecatedRules":"280"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"568","usedDeprecatedRules":"280"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"571","usedDeprecatedRules":"280"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"574","messages":"575","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"280"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kyle/Easy_Ledger/front_end/src/index.js",[],["579","580"],"/Users/kyle/Easy_Ledger/front_end/src/app.jsx",["581","582"],"import React from 'react';\nimport { PageSettings } from './config/page-settings.js';\n\nimport Header from './components/header/header.jsx';\nimport Sidebar from './components/sidebar/sidebar.jsx';\nimport SidebarRight from './components/sidebar-right/sidebar-right.jsx';\nimport TopMenu from './components/top-menu/top-menu.jsx';\nimport Content from './components/content/content.jsx';\nimport Footer from './components/footer/footer.jsx';\nimport FloatSubMenu from './components/float-sub-menu/float-sub-menu.jsx';\nimport { ACCESS_TOKEN, API_BASE_URL} from './utils/constants.js';\nimport jwt_decode from 'jwt-decode';\nimport interceptors from \"./utils/interceptors\"; //interceptors for API requests, used for auth purposes.\nimport axios from 'axios';\n\n\nclass App extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.toggleSidebarMinify = (e) => {\n\t\t\te.preventDefault();\n\t\t\tif (this.state.pageSidebarMinify) {\n\t\t\t\tthis.setState(state => ({\n\t\t\t\t\tpageFloatSubMenuActive: false\n\t\t\t\t}));\n\t\t\t}\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageSidebarMinify: !this.state.pageSidebarMinify\n\t\t\t}));\n\t\t}\n\t\tthis.toggleMobileSidebar = (e) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageSidebarToggled: !this.state.pageSidebarToggled\n\t\t\t}));\n\t\t}\n\t\tthis.handleSetPageSidebar = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageSidebar: value\n\t\t\t}));\n\t\t}\n\t\tthis.handleSetPageSidebarMinified = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageSidebarMinify: value\n\t\t\t}));\n\t\t}\n\t\tthis.handleSetPageSidebarWide = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageSidebarWide: value\n\t\t\t}));\n\t\t}\n\t\tthis.handleSetPageSidebarLight = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageSidebarLight: value\n\t\t\t}));\n\t\t}\n\t\tthis.handleSetPageSidebarTransparent = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageSidebarTransparent: value\n\t\t\t}));\n\t\t}\n\t\tthis.handleSetPageSidebarSearch = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageSidebarSearch: value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tthis.toggleRightSidebar = (e) => {\n\t\t\te.preventDefault();\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageRightSidebarCollapsed: !this.state.pageRightSidebarCollapsed\n\t\t\t}));\n\t\t}\n\t\tthis.toggleMobileRightSidebar = (e) => {\n\t\t\te.preventDefault();\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageMobileRightSidebarToggled: !this.state.pageMobileRightSidebarToggled\n\t\t\t}));\n\t\t}\n\t\tthis.handleSetPageRightSidebar = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageRightSidebar: value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tvar floatSubMenuRemove;\n\t\tvar floatSubMenuCalculate;\n\t\tvar floatSubMenuRemoveTime = 250;\n\t\tthis.handleFloatSubMenuOnMouseOver = (e) => {\n\t\t\tclearTimeout(floatSubMenuRemove);\n\t\t\tclearTimeout(floatSubMenuCalculate);\n\t\t}\n\t\tthis.handleFloatSubMenuOnMouseOut = (e) => {\n\t\t\tfloatSubMenuRemove = setTimeout(() => {\n\t\t\t\tthis.setState(state => ({\n\t\t\t\t\tpageFloatSubMenuActive: false\n\t\t\t\t}));\n\t\t\t}, floatSubMenuRemoveTime);\n\t\t}\n\t\tthis.handleSidebarOnMouseOver = (e, menu) => {\n\t\t\tif (this.state.pageSidebarMinify) {\n\t\t\t\tif (menu.children) {\n\t\t\t\t\tvar left = (document.getElementById('sidebar').offsetWidth + document.getElementById('sidebar').offsetLeft) + 'px';\n\t\t\t\t\t\n\t\t\t\t\tclearTimeout(floatSubMenuRemove);\n\t\t\t\t\tclearTimeout(floatSubMenuCalculate);\n\t\t\t\n\t\t\t\t\tthis.setState(state => ({\n\t\t\t\t\t\tpageFloatSubMenu: menu,\n\t\t\t\t\t\tpageFloatSubMenuActive: true,\n\t\t\t\t\t\tpageFloatSubMenuLeft: left\n\t\t\t\t\t}));\n\t\t\t\t\t\n\t\t\t\t\tvar offset = e.currentTarget.offsetParent.getBoundingClientRect();\n\t\t\t\t\t\n\t\t\t\t\tfloatSubMenuCalculate = setTimeout(() => {\n\t\t\t\t\t\tvar targetTop = offset.top;\n\t\t\t\t\t\tvar windowHeight = window.innerHeight;\n\t\t\t\t\t\tvar targetHeight = document.querySelector('.float-sub-menu-container').offsetHeight;\n\t\t\t\t\t\tvar top, bottom, arrowTop, arrowBottom, lineTop, lineBottom;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif ((windowHeight - targetTop) > targetHeight) {\n\t\t\t\t\t\t\ttop = offset.top + 'px';\n\t\t\t\t\t\t\tbottom = 'auto';\n\t\t\t\t\t\t\tarrowTop = '20px';\n\t\t\t\t\t\t\tarrowBottom = 'auto';\n\t\t\t\t\t\t\tlineTop = '20px';\n\t\t\t\t\t\t\tlineBottom = 'auto';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar aBottom = (windowHeight - targetTop) - 21;\n\t\t\t\t\t\t\ttop = 'auto';\n\t\t\t\t\t\t\tbottom = '0';\n\t\t\t\t\t\t\tarrowTop = 'auto';\n\t\t\t\t\t\t\tarrowBottom = aBottom + 'px';\n\t\t\t\t\t\t\tlineTop = '20px';\n\t\t\t\t\t\t\tlineBottom = aBottom + 'px';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.setState(state => ({\n\t\t\t\t\t\t\tpageFloatSubMenuTop: top,\n\t\t\t\t\t\t\tpageFloatSubMenuBottom: bottom,\n\t\t\t\t\t\t\tpageFloatSubMenuLineTop: lineTop,\n\t\t\t\t\t\t\tpageFloatSubMenuLineBottom: lineBottom,\n\t\t\t\t\t\t\tpageFloatSubMenuArrowTop: arrowTop,\n\t\t\t\t\t\t\tpageFloatSubMenuArrowBottom: arrowBottom,\n\t\t\t\t\t\t\tpageFloatSubMenuOffset: offset\n\t\t\t\t\t\t}));\n\t\t\t\t\t}, 0);\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tfloatSubMenuRemove = setTimeout(() => {\n\t\t\t\t\t\tthis.setState(state => ({\n\t\t\t\t\t\t\tpageFloatSubMenu: '',\n\t\t\t\t\t\t\tpageFloatSubMenuActive: false\n\t\t\t\t\t\t}));\n\t\t\t\t\t}, floatSubMenuRemoveTime);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.handleSidebarOnMouseOut = (e) => {\n\t\t\tif (this.state.pageSidebarMinify) {\n\t\t\t\tfloatSubMenuRemove = setTimeout(() => {\n\t\t\t\t\tthis.setState(state => ({\n\t\t\t\t\t\tpageFloatSubMenuActive: false\n\t\t\t\t\t}));\n\t\t\t\t}, floatSubMenuRemoveTime);\n\t\t\t}\n\t\t}\n\t\tthis.handleFloatSubMenuClick = () => {\n\t\t\tif (this.state.pageSidebarMinify) {\n\t\t\t\tconst windowHeight = window.innerHeight;\n\t\t\t\tconst targetHeight = document.getElementById('float-sub-menu').offsetHeight;\n\t\t\t\tconst targetTop = this.state.pageFloatSubMenuOffset.top;\n\t\t\t\tconst top = ((windowHeight - targetTop) > targetHeight) ? targetTop : 'auto';\n\t\t\t\tconst left = (this.state.pageFloatSubMenuOffset.left + document.getElementById('sidebar').offsetWidth) + 'px';\n\t\t\t\tconst bottom = ((windowHeight - targetTop) > targetHeight) ? 'auto' : '0';\n\t\t\t\tconst arrowTop = ((windowHeight - targetTop) > targetHeight) ? '20px' : 'auto';\n\t\t\t\tconst arrowBottom = ((windowHeight - targetTop) > targetHeight) ? 'auto' : ((windowHeight - targetTop) - 21) + 'px';\n\t\t\t\tconst lineTop = ((windowHeight - targetTop) > targetHeight) ? '20px' : 'auto';\n\t\t\t\tconst lineBottom = ((windowHeight - targetTop) > targetHeight) ? 'auto' : ((windowHeight - targetTop) - 21) + 'px';\n\t\t\t\n\t\t\t\tthis.setState(state => ({\n\t\t\t\t\tpageFloatSubMenuTop: top,\n\t\t\t\t\tpageFloatSubMenuLeft: left,\n\t\t\t\t\tpageFloatSubMenuBottom: bottom,\n\t\t\t\t\tpageFloatSubMenuLineTop: lineTop,\n\t\t\t\t\tpageFloatSubMenuLineBottom: lineBottom,\n\t\t\t\t\tpageFloatSubMenuArrowTop: arrowTop,\n\t\t\t\t\tpageFloatSubMenuArrowBottom: arrowBottom\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.handleSetPageContent = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageContent: value\n\t\t\t}));\n\t\t}\n\t\tthis.handleSetPageContentClass = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageContentClass: value\n\t\t\t}));\n\t\t}\n\t\tthis.handleSetPageContentFullHeight = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageContentFullHeight: value\n\t\t\t}));\n\t\t}\n\t\tthis.handleSetPageContentFullWidth = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageContentFullWidth: value\n\t\t\t}));\n\t\t}\n\t\tthis.handleSetPageContentInverseMode = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageContentInverseMode: value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tthis.handleSetPageHeader = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageHeader: value\n\t\t\t}));\n\t\t}\n\t\tthis.handleSetPageHeaderMegaMenu = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageHeaderMegaMenu: value\n\t\t\t}));\n\t\t}\n\t\tthis.handleSetPageHeaderLanguageBar = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageHeaderLanguageBar: value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tthis.handleSetPageFooter = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageFooter: value\n\t\t\t}));\n\t\t}\n\t\tthis.handleSetPageTopMenu = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageTopMenu: value\n\t\t\t}));\n\t\t}\n\t\tthis.toggleMobileTopMenu = (e) => {\n\t\t\te.preventDefault();\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageMobileTopMenu: !this.state.pageMobileTopMenu\n\t\t\t}));\n\t\t}\n\t\tthis.handleSetPageTwoSidebar = (value) => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tpageTwoSidebar: value\n\t\t\t}));\n\t\t}\n\t\tthis.handleSetPageBoxedLayout = (value) => {\n\t\t\tif (value === true) {\n\t\t\t\tdocument.body.classList.add('boxed-layout');\n\t\t\t} else {\n\t\t\t\tdocument.body.classList.remove('boxed-layout');\n\t\t\t}\n\t\t}\n\t\tthis.handleSetBodyWhiteBg = (value) => {\n\t\t\tif (value === true) {\n\t\t\t\tdocument.body.classList.add('bg-white');\n\t\t\t} else {\n\t\t\t\tdocument.body.classList.remove('bg-white');\n\t\t\t}\n\t\t}\n\n\t\tthis.checkForAuthentication = () => { //TODO refactor to ensure that setstate works correctly\n\t\t\tthis.setState({isLoading: true}, async () => {\n\t\t\t\tlet jwtToken = localStorage.getItem(ACCESS_TOKEN);\n\t\t\t\tif (jwtToken) {\n\t\t\t\t\tlet decodedJwtToken = jwt_decode(jwtToken);\n\t\t\t\t\tawait this.fetchUserInfo(decodedJwtToken.sub) //it is important to await the completion of this function, otherwise you will make many http calls with null personId or organizationIds\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisAuthenticated: true\n\t\t\t\t\t}, () => this.setState({isLoading: false}));\n\t\t\t\t\tconsole.log(\"authenticated with bearer \" + jwtToken);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisAuthenticated: false,\n\t\t\t\t\t\tisLoading: false\n\t\t\t\t\t});\n\t\t\t\t\tconsole.log(\"not authenticated\");\n\t\t\t\t}\t\n\t\t\t})\n\t\t}\n\n\t\tthis.fetchUserInfo = async (id) => {\n\t\t\tawait axios.get(`${API_BASE_URL}/person/${id}`).then(response => { //it is very important to await the completion of this function otherwise you will make many http requests with null organizationId or personIds\n\t\t\t\tthis.setState({\n\t\t\t\t\tpersonId: id,\n\t\t\t\t\tpermissions: response.data.permissions.sort((permission1, permission2) => permission1.organization.name < permission2.organization.name),\n\t\t\t\t\tfirstName: response.data.firstName,\n\t\t\t\t\tlastName: response.data.lastName,\n\t\t\t\t\temail: response.data.email,\n\t\t\t\t\tlocale: response.data.locale,\n\t\t\t\t\tcurrentOrganizationId: (response.data.currentOrganizationId? response.data.currentOrganizationId: response.data.permissions[0].organization.id)\n\t\t\t\t}, () => {\n\t\t\t\t\tlet currentPermission = this.state.permissions.find(permission => permission.organization.id == this.state.currentOrganizationId)\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcurrentPermissionTypeId: currentPermission.permissionType.id,\n\t\t\t\t\t\tcurrentOrganizationName: currentPermission.organization.name,\n\t\t\t\t\t\tcurrency: currentPermission.organization.currency,\n\t\t\t\t\t\tisEnterprise: currentPermission.organization.isEnterprise\n\t\t\t\t\t})\n\t\t\t\t})\t\n\t\t\t}).catch(console.log);\n\t\t}\n\n\t\tthis.handleSetLocale = (value) => {\n\t\t\tthis.setState({locale: value});\n\t\t}\n\n\t\tthis.logout = () => {\n\t\t\tlocalStorage.clear();\n\t\t\tconsole.log(\"logging out\");\n\t\t\tthis.checkForAuthentication();\n\t\t}\n\t\t\n\t\tthis.state = {\n\t\t\tpageHeader: false,\n\t\t\tpageheaderMegaMenu: false,\n\t\t\tpageHeaderLanguageBar: false,\n\t\t\thasScroll: false,\n\t\t\thandleSetPageHeader: this.handleSetPageHeader,\n\t\t\thandleSetPageHeaderLanguageBar: this.handleSetPageHeaderLanguageBar,\n\t\t\thandleSetPageHeaderMegaMenu: this.handleSetPageHeaderMegaMenu,\n\t\t\t\n\t\t\tpageSidebar: true,\n\t\t\tpageSidebarWide: true,\n\t\t\tpageSidebarLight: false,\n\t\t\tpageSidebarMinify: false,\n\t\t\tpageSidebarToggled: false,\n\t\t\tpageSidebarTransparent: false,\n\t\t\tpageSidebarSearch: false,\n\t\t\thandleSetPageSidebar: this.handleSetPageSidebar,\n\t\t\thandleSetPageSidebarWide: this.handleSetPageSidebarWide,\n\t\t\thandleSetPageSidebarLight: this.handleSetPageSidebarLight,\n\t\t\thandleSetPageSidebarMinified: this.handleSetPageSidebarMinified,\n\t\t\thandleSetPageSidebarTransparent: this.handleSetPageSidebarTransparent,\n\t\t\thandleSetPageSidebarSearch: this.handleSetPageSidebarSearch,\n\t\t\thandleSidebarOnMouseOut: this.handleSidebarOnMouseOut,\n\t\t\thandleSidebarOnMouseOver: this.handleSidebarOnMouseOver,\n\t\t\ttoggleSidebarMinify: this.toggleSidebarMinify,\n\t\t\ttoggleMobileSidebar: this.toggleMobileSidebar,\n\t\t\t\n\t\t\tpageFloatSubMenuActive: false,\n\t\t\tpageFloatSubMenu: '',\n\t\t\tpageFloatSubMenuTop: 'auto',\n\t\t\tpageFloatSubMenuLeft: 'auto',\n\t\t\tpageFloatSubMenuBottom: 'auto',\n\t\t\tpageFloatSubMenuLineTop: 'auto',\n\t\t\tpageFloatSubMenuLineBottom: 'auto',\n\t\t\tpageFloatSubMenuArrowTop: 'auto',\n\t\t\tpageFloatSubMenuArrowBottom: 'auto',\n\t\t\tpageFloatSubMenuOffset: '',\n\t\t\thandleFloatSubMenuOnMouseOver: this.handleFloatSubMenuOnMouseOver,\n\t\t\thandleFloatSubMenuOnMouseOut: this.handleFloatSubMenuOnMouseOut,\n\t\t\thandleFloatSubMenuClick: this.handleFloatSubMenuClick,\n\t\t\t\n\t\t\tpageContent: true,\n\t\t\tpageContentClass: '',\n\t\t\tpageContentFullHeight: false,\n\t\t\tpageContentFullWidth: false,\n\t\t\tpageContentInverseMode: false,\n\t\t\thandleSetPageContent: this.handleSetPageContent,\n\t\t\thandleSetPageContentClass: this.handleSetPageContentClass,\n\t\t\thandleSetPageContentFullHeight: this.handleSetPageContentFullHeight,\n\t\t\thandleSetPageContentFullWidth: this.handleSetPageContentFullWidth,\n\t\t\thandleSetPageContentInverseMode: this.handleSetPageContentInverseMode,\n\t\t\t\n\t\t\tpageFooter: false,\n\t\t\thandleSetPageFooter: this.handleSetPageFooter,\n\t\t\t\n\t\t\tpageTopMenu: false,\n\t\t\tpageMobileTopMenu: false,\n\t\t\ttoggleMobileTopMenu: this.toggleMobileTopMenu,\n\t\t\thandleSetPageTopMenu: this.handleSetPageTopMenu,\n\t\t\t\n\t\t\tpageTwoSidebar: false,\n\t\t\thandleSetPageTwoSidebar: this.handleSetPageTwoSidebar,\n\t\t\t\n\t\t\tpageRightSidebar: false,\n\t\t\tpageRightSidebarToggled: true,\n\t\t\tpageMobileRightSidebarToggled: false,\n\t\t\ttoggleRightSidebar: this.toggleRightSidebar,\n\t\t\ttoggleMobileRightSidebar: this.toggleMobileRightSidebar,\n\t\t\thandleSetPageRightSidebar: this.handleSetPageRightSidebar,\n\t\t\t\n\t\t\thandleSetBodyWhiteBg: this.handleSetBodyWhiteBg,\n\t\t\thandleSetPageBoxedLayout: this.handleSetPageBoxedLayout,\n\n\t\t\tfetchUserInfo: this.fetchUserInfo,\n\t\t\tisAuthenticated: false,\n\t\t\tisLoading: true,\n\t\t\tpersonId: null,\n\t\t\tfirstName: '',\n\t\t\tlastName: '',\n\t\t\temail: '',\n\t\t\tcurrentOrganizationId: null,\n\t\t\tpermissions: null,\n\t\t\tlocale: 'en-US',\n\t\t\thandleSetLocale: this.handleSetLocale, //setting a user's locale should call PATCH /person/{personId} and then fetchUserInfo(personId); however, changing the locale on the registration/login pages should call handleSetLocale()\n\n\t\t\tcurrentOrganizationName: '',\n\t\t\tcurrentPermissionTypeId: null,\n\t\t\tcurrency: 'USD',\n\t\t\tisEnterprise: false,\n\n\t\t\tcheckForAuthentication: this.checkForAuthentication,\n\t\t\tlogout: this.logout\n\n\t\t};\n\t}\n\t\n  componentDidMount() {\n\twindow.addEventListener('scroll', this.handleScroll)\n\tthis.checkForAuthentication();\n  }\n\n  componentWillUnmount() {\n\twindow.removeEventListener('scroll', this.handleScroll)\n  }\n  \n  handleScroll = () => {\n  \tif (window.scrollY > 0) {\n  \t\tthis.setState(state => ({\n\t\t\t\thasScroll: true\n\t\t\t}));\n  \t} else {\n  \t\tthis.setState(state => ({\n\t\t\t\thasScroll: false\n\t\t\t}));\n  \t}\n  \tvar elm = document.getElementsByClassName('nvtooltip');\n  \tfor (var i = 0; i < elm.length; i++) {\n  \t\telm[i].classList.add('d-none');\n  \t}\n  }\n\t\n\trender() {\n\t\treturn (\n\t\t\t<PageSettings.Provider value={this.state}>\n\t\t\t\t<div className={\n\t\t\t\t\t'fade page-sidebar-fixed show page-container ' + \n\t\t\t\t\t(this.state.pageHeader ? 'page-header-fixed ' : '') + \n\t\t\t\t\t(this.state.pageSidebar ? '' : 'page-without-sidebar ') + \n\t\t\t\t\t(this.state.pageRightSidebar ? 'page-with-right-sidebar ' : '') +\n\t\t\t\t\t(this.state.pageSidebarWide ? 'page-with-wide-sidebar ' : '') +\n\t\t\t\t\t(this.state.pageSidebarLight ? 'page-with-light-sidebar ' : '') +\n\t\t\t\t\t(this.state.pageSidebarMinify ? 'page-sidebar-minified ' : '') + \n\t\t\t\t\t(this.state.pageSidebarToggled ? 'page-sidebar-toggled ' : '') + \n\t\t\t\t\t(this.state.pageTopMenu ? 'page-with-top-menu ' : '') + \n\t\t\t\t\t(this.state.pageContentFullHeight ? 'page-content-full-height ' : '') + \n\t\t\t\t\t(this.state.pageTwoSidebar ? 'page-with-two-sidebar ' : '') + \n\t\t\t\t\t(this.state.pageRightSidebarCollapsed ? 'page-right-sidebar-collapsed ' : '') + \n\t\t\t\t\t(this.state.pageMobileRightSidebarToggled ? 'page-right-sidebar-toggled ' : '') + \n\t\t\t\t\t(this.state.hasScroll ? 'has-scroll ' : '')\n\t\t\t\t}>\n\t\t\t\t\t{this.state.pageHeader && (<Header />)}\n\t\t\t\t\t{this.state.pageSidebar && !this.state.isLoading && this.state.isAuthenticated && (<Sidebar />)}\n\t\t\t\t\t{this.state.pageTwoSidebar && !this.state.isLoading && this.state.isAuthenticated &&(<SidebarRight />)}\n\t\t\t\t\t{this.state.pageTopMenu && !this.state.isLoading && this.state.isAuthenticated &&(<TopMenu />)}\n\t\t\t\t\t{this.state.pageContent && !this.state.isLoading && (<Content />)}\n\t\t\t\t\t{this.state.pageFooter && !this.state.isLoading && this.state.isAuthenticated &&(<Footer />)}\n\t\t\t\t\t{this.state.pageSidebarMinify && <FloatSubMenu />}\n\t\t\t\t</div>\n\t\t\t</PageSettings.Provider>\n\t\t)\n\t}\n}\n\nexport default App;","/Users/kyle/Easy_Ledger/front_end/src/config/page-settings.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/constants.js",[],"/Users/kyle/Easy_Ledger/front_end/src/components/top-menu/top-menu.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/components/header/header.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/components/content/content.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/components/sidebar-right/sidebar-right.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/components/sidebar/sidebar.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/components/footer/footer.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/components/float-sub-menu/float-sub-menu.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/interceptors.js",["583"],"import { transpileModule } from \"typescript\";\nimport { API_BASE_URL, ACCESS_TOKEN, REFRESH_TOKEN } from \"./constants.js\"\n\nvar axios = require(\"axios\");\n\nasync function refreshAccessToken() {\n  let jwtToken = localStorage.getItem(REFRESH_TOKEN);\n  await axios.get(`${API_BASE_URL}/auth/refresh`, { headers: { Authorization: \"Bearer \" + jwtToken, retry: true } }).then(response => { //MUST send with a 'retry' header marked as true, otherwise will trigger an infinite loop in the response interceptor\n    localStorage.removeItem(ACCESS_TOKEN);\n    localStorage.removeItem(REFRESH_TOKEN);\n    localStorage.setItem(ACCESS_TOKEN, response.data.accessToken);\n    localStorage.setItem(REFRESH_TOKEN, response.data.refreshToken);\n  }).catch(console.log);\n  console.log('Refreshed JWT');\n\n}\n\naxios.interceptors.request.use(\n  function (config) { //Adds JWT stored in localStorage to the authorization headers of every request that does not explicitly set an authorization header\n    let jwtToken = localStorage.getItem(ACCESS_TOKEN);\n    if (jwtToken && !config.headers[\"Authorization\"]) {\n      config.headers[\"Authorization\"] = \"Bearer \" + jwtToken;\n    }\n    return config;\n  },\n  async function (error) {\n    return Promise.reject(error);\n  }\n);\n\n\naxios.interceptors.response.use((response) => {\n  return response;\n}, async function (error) {\n  const originalRequest = error.config;\n  console.log(originalRequest.headers[\"retry\"]);\n  if (error.response) {\n    if (error.response.status === 401) { //if response is 401 unauthorized\n      if (!originalRequest.headers[\"retry\"]) { //if we have not retried the request with a refreshed jwt\n        originalRequest.headers[\"retry\"] = true;\n        console.log(originalRequest.headers[\"retry\"]); //flag this upcoming request as a retry attempt\n        await refreshAccessToken(); //attempt to refresh jwt using refresh token\n        let newJwtToken = localStorage.getItem(ACCESS_TOKEN);\n        originalRequest.headers[\"Authorization\"] = \"Bearer \" + newJwtToken;\n        return axios(originalRequest); //send original request again using a refreshed jwt. this request is flagged as a 'retry' attempt, in order to avoid an infinite loop.\n      }\n      console.log(window.location.origin)\n      window.location.href = window.location.origin + \"/user/logout\" //log the user out and redirect user to login page if a 401 error is returned after jwt refresh attempt. \n    }\n  }\n\n  return Promise.reject(error);\n})","/Users/kyle/Easy_Ledger/front_end/src/components/top-menu/top-menu-nav.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/components/sidebar/sidebar-nav.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/config/page-route.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/components/float-sub-menu/float-sub-menu-list.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/components/sidebar/sidebar-profile.jsx",["584"],"import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { PageSettings } from './../../config/page-settings.js';\nimport {API_BASE_URL, FIRSTNAME_LASTNAME_LOCALES} from '../../utils/constants.js';\nimport axios from 'axios';\nimport {sidebarText} from '../../utils/i18n/sidebar-text.js';\n\nclass SidebarProfile extends React.Component {\n\tstatic contextType = PageSettings;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tprofileActive: 0,\n\t\t\torganizationsExpanded: false\n\t\t};\n\t\tthis.handleProfileExpand = this.handleProfileExpand.bind(this);\n\t\tthis.toggleExpandOrganizations = this.toggleExpandOrganizations.bind(this);\n\t\tthis.handleCollapseAll = this.handleCollapseAll.bind(this);\n\t}\n\n\thandleProfileExpand(e) {\n\t\te.preventDefault();\n\t\tthis.setState(state => ({\n\t\t\tprofileActive: !this.state.profileActive,\n\t\t}));\n\t}\n\n\ttoggleExpandOrganizations() {\n\t\tthis.setState(state => ({\n\t\t\torganizationsExpanded: !this.state.organizationsExpanded\n\t\t}));\n\t}\n\n\thandleCollapseAll() {\n\t\tthis.setState(state => ({\n\t\t\tprofileActive: 0, \n\t\t\torganizationsExpanded: false\n\t\t}))\n\t}\n\n\tasync handleChangeCurrentOrganization(organizationId) {\n\t\tlet requestBody = {\n\t\t\tcurrentOrganizationId: parseInt(organizationId)\n\t\t}\n\t\tawait axios.patch(`${API_BASE_URL}/person/${this.context.personId}`, requestBody).then(response => {\n\t\t\tconsole.log(response);\n\t\t}).catch(console.log);\n\t\tawait this.context.fetchUserInfo(this.context.personId);\n\t\tthis.handleCollapseAll();\n\t\tthis.props.history.push(\"/\");\n\t}\n  \n\trender() {\n\t\treturn (\n\t\t\t<PageSettings.Consumer>\n\t\t\t\t{({pageSidebarMinify, logout, isLoading, locale, permissions, currentOrganizationId, currentOrganizationName, \n\t\t\t\t\tfirstName, lastName}) => (\n\t\t\t\t\tisLoading ? \n\t\t\t\t\t\t<ul className=\"nav\">\n\t\t\t\t\t\t\t<li className=\"nav-profile\">\n\t\t\t\t\t\t\t\t<i className=\"fas fa-circle-notch fa-spin fa-3x\"></i> \n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<ul className=\"nav\">\n\t\t\t\t\t\t\t<li className={\"nav-profile \" + (this.state.profileActive ? \"expand \" : \"\")}>\n\t\t\t\t\t\t\t\t<Link replace to=\"/\" onClick={this.handleProfileExpand}>\n\t\t\t\t\t\t\t\t\t<div className=\"cover with-shadow\"></div>\n\t\t\t\t\t\t\t\t\t<div className=\"image\">\n\t\t\t\t\t\t\t\t\t\t<img src=\"/assets/img/user/user-13.jpg\" alt=\"\" />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t\t\t\t<b className=\"caret pull-right\"></b>\n\t\t\t\t\t\t\t\t\t\t{FIRSTNAME_LASTNAME_LOCALES.includes(locale)? \n\t\t\t\t\t\t\t\t\t\t\tfirstName + \" \" + lastName : lastName + \" \" + firstName} \n\t\t\t\t\t\t\t\t\t\t<small>{currentOrganizationName}</small>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<ul className={\"nav nav-profile \" + (this.state.profileActive && !pageSidebarMinify ? \"d-block \" : \"\")}>\n\t\t\t\t\t\t\t\t\t<li className={\"has-sub \" + (this.state.organizationsExpanded? \"expand\" : \"closed\")}>\n\t\t\t\t\t\t\t\t\t\t<Link replace to=\"#\" onClick={this.toggleExpandOrganizations}><i className=\"fa fa-book\"></i> {sidebarText[locale][\"My EasyLedgers\"]} <b className=\"caret\"></b></Link>\n\t\t\t\t\t\t\t\t\t\t\t<ul className={\"sub-menu \"+ (this.state.organizationsExpanded? \"d-block\" : \"\")}>\n\t\t\t\t\t\t\t\t\t\t\t\t{permissions.map(permission => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li key={permission.organization.id} className={currentOrganizationId == permission.organization.id? \"bg-white-transparent-1 expand\": \"\"}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Link replace to=\"#\" onClick={() => this.handleChangeCurrentOrganization(permission.organization.id)}>{permission.organization.name}</Link>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link replace to=\"/create-a-new-easyledger\" onClick={this.handleCollapseAll}><i className=\"ion ion-md-add\"></i>{\" \"}<i>{sidebarText[locale][\"Create a new EasyLedger...\"]}</i></Link>\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t<li><Link to=\"/settings\"><i className=\"fa fa-cog\"></i> {sidebarText[locale][\"Settings\"]}</Link></li>\n\t\t\t\t\t\t\t\t\t<li><Link to=\"#\" onClick={logout}><i className=\"fa fa-sign-out-alt\"></i> {sidebarText[locale][\"Sign Out\"]}</Link></li>\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\n\t\t\t\t)}\n\t\t\t</PageSettings.Consumer>\n\t\t)\n\t}\n}\n\nexport default withRouter(SidebarProfile);;","/Users/kyle/Easy_Ledger/front_end/src/components/header/dropdown/notification.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/components/header/dropdown/profile.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/components/header/dropdown/mega.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/components/header/dropdown/language.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/components/header/search/form.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/components/top-menu/menu.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/components/sidebar/menu.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/chart-of-accounts/account-details.js",["585","586","587","588"],"/Users/kyle/Easy_Ledger/front_end/src/pages/reports/balance-sheet-report.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/reports/income-statement-report.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/reports/reports.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/chart-of-accounts/chart-of-accounts.js",["589","590","591","592","593","594","595","596","597","598","599"],"import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport { Alert, Modal, ModalHeader, ModalBody, ModalFooter, TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';\nimport { API_BASE_URL } from '../../utils/constants.js';\nimport { PageSettings } from '../../config/page-settings.js';\nimport Select from 'react-select';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { chartOfAccountsText } from '../../utils/i18n/chart-of-accounts-text.js';\nimport ToggleMobileSidebarButton from '../../components/sidebar/toggle-mobile-sidebar-button';\n\n\n\nclass ChartOfAccounts extends React.Component {\n    /** Renders a Chart of Accounts. This component uses pills tabs for the different account types. The url param this.props.match.params.activeTabId indicates the current open tab, in order for tab history to be preserved.\n     *  this.props.match.params.activeTabId should always match the accountType.id of the accountType being currently viewed. \n    */\n    static contextType = PageSettings;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            accounts: [],\n            accountGroups: [],\n            accountTypes: [],\n\n            editAccountGroupModal: false,\n            accountGroupNameAlert: false,\n            accountSubtypeRequiredAlert: false,\n            selectedAccountGroupId: null,\n            accountGroupNameInput: '',\n            editAccountGroup: false,  //when true, editAccountGroupModal will have 'edit' in title instead of 'create new'\n\n            accountTypeOptions: [], //for react-select; accountTypes are formatted as {value: accountType.id, label: accountType.name, object: accountType}\n            accountSubtypeOptions: [], //for react-select; accountSubtypes are formatted as {value: accountSubtypeId, label: accountSubtypeName, object: accountSubtype}\n            disableChangeAccountType: false, // disables the react-select field for changing an account group's account type\n\n            selectedAccountSubtypeOption: null,\n            selectedAccountTypeOption: null,\n\n            deleteAccountGroupAlert: false,\n            cannotDeleteAccountGroupAlert: false,\n\n            addAnAccountModal: false,\n            accountNameAlert: false,\n            accountNameInput: ''\n        };\n\n        this.handleChangeAccountSubtypeOption = this.handleChangeAccountSubtypeOption.bind(this);\n        this.handleChangeAccountTypeOption = this.handleChangeAccountTypeOption.bind(this);\n\n        this.handleConfirmDeleteAccountGroupButton = this.handleConfirmDeleteAccountGroupButton.bind(this);\n        this.toggleDeleteAccountGroupAlert = this.toggleDeleteAccountGroupAlert.bind(this);\n        this.toggleCannotDeleteAccountGroupAlert = this.toggleCannotDeleteAccountGroupAlert.bind(this);\n        this.setEditAccountGroupFalse = this.setEditAccountGroupFalse.bind(this);\n    }\n\n    componentDidMount() {\n        this.fetchData();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.match.params.activeTabId !== prevProps.match.params.activeTabId) {\n            this.setState({ selectedAccountTypeOption: this.state.accountTypeOptions.find(accountTypeOption => accountTypeOption.value == this.props.match.params.activeTabId) })\n        }\n    }\n\n    fetchData() {\n        axios.get(`${API_BASE_URL}/accountType`).then(response => {\n            this.setState({ accountTypes: response.data });\n            if (response.data) {\n                let formattedAccountTypes = response.data.map(accountType => ({ value: accountType.id, label: chartOfAccountsText[this.context.locale][accountType.name], object: accountType }))\n                this.setState({ accountTypeOptions: formattedAccountTypes, selectedAccountTypeOption: formattedAccountTypes.find(formattedAccountType => formattedAccountType.object.id == this.props.match.params.activeTabId) })\n            }\n        })\n        axios.get(`${API_BASE_URL}/organization/${this.context.currentOrganizationId}/accountGroup`).then(response => {\n            this.setState({ accountGroups: response.data });\n        })\n        axios.get(`${API_BASE_URL}/organization/${this.context.currentOrganizationId}/accountBalance`).then(response => {\n            this.setState({ accounts: response.data });\n        }).catch(console.log);\n        axios.get(`${API_BASE_URL}/accountSubtype`).then(response => {\n            if (response.data) {\n                let formattedAccountSubtypes = response.data.map(accountSubtype => ({ value: accountSubtype.id, label: chartOfAccountsText[this.context.locale][accountSubtype.name], object: accountSubtype }));\n                this.setState({ accountSubtypeOptions: formattedAccountSubtypes });\n            }\n        }).catch(console.log);\n\n    }\n\n    /** Utility functions for adding/editing account group */\n    handleAddAnAccountGroupButton() { //adding a fresh account group uses the default empty fields for all inputs\n        this.toggleEditAccountGroupModal();\n    }\n\n    handleEditAccountGroupButton(accountGroup) {\n        //editing an account group prepopulates form fields with data for the selected account group, and disables the field for editing account type.\n        //this function should only be called when opening the modal form for editing an account group. the modal should be closed by resetting all fields using toggleEditAccountGroupModal()\n        this.setState(state => (\n            {\n                selectedAccountGroupId: accountGroup.accountGroupId,\n                accountGroupNameInput: accountGroup.accountGroupName,\n                selectedAccountTypeOption: state.accountTypeOptions.find(accountTypeOption => accountTypeOption.object.id == accountGroup.accountTypeId),\n                selectedAccountSubtypeOption: state.accountSubtypeOptions.find(accountSubtypeOption => accountSubtypeOption.object.id == accountGroup.accountSubtypeId),\n                disableChangeAccountType: true,\n                accountGroupNameAlert: false,\n                accountSubtypeRequiredAlert: false,\n                editAccountGroupModal: true,\n                editAccountGroup: true\n            }\n        ))\n    }\n\n    toggleEditAccountGroupModal() { //toggling the modal for adding/editing account groups resets all input fields for the form.\n        this.setState(state => (\n            {\n                selectedAccountGroupId: null, //this field is used in more than one operation so it is imperative to nullify selectedAccountGroupId on toggle\n                accountGroupNameInput: \"\",\n                selectedAccountTypeOption: state.accountTypeOptions.find(accountTypeOption => accountTypeOption.object.id == this.props.match.params.activeTabId),\n                selectedAccountSubtypeOption: null,\n                disableChangeAccountType: false,\n                accountGroupNameAlert: false,\n                accountSubtypeRequiredAlert: false,\n                editAccountGroupModal: !state.editAccountGroupModal\n            }));\n    }\n\n    setEditAccountGroupFalse() { //called after modal transitions out. ensures that title does not change until modal is done transitioning.\n        this.setState(state => (\n            {editAccountGroup: false}\n        ))\n    }\n\n\n    handleChangeAccountSubtypeOption(selectedAccountSubtypeOption) {\n        this.setState({ selectedAccountSubtypeOption: selectedAccountSubtypeOption });\n    }\n\n    handleChangeAccountTypeOption(selectedAccountTypeOption) {\n        this.setState({ selectedAccountTypeOption: selectedAccountTypeOption, selectedAccountSubtypeOption: null });\n    }\n\n    async handleSaveAnAccountGroupButton() {\n        if (!this.state.accountGroupNameInput) {\n            this.setState({ accountGroupNameAlert: true });\n        }\n        if (!this.state.selectedAccountSubtypeOption) {\n            this.setState({ accountSubtypeRequiredAlert: true });\n        }\n\n        if (this.state.accountGroupNameInput && this.state.selectedAccountSubtypeOption) {\n            if (!this.state.selectedAccountGroupId) {\n                let postedObject = {\n                    accountGroupName: this.state.accountGroupNameInput,\n                    accountSubtypeId: this.state.selectedAccountSubtypeOption.object.id,\n                    organizationId: this.context.currentOrganizationId\n                };\n                await this.postAccountGroup(postedObject);\n                this.toggleEditAccountGroupModal();\n            } else {\n                let putObject = {\n                    accountGroupId: this.state.selectedAccountGroupId,\n                    accountGroupName: this.state.accountGroupNameInput,\n                    accountSubtypeId: this.state.selectedAccountSubtypeOption.object.id,\n                    organizationId: this.context.currentOrganizationId\n                };\n                await this.putAccountGroup(this.state.selectedAccountGroupId, putObject);\n                this.toggleEditAccountGroupModal();\n            }\n        }\n    }\n    /** End utility functions for adding/editing account group */\n\n    /** Utility functions for deleting account group */\n    toggleDeleteAccountGroupAlert() {\n        this.setState(state => ({ deleteAccountGroupAlert: !state.deleteAccountGroupAlert }));\n    }\n\n    toggleCannotDeleteAccountGroupAlert() {\n        this.setState(state => ({ cannotDeleteAccountGroupAlert: !state.cannotDeleteAccountGroupAlert }))\n    }\n\n    handleDeleteAccountGroupButton(accountGroup) {\n        this.setState(state => ({ selectedAccountGroupId: accountGroup.accountGroupId }));\n        this.toggleDeleteAccountGroupAlert();\n    }\n\n    async handleConfirmDeleteAccountGroupButton() {\n        if (this.state.accounts.filter(account => account.accountGroupId == this.state.selectedAccountGroupId).length !== 0) {\n            this.toggleDeleteAccountGroupAlert();\n            this.toggleCannotDeleteAccountGroupAlert();\n        } else {\n            await this.deleteAccountGroup(this.state.selectedAccountGroupId);\n            this.toggleDeleteAccountGroupAlert();\n        }\n    }\n    /** End utility functions for deleting account group */\n\n    /** Utility functions for adding account to account group */\n    toggleAddAnAccountModal() {\n        this.setState(state => ({ addAnAccountModal: !state.addAnAccountModal, accountNameInput: '', accountNameAlert: false }))\n    }\n\n    handleAddAnAccountToAccountGroupButton(accountGroup) {\n        this.setState(state => ({ selectedAccountGroupId: accountGroup.accountGroupId }));\n        this.toggleAddAnAccountModal();\n    }\n\n    async handleSaveNewAccount() {\n        let postedObject = {\n            accountName: this.state.accountNameInput,\n            accountGroupId: this.state.selectedAccountGroupId\n        }\n        await this.postAccount(postedObject);\n        this.toggleAddAnAccountModal();\n    }\n\n    /** End utility functions for adding account to account group */\n\n\n    /** api calls for posting/putting/deleting objects to server */\n    async postAccountGroup(accountGroup) {\n        axios.post(`${API_BASE_URL}/accountGroup`, accountGroup).then(response => {\n            console.log(response);\n            this.fetchData();\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    async putAccountGroup(accountGroupId, accountGroup) {\n        axios.put(`${API_BASE_URL}/accountGroup/${accountGroupId}`, accountGroup).then(response => {\n            console.log(response);\n            this.fetchData();\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    async deleteAccountGroup(accountGroupId) {\n        axios.delete(`${API_BASE_URL}/accountGroup/${accountGroupId}`).then(response => {\n            console.log(response);\n            this.fetchData();\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    async postAccount(account) {\n        axios.post(`${API_BASE_URL}/account`, account).then(response => {\n            console.log(response);\n            this.fetchData();\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n    /** End api calls */\n\n    render() {\n        return (\n            <div>\n                <ol className=\"breadcrumb float-xl-right\">\n                    <li className=\"breadcrumb-item\"><Link to=\"/\">{chartOfAccountsText[this.context.locale][\"Home\"]}</Link></li>\n                    <li className=\"breadcrumb-item active\">{chartOfAccountsText[this.context.locale][\"Chart of Accounts\"]}</li>\n                </ol>\n                <h1 className=\"page-header\">\n                    {chartOfAccountsText[this.context.locale][\"Chart of Accounts\"]}\n                    <ToggleMobileSidebarButton className=\"d-md-none float-right \" />\n                </h1>\n                <Nav pills justified className=\"d-block\">\n                    {!this.state.accountTypes ? <div className=\"d-flex justify-content-center fa-3x py-3\"><i className=\"fas fa-circle-notch fa-spin\"></i></div> :\n                        <div className=\"d-flex justify-content-between px-3 mb-3\">\n                            <div className=\"row \">\n                                {this.state.accountTypes.map(accountType => { //render a pills navlink for each accountType returned by the server, with the active accountType being the one that has an id that matches the url param.\n                                    return (\n                                        <NavItem key={accountType.id}>\n                                            <NavLink\n                                                className={this.props.match.params.activeTabId == accountType.id ? \"active\" : \"cursor-pointer\"}\n                                                onClick={() => this.props.history.push(`/chart-of-accounts/${accountType.id}`)}\n                                            >\n                                                <span className=\"d-sm-block px-3\">{chartOfAccountsText[this.context.locale][accountType.name]}</span>\n                                            </NavLink>\n                                        </NavItem>\n                                    );\n                                })}\n\n                            </div>\n                            <button\n                                className=\"btn btn-primary my-1 ml-3\"\n                                onClick={() => {\n                                    this.handleAddAnAccountGroupButton();\n                                }}\n                            > {chartOfAccountsText[this.context.locale][\"Create an account group\"]} </button>\n                        </div>\n                    }\n                </Nav>\n                <TabContent activeTab={this.props.match.params.activeTabId} className=\"widget widget-rounded widget-list widget-list-rounded m-b-30\"> {/** active tab is the tab with an activeTabId that matches the url path parameter*/}\n                    {!this.state.accountTypes ? <div className=\"d-flex justify-content-center fa-3x py-3\"><i className=\"fas fa-circle-notch fa-spin\"></i></div> :\n                        this.state.accountTypes.map(accountType => {\n                            return (\n                                <TabPane tabId={accountType.id.toString()} key={accountType.id.toString()}>\n                                    {this.state.accountGroups.filter(accountGroup => accountGroup.accountTypeId == accountType.id).map(accountGroup => { // render a bg-light accountgroup widget list item for each accountGroup in this accountType, then render all of the accounts for at accountGroup\n                                        return (\n                                            <React.Fragment key={accountGroup.accountGroupId}>\n                                                <div className=\"widget-list-item bg-light\">\n                                                    <div className=\"widget-list-content d-flex justify-content-between align-items-center\">\n                                                        <h4 className=\"widget-list-title\">{accountGroup.accountGroupName}</h4>\n                                                        <div>\n                                                            <Link replace className=\"icon-link-text-muted p-l-15\" to=\"#\" onClick={() => this.handleAddAnAccountToAccountGroupButton(accountGroup)}>\n                                                                <i className=\"fa fa-plus\"></i>\n                                                            </Link>\n                                                            <Link replace className=\"icon-link-text-muted p-l-15\" to=\"#\" onClick={() => this.handleEditAccountGroupButton(accountGroup)}>\n                                                                <i className=\"fa fa-edit\"></i>\n                                                            </Link>\n                                                            <Link replace className=\"icon-link-text-muted p-l-15\" to=\"#\" onClick={() => this.handleDeleteAccountGroupButton(accountGroup)}>\n                                                                <i className=\"fa fa-trash-alt\"></i>\n                                                            </Link>\n                                                        </div>\n\n\n                                                    </div>\n                                                </div>\n                                                {!this.state.accounts ? null : this.state.accounts.filter(account => account.accountGroupId == accountGroup.accountGroupId).map(account => {\n                                                    return (\n                                                        <Link className=\"widget-list-item bg-white\" to={`/account-details/${account.accountId}`} key={account.accountId.toString()}>\n                                                            <div className=\"widget-list-content p-l-30\">\n                                                                <div className=\"widget-list-title\">{account.accountName}</div>\n                                                            </div>\n                                                            <div className=\"m-r-10 widget-list-action text-right\">\n                                                                <i className=\"fa fa-angle-right fa-lg text-muted\"></i>\n                                                            </div>\n                                                        </Link>\n                                                    );\n                                                })}\n                                            </React.Fragment>\n                                        );\n                                    })}\n                                </TabPane>\n                            );\n                        })\n                    }\n                </TabContent>\n\n                <Modal isOpen={this.state.editAccountGroupModal} toggle={() => this.toggleEditAccountGroupModal()} centered={true} onClosed={this.setEditAccountGroupFalse}>\n                    <ModalHeader> {this.state.editAccountGroup? chartOfAccountsText[this.context.locale][\"Edit Account Group Details\"]: chartOfAccountsText[this.context.locale][\"Create a New Account Group\"]} </ModalHeader>\n                    <ModalBody>\n                        {this.state.accountGroupNameAlert ? <Alert color=\"danger\">{chartOfAccountsText[this.context.locale][\"Please provide a name for your account group.\"]}</Alert> : null}\n                        {this.state.accountSubtypeRequiredAlert ? <Alert color=\"danger\">{chartOfAccountsText[this.context.locale][\"Please provide an account subtype for your account group.\"]}</Alert> : null}\n                        <form onSubmit={event => { event.preventDefault(); this.handleSaveAnAccountGroupButton() }}>\n                            <div className=\"form-group row\">\n                                <label className=\"col-md-4 col-form-label\">\n                                    {chartOfAccountsText[this.context.locale][\"Account Group Name\"]}\n                                </label>\n                                <div className=\"col-md-8\">\n                                    <input type=\"text\" className=\"form-control\"\n                                        value={this.state.accountGroupNameInput}\n                                        onChange={event => this.setState({ accountGroupNameInput: event.target.value })}\n                                    />\n                                </div>\n                            </div>\n                        </form>\n                        <div className=\"form-group row\">\n                            <label className=\"col-md-4 col-form-label\">\n                                {chartOfAccountsText[this.context.locale][\"Account Type\"]}\n                            </label>\n                            {!this.state.selectedAccountTypeOption ? <div className=\"d-flex justify-content-center fa-3x py-3\"><i className=\"fas fa-circle-notch fa-spin\"></i></div> :\n                                <div className=\"col-md-8\">\n                                    <Select\n                                        options={this.state.accountTypeOptions}\n                                        value={this.state.selectedAccountTypeOption}\n                                        isSearchable={true}\n                                        isDisabled={this.state.disableChangeAccountType}\n                                        onChange={this.handleChangeAccountTypeOption}\n                                    />\n                                    {/**TODO: style the SELECT components to match form-control */}\n                                </div>\n                            }\n                        </div>\n                        <div className=\"form-group row\">\n                            <label className=\"col-md-4 col-form-label\">\n                                {chartOfAccountsText[this.context.locale][\"Account Subtype\"]}\n                            </label>\n                            {!this.state.selectedAccountTypeOption ? <div className=\"d-flex justify-content-center fa-3x py-3\"><i className=\"fas fa-circle-notch fa-spin\"></i></div> :\n                                <div className=\"col-md-8\">\n                                    <Select\n                                        options={this.state.accountSubtypeOptions.filter(accountSubtypeOption => accountSubtypeOption.object.accountType.id == this.state.selectedAccountTypeOption.object.id)}\n                                        value={this.state.selectedAccountSubtypeOption}\n                                        isSearchable={true}\n                                        onChange={this.handleChangeAccountSubtypeOption}\n                                    />\n                                    {/**TODO: style the SELECT components to match form-control */}\n                                </div>\n                            }\n                        </div>\n\n                    </ModalBody>\n                    <ModalFooter>\n                        <button className=\"btn btn-primary width-10ch\" onClick={() => this.handleSaveAnAccountGroupButton()}>\n                            {chartOfAccountsText[this.context.locale][\"Save\"]}\n                        </button>\n                        <button className=\"btn btn-white width-10ch\" onClick={() => this.toggleEditAccountGroupModal()}>\n                            {chartOfAccountsText[this.context.locale][\"Cancel\"]}\n                        </button>\n                    </ModalFooter>\n                </Modal>\n\n                {this.state.deleteAccountGroupAlert ?\n                    <SweetAlert primary showCancel\n                        confirmBtnText={chartOfAccountsText[this.context.locale][\"Yes, delete it!\"]}\n                        confirmBtnBsStyle=\"primary\"\n                        cancelBtnText={chartOfAccountsText[this.context.locale][\"Cancel\"]}\n                        cancelBtnBsStyle=\"default\"\n                        title={chartOfAccountsText[this.context.locale][\"Are you sure?\"]}\n                        onConfirm={this.handleConfirmDeleteAccountGroupButton}\n                        onCancel={this.toggleDeleteAccountGroupAlert}\n                    >\n                        {chartOfAccountsText[this.context.locale][\"Are you sure you want to delete this account group?\"]}\n                    </SweetAlert>\n                    : null}\n                {this.state.cannotDeleteAccountGroupAlert ?\n                    <SweetAlert danger showConfirm={false} showCancel={true}\n                        cancelBtnBsStyle=\"default\"\n                        cancelBtnText={chartOfAccountsText[this.context.locale][\"Cancel\"]}\n                        title={chartOfAccountsText[this.context.locale][\"Cannot delete this account.\"]}\n                        onConfirm={this.toggleCannotDeleteAccountGroupAlert}\n                        onCancel={this.toggleCannotDeleteAccountGroupAlert}\n                    >\n                        {chartOfAccountsText[this.context.locale][\"Cannot delete this account group. Please delete all accounts in this account group and try again.\"]}\n                    </SweetAlert>\n                    : null}\n\n                <Modal isOpen={this.state.addAnAccountModal} toggle={() => this.toggleAddAnAccountModal()} centered={true}>\n                    <ModalHeader> {chartOfAccountsText[this.context.locale][\"Add an Account\"]} </ModalHeader>\n                    <ModalBody>\n                        {\n                            this.state.accountNameAlert ?\n                                <Alert color=\"danger\">\n                                    {chartOfAccountsText[this.context.locale][\"Please provide a name for your account.\"]}\n                                </Alert>\n                                : null\n                        }\n                        <form onSubmit={event => { event.preventDefault(); this.handleSaveNewAccount() }}>\n                            <div className=\"form-group row\">\n                                <label className=\"col-form-label col-md-3\">\n                                    {chartOfAccountsText[this.context.locale][\"Account Name\"]}\n                                </label>\n                                <div className=\"col-md-9\">\n                                    <input\n                                        className=\"form-control\"\n                                        value={this.state.accountNameInput}\n                                        onChange={event => {\n                                            this.setState({ accountNameInput: event.target.value });\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </form>\n                    </ModalBody>\n                    <ModalFooter>\n                        <button\n                            className=\"btn btn-primary width-10ch\"\n                            onClick={() => this.handleSaveNewAccount()}\n                        >\n                            {chartOfAccountsText[this.context.locale][\"Save\"]}\n                        </button>\n                        <button\n                            className=\"btn btn-white width-10ch\"\n                            onClick={() => {\n                                this.toggleAddAnAccountModal();\n                            }}\n                        >\n                            {chartOfAccountsText[this.context.locale][\"Cancel\"]}\n                        </button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n\n        )\n    }\n}\n\nexport default ChartOfAccounts;","/Users/kyle/Easy_Ledger/front_end/src/pages/dashboard/dashboard.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/user/registration-successful.js",["600","601"],"import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport {PageSettings} from '../../config/page-settings.js';\n\nclass RegistrationSuccessful extends React.Component {\n\tstatic contextType = PageSettings;\n\t\n\tconstructor(props) {\n    super(props);\n    }\n\n\tcomponentDidMount() {\n\t\tthis.context.handleSetPageSidebar(false);\n\t\tthis.context.handleSetPageHeader(false);\n\t\tthis.context.handleSetBodyWhiteBg(true);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.context.handleSetPageSidebar(true);\n\t\t//this.context.handleSetPageHeader(true);\n\t\tthis.context.handleSetBodyWhiteBg(false);\n\t}\n  \n\trender() {\n        return (\n            <div className=\"register register-with-news-feed\">\n                <div className=\"news-feed\">\n                    <div className=\"news-image\" style={{ backgroundImage: 'url(/assets/img/login-bg/login-bg-9.jpg)' }}></div>\n                    <div className=\"news-caption\">\n                        <h4 className=\"caption-title\"><b>Easy</b> Ledger App</h4>\n                        <p>\n                            As a Color Admin app administrator, you use the Color Admin console to manage your organization’s account, such as add new users, manage security settings, and turn on the services you want your team to access.\n                        </p>\n                    </div>\n                </div>\n                <div className=\"right-content\">\n                    <h1 className=\"register-header\">\n                        Registration Successful!\n                    </h1>\n                    <div className=\"register-content\">\n                            <div className=\"m-t-20 m-b-40 p-b-40 text-inverse\">\n                                <p>A verification email is on its way to your inbox.</p>\n                                <Link to=\"/user/login-v3\">Return to login page.</Link>\n                            </div>\n                            <hr />\n                            <p className=\"text-center\">\n                                &copy; Color Admin All Right Reserved 2020\n                            </p>\n                    </div>\n                </div>\n            </div>\n        )\t}\n}\n\nexport default RegistrationSuccessful;","/Users/kyle/Easy_Ledger/front_end/src/pages/user/register-v3.js",["602"],"import React from 'react';\nimport {PageSettings} from '../../config/page-settings.js';\nimport RegisterV3Render from './register-v3-render.js';\n\nclass RegisterV3 extends React.Component {\n\tstatic contextType = PageSettings;\n\t\n\tconstructor(props) {\n    super(props);\n    }\n\n\tcomponentDidMount() {\n\t\tthis.context.handleSetPageSidebar(false);\n\t\tthis.context.handleSetPageHeader(false);\n\t\tthis.context.handleSetBodyWhiteBg(true);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.context.handleSetPageSidebar(true);\n\t\t//this.context.handleSetPageHeader(true);\n\t\tthis.context.handleSetBodyWhiteBg(false);\n\t}\n  \n\trender() {\n\t\treturn <RegisterV3Render history={this.props.history}/>;\n\t}\n}\n\nexport default RegisterV3;","/Users/kyle/Easy_Ledger/front_end/src/pages/user/logout.js",["603","604"],"import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { PageSettings } from './../../config/page-settings.js';\nimport LoginV3Render from './login-v3-render.js';\n\nclass Logout extends React.Component {\n\tstatic contextType = PageSettings;\n  \n\tcomponentDidMount() {\n        this.context.logout();\n\t}\n  \n\trender() {\n\t\treturn (\n            <h1>Logging out...</h1>\n        );\n\t}\n}\n\nexport default Logout;","/Users/kyle/Easy_Ledger/front_end/src/pages/user/login-v3.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/user/login-v1.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/helper/helper-css.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/extra/extra-scrum-board.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/user/login-v2.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/extra/extra-cookie-acceptance-banner.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/extra/extra-search.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/extra/extra-invoice.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/extra/extra-coming-soon.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/extra/extra-timeline.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-search-sidebar.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/extra/extra-profile.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/extra/extra-error.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-transparent-sidebar.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-boxed-layout.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-mixed-menu.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-boxed-layout-with-mixed-menu.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-mega-menu.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-light-sidebar.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-top-menu.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-full-height.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-two-sidebar.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-wide-sidebar.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-without-sidebar.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-footer.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/map/map.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-blank.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/calendar/calendar.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-right-sidebar.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/gallery/gallery.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/chart/chart-js.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/chart/chart-apex.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/option/page-with-minified-sidebar.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/chart/chart-d3.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/form/form-plugins.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/table/table-basic.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/form/form-elements.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-social-buttons.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/bootstrap/bootstrap-4.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-language-bar-icon.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-simple-line-icons.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-icons.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-ionicons.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-buttons.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-media-object.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-widget-boxes.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-tabs-accordion.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-modal-notification.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-general.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/ui/ui-typography.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/dashboard/dashboard-v3.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/dashboard/dashboard-v2.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/dashboard/dashboard-v1.js",[],"/Users/kyle/Easy_Ledger/front_end/src/components/sidebar/sidebar-nav-list.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/components/top-menu/top-menu-nav-list.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/email/email-inbox.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/email/email-compose.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/email/email-detail.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/widget/widget.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/reports/components/report-type-list.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/reports/components/balance-sheet-render.js",["605","606","607","608"],"import React from 'react';\nimport axios from 'axios';\nimport { API_BASE_URL} from '../../../utils/constants';\nimport { PageSettings } from '../../../config/page-settings';\nimport {balanceSheetRenderText} from '../../../utils/i18n/balance-sheet-render-text.js';\n\n/**\n * BALANCE SHEET FORMAT\n *  ASSETS\n *      Current Assets\n *          1: Cash and cash equivalents\n *          2: Current marketable securities\n *          3: Receivables\n *          4: Inventories \n *          5: Other current assets\n *      Non Current Assets\n *          6: Property\n *          7: Plant and equipment\n *          8: Non-current marketable securities\n *          9: Other non-current assets\n *  LIABILITIES\n *      Current Liabilities\n *          10: Payables\n *          11: Deferred revenue\n *          12: Commercial paper\n *          13: Current term debt\n *          14: Deferred tax\n *          15: Other current liabilities\n *      Non Current Liabilities\n *          16: Non-current term debt\n *          17: Other non-current liabilities\n *  SHAREHOLDER'S EQUITY\n *      18: Paid-in Capital\n *      20: Other equity items\n *      Retained Earnings\n *          Beginning Balances (21 + 22 - (23, 24, 25, 26, 27, 28, 29) - 19 up to end of previous period)\n *              Add Net Income for current period (21 + 22 - (23, 24, 25, 26, 27, 28, 29))\n *              Less 19: Dividends and equivalents for current period\n *          Ending Balances (as of specified date)\n */     \n\nfunction BalanceSheetRender() {\n    const appContext = React.useContext(PageSettings);\n\n    const today = new Date();\n    const [endDate, setEndDate] = React.useState(today.toISOString().split('T')[0]);\n    const [loading, setLoading] = React.useState(true);\n\n    const [asOfDate, setAsOfDate] = React.useState(\"\");\n    const [prevPeriodEndDate, setPrevPeriodEndDate] = React.useState(\"\");\n    const [currPeriodStartDate, setCurrPeriodStartDate] = React.useState(\"\");\n    const [balanceSheetAssets, setBalanceSheetAssets] = React.useState(null);\n    const [balanceSheetLiabilities, setBalanceSheetLiabilities] = React.useState(null);\n    const [balanceSheetEquity, setBalanceSheetEquity] = React.useState(null);\n\n    const [accountGroupBalances, setAccountGroupBalances] = React.useState([]);\n    const [accountBalances, setAccountBalances] = React.useState([]);\n    \n    const handleChangeDate = date => {\n        setEndDate(date);\n    }\n\n    const numberAsCurrency = (number) => {\n        if (number == 0) {\n            return new Intl.NumberFormat(appContext.locale, { style: 'currency', currency: appContext.currency }).format(0);\n        }\n        return new Intl.NumberFormat(appContext.locale, { style: 'currency', currency: appContext.currency }).format(number)\n    }\n\n\n    React.useEffect(() => {\n        async function fetchData() {\n            setLoading(true);\n            await axios.get(`${API_BASE_URL}/organization/${appContext.currentOrganizationId}/reports/balanceSheet/${endDate}`).then(response => {\n                if (response.data) {\n                    setAsOfDate(response.data.asOfDate);\n                    setPrevPeriodEndDate(response.data.prevPeriodEndDate);\n                    setCurrPeriodStartDate(response.data.currPeriodStartDate);\n                    setBalanceSheetAssets(response.data.balanceSheetAssets);\n                    setBalanceSheetLiabilities(response.data.balanceSheetLiabilities);\n                    setBalanceSheetEquity(response.data.balanceSheetEquity);\n                    setAccountGroupBalances(response.data.accountGroupBalances);\n                    setAccountBalances(response.data.accountBalances);\n                }\n            }).catch(error => {\n                console.log(error);\n            })\n            setLoading(false);\n        }\n        fetchData();\n    }, [endDate])\n\n    return (\n        <div className=\"widget widget-rounded m-b-30\">\n            <div className=\"widget-header bg-light border-bottom\">\n                <h4 className=\"widget-header-title width-half\">{balanceSheetRenderText[appContext.locale][\"Balance Sheet\"]}</h4>\n                <span className=\"widget-header-title d-flex flex-row justify-content-end\">\n                         <label className=\"col-form-label px-2 width-125 text-right\">{balanceSheetRenderText[appContext.locale][\"As of:\"]} </label>\n                         <input type=\"date\" className=\"form-control form-control-sm align-self-center width-125\" value={endDate} onChange={event => handleChangeDate(event.target.value)}/>\n                </span>\n            </div>\n            <div className=\"px-2\">\n                {loading? <div className=\"d-flex justify-content-center fa-3x py-3\"><i className=\"fas fa-circle-notch fa-spin\"></i></div> : \n                <div>\n                    <table className=\"table table-striped m-t-5\">\n                        <thead><tr><th>{balanceSheetRenderText[appContext.locale][\"Assets\"]}</th></tr></thead>\n                        <tbody>\n                            <tr><td className=\"p-l-30 font-weight-600\">{balanceSheetRenderText[appContext.locale][\"Current assets\"]}</td></tr>\n                            {balanceSheetAssets.currentAssetsSubtypeBalances.map(subtypeBalance => {\n                                return(\n                                    <tr key={subtypeBalance.accountSubtypeId}><td className=\"d-flex justify-content-between p-l-30\">\n                                        <div className=\"p-l-30\">{balanceSheetRenderText[appContext.locale][subtypeBalance.accountSubtypeName]}</div><div>{numberAsCurrency(subtypeBalance.debitsMinusCredits)}</div>\n                                    </td></tr>\n                                )\n                            })}\n                            <tr><td className=\"d-flex justify-content-between font-weight-600 p-l-30\">\n                                        <div className=\"p-l-60\">{balanceSheetRenderText[appContext.locale][\"Total current assets\"]}</div><div>{numberAsCurrency(balanceSheetAssets.totalCurrentAssets)}</div>\n                            </td></tr>\n                            <tr><td className=\"p-l-30 font-weight-600\">{balanceSheetRenderText[appContext.locale][\"Non-current assets\"]}</td></tr>\n                            {balanceSheetAssets.nonCurrentAssetsSubtypeBalances.map(subtypeBalance => {\n                                return(\n                                    <tr key={subtypeBalance.accountSubtypeId}><td className=\"d-flex justify-content-between p-l-30\">\n                                        <div className=\"p-l-30\">{balanceSheetRenderText[appContext.locale][subtypeBalance.accountSubtypeName]}</div><div>{numberAsCurrency(subtypeBalance.debitsMinusCredits)}</div>\n                                    </td></tr>\n                                )\n                            })}\n                            <tr><td className=\"d-flex justify-content-between font-weight-600 p-l-30\">\n                                <div className=\"p-l-60\">{balanceSheetRenderText[appContext.locale][\"Total non-current assets\"]}</div><div>{numberAsCurrency(balanceSheetAssets.totalNonCurrentAssets)}</div>\n                            </td></tr>\n                        </tbody>\n                        <tfoot><tr><td className=\"d-flex justify-content-between\">\n                            <div>{balanceSheetRenderText[appContext.locale][\"Total assets\"]}</div><div>{numberAsCurrency(balanceSheetAssets.totalAssets)}</div>\n                        </td></tr></tfoot>\n                    </table>\n\n                    <hr/>\n\n                    <table className=\"table table-striped\">\n                        <thead><tr><th>{balanceSheetRenderText[appContext.locale][\"Liabilities\"]}</th></tr></thead>\n                        <tbody>\n                            <tr><td className=\"p-l-30 font-weight-600\">{balanceSheetRenderText[appContext.locale][\"Current liabilities\"]}</td></tr>\n                            {balanceSheetLiabilities.currentLiabilitiesSubtypeBalances.map(subtypeBalance => {\n                                return(\n                                    <tr key={subtypeBalance.accountSubtypeId}><td className=\"d-flex justify-content-between p-l-30\">\n                                        <div className=\"p-l-30\">{balanceSheetRenderText[appContext.locale][subtypeBalance.accountSubtypeName]}</div><div>{numberAsCurrency(subtypeBalance.debitsMinusCredits * -1)}</div>\n                                    </td></tr>\n                                )\n                            })}\n                            <tr><td className=\"d-flex justify-content-between p-l-30 font-weight-600\">\n                                        <div className=\"p-l-60\">{balanceSheetRenderText[appContext.locale][\"Total current liabilities\"]}</div><div>{numberAsCurrency(balanceSheetLiabilities.totalCurrentLiabilities)}</div>\n                            </td></tr>\n                            <tr><td className=\"p-l-30 font-weight-600\">{balanceSheetRenderText[appContext.locale][\"Non-current liabilities\"]}</td></tr>\n                            {balanceSheetLiabilities.nonCurrentLiabilitiesSubtypeBalances.map(subtypeBalance => {\n                                return(\n                                    <tr key={subtypeBalance.accountSubtypeId}><td className=\"d-flex justify-content-between p-l-30\">\n                                        <div className=\"p-l-30\">{balanceSheetRenderText[appContext.locale][subtypeBalance.accountSubtypeName]}</div><div>{numberAsCurrency(subtypeBalance.debitsMinusCredits * -1)}</div>\n                                    </td></tr>\n                                )\n                            })}\n                            <tr><td className=\"d-flex justify-content-between p-l-30 font-weight-600\">\n                                <div className=\"p-l-60\">{balanceSheetRenderText[appContext.locale][\"Total non-current liabilities\"]}</div><div>{numberAsCurrency(balanceSheetLiabilities.totalNonCurrentLiabilities)}</div>\n                            </td></tr>\n                        </tbody>\n                        <tfoot><tr><td className=\"d-flex justify-content-between\">\n                            <div>{balanceSheetRenderText[appContext.locale][\"Total liabilities\"]}</div><div>{numberAsCurrency(balanceSheetLiabilities.totalLiabilities)}</div>\n                        </td></tr></tfoot>\n                    </table>\n\n                    <hr/>\n                    \n                    <table className=\"table table-striped\">\n                        <thead><tr><th>{balanceSheetRenderText[appContext.locale][\"Equity\"]}</th></tr></thead>\n                        <tbody>\n                            {balanceSheetEquity.equityItemsSubtypeBalances.map(subtypeBalance => {\n                                return(\n                                    <tr key={subtypeBalance.accountSubtypeId}><td className=\"d-flex justify-content-between p-l-30\">\n                                        <div>{balanceSheetRenderText[appContext.locale][subtypeBalance.accountSubtypeName]}</div><div>{numberAsCurrency(subtypeBalance.debitsMinusCredits * -1)}</div>\n                                    </td></tr>\n                                )\n                            })}\n                            <tr><td className=\"p-l-30 font-weight-600\"> {balanceSheetRenderText[appContext.locale][\"Retained Earnings\"]}</td></tr>\n                            <tr><td className=\"p-l-30 d-flex justify-content-between\">\n                                <div className=\"p-l-30\">{balanceSheetRenderText[appContext.locale][\"Beginning balances\"](prevPeriodEndDate)}</div><div>{numberAsCurrency(balanceSheetEquity.prevPeriodRetainedEarnings)}</div>\n                            </td></tr>\n                            <tr><td className=\"p-l-30 d-flex justify-content-between\">\n                                <div className=\"p-l-30\">{balanceSheetRenderText[appContext.locale][\"Net income for current period\"](currPeriodStartDate, asOfDate)}</div><div>{numberAsCurrency(balanceSheetEquity.currPeriodNetIncome)}</div>\n                            </td></tr>\n                            <tr><td className=\"p-l-30 d-flex justify-content-between\">\n                                <div className=\"p-l-30\">{balanceSheetRenderText[appContext.locale][\"Dividends for current period\"](currPeriodStartDate, asOfDate)}</div><div>{numberAsCurrency(balanceSheetEquity.currPeriodDividendsAndEquivalents)}</div>\n                            </td></tr>\n                            <tr><td className=\"d-flex justify-content-between p-l-30 font-weight-600\">\n                                        <div className=\"p-l-60\">{balanceSheetRenderText[appContext.locale][\"Ending balances of retained earnings\"]}</div><div>{numberAsCurrency(balanceSheetEquity.totalRetainedEarnings)}</div>\n                            </td></tr>\n                        </tbody>\n                        <tfoot><tr><td className=\"d-flex justify-content-between\">\n                            <div>{balanceSheetRenderText[appContext.locale][\"Total equity\"]}</div><div>{numberAsCurrency(balanceSheetEquity.totalEquity)}</div>\n                        </td></tr></tfoot>\n                    </table>\n                </div> \n                }\n            </div>\n        </div>\n\n\n    )\n}\n\nexport default BalanceSheetRender;","/Users/kyle/Easy_Ledger/front_end/src/components/panel/panel.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/chart-of-accounts/components/account-details-sidebar.js",["609","610","611"],"import React from 'react';\nimport { PageSettings } from '../../../config/page-settings';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Alert } from 'reactstrap';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport Select from 'react-select';\nimport axios from 'axios';\nimport { API_BASE_URL } from '../../../utils/constants';\nimport { accountDetailsSidebarText } from '../../../utils/i18n/account-details-sidebar-text.js';\n\nfunction AccountDetailsSidebar(props) {\n    /*  required props: accountId, accountName, accountGroupId, accountGroupName, debitTotal, creditTotal, accountTypeName, \n        accountGroupOptions, refreshAccountData, elementCount\n        If spreading an accountBalance object from the api into props, you'll need {...account}, accountGroupOptions, refreshAccountData, elementCount */\n\n    const appContext = React.useContext(PageSettings);\n    const history = useHistory();\n\n    const [accountNameInput, setAccountNameInput] = React.useState(props.accountName);\n    const [selectedAccountGroupOption, setSelectedAccountGroupOption] = React.useState(props.accountGroupOptions.find(accountGroupOption => accountGroupOption.object.accountGroupId == props.accountGroupId));\n\n    const [editAccountModal, setEditAccountModal] = React.useState(false);\n    const [noAccountNameAlert, setNoAccountNameAlert] = React.useState(false);\n\n    const [deleteAccountAlert, setDeleteAccountAlert] = React.useState(false);\n    const toggleDeleteAccountAlert = () => {\n        setDeleteAccountAlert(!deleteAccountAlert);\n    }\n    const [cannotDeleteAccountAlert, setCannotDeleteAccountAlert] = React.useState(false);\n    const toggleCannotDeleteAccountAlert = () => {\n        setCannotDeleteAccountAlert(!cannotDeleteAccountAlert);\n    }\n\n\n    /** Begin utils for 'edit account' form */\n    const toggleEditAccountModal = () => {\n        setEditAccountModal(!editAccountModal);\n        setAccountNameInput(props.accountName)\n        setSelectedAccountGroupOption(props.accountGroupOptions.find(accountGroupOption => accountGroupOption.object.accountGroupId == props.accountGroupId));\n        setNoAccountNameAlert(false);\n    }\n\n    const handleChangeAccountGroupOption = (selectedOption) => {\n        setSelectedAccountGroupOption(selectedOption);\n    }\n\n    const handleSaveEditAccount = async () => {\n        if (!accountNameInput) {\n            setNoAccountNameAlert(true);\n        }\n        let postedObject = {\n            accountId: props.accountId,\n            accountName: accountNameInput,\n            accountGroupId: selectedAccountGroupOption.object.accountGroupId\n        }\n        if (accountNameInput) {\n            await putAccount(postedObject);\n            await props.refreshAccountData();\n            toggleEditAccountModal();\n        }\n    }\n    /** End utils for 'edit account' form */\n\n\n    /** Begin utils for deleting account */\n    const handleConfirmDeleteAccountButton = async () => {\n        if (props.elementCount != 0) {\n            toggleDeleteAccountAlert();\n            toggleCannotDeleteAccountAlert();\n        } else {\n            deleteAccount(props.accountId);\n        }\n    }\n    /** End utils for deleting account */\n\n\n    /** Begin API calls */\n    const putAccount = async (account) => {\n        axios.put(`${API_BASE_URL}/account/${account.accountId}`, account).then(response => {\n            console.log(response);\n        }).catch(console.log);\n    }\n\n    const deleteAccount = async (accountId) => {\n        axios.delete(`${API_BASE_URL}/account/${accountId}`).then(response => {\n            console.log(response);\n            history.push(\"/chart-of-accounts\");\n        }).catch(console.log);\n    }\n    /** End API calls */\n\n\n    const formatCurrency = number => {\n        return new Intl.NumberFormat(appContext.locale, { style: 'currency', currency: appContext.currency }).format(number);\n    }\n\n    return (\n        <div className=\"widget widget-rounded mb-3\">\n            <div className=\"widget-header bg-light border-bottom\">\n                <h4 className=\"widget-header-title\">{accountDetailsSidebarText[appContext.locale][\"Account Details\"]}</h4>\n                <div className=\"widget-header-icon\">\n                    <Link replace to=\"#\" onClick={toggleEditAccountModal} className=\"icon-link-text-muted\"><i className=\"fas fa-fw fa-edit\"></i></Link>\n                </div>\n                <div className=\"widget-header-icon\">\n                    <Link replace to=\"#\" onClick={toggleDeleteAccountAlert} className=\"icon-link-text-muted\"><i className=\"fas fa-fw fa-trash-alt\"></i></Link>\n                </div>\n\n            </div>\n            <div className=\"px-2\">\n                <table className=\"table table-nested\">\n                    <tbody>\n                        <tr>\n                            <td>{accountDetailsSidebarText[appContext.locale][\"Account Name:\"]}</td>\n                            <td>{props.accountName}</td>\n                        </tr>\n                        <tr>\n                            <td>{accountDetailsSidebarText[appContext.locale][\"Account Group:\"]}</td>\n                            <td>{props.accountGroupName}</td>\n                        </tr>\n                        <tr>\n                            <td>{accountDetailsSidebarText[appContext.locale][\"Account Type:\"]}</td>\n                            <td>{props.accountTypeName}</td>\n                        </tr>\n                        <tr>\n                            <td>{accountDetailsSidebarText[appContext.locale][\"Total Debit Amount:\"]}</td>\n                            <td>{formatCurrency(props.debitTotal)}</td>\n                        </tr>\n                        <tr>\n                            <td>{accountDetailsSidebarText[appContext.locale][\"Total Credit Amount:\"]}</td>\n                            <td>{formatCurrency(props.creditTotal)}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <Modal isOpen={editAccountModal} toggle={toggleEditAccountModal} centered={true}>\n                <ModalHeader>{accountDetailsSidebarText[appContext.locale][\"Edit Account Details\"]}</ModalHeader>\n                <ModalBody>\n                    {\n                        noAccountNameAlert ?\n                            <Alert color=\"danger\">\n                                {accountDetailsSidebarText[appContext.locale][\"Please provide a name for your account.\"]}\n                            </Alert>\n                            : null\n                    }\n                    <form onSubmit={event => { event.preventDefault(); handleSaveEditAccount() }}>\n                        <div className=\"form-group row\">\n                            <label className=\"col-form-label col-md-3\">\n                                {accountDetailsSidebarText[appContext.locale][\"Account Name\"]}\n                            </label>\n                            <div className=\"col-md-9\">\n                                <input\n                                    className=\"form-control\"\n                                    value={accountNameInput}\n                                    onChange={event => {\n                                        setAccountNameInput(event.target.value);\n                                    }}\n                                />\n                            </div>\n                        </div>\n                    </form>\n                    <div className=\"form-group row\">\n                        <label className=\"col-form-label col-md-3\">\n                            {accountDetailsSidebarText[appContext.locale][\"Account Group\"]}\n                        </label>\n                        <div className=\"col-md-9\">\n                            <Select\n                                options={props.accountGroupOptions}\n                                value={selectedAccountGroupOption}\n                                isSearchable={true}\n                                onChange={handleChangeAccountGroupOption}\n                            />\n                        </div>\n                    </div>\n                </ModalBody>\n                <ModalFooter>\n                    <button\n                        className=\"btn btn-primary width-10ch\"\n                        onClick={handleSaveEditAccount}\n                    >\n                        {accountDetailsSidebarText[appContext.locale][\"Save\"]}\n                    </button>\n                    <button\n                        className=\"btn btn-white width-10ch\"\n                        onClick={toggleEditAccountModal}\n                    >\n                        {accountDetailsSidebarText[appContext.locale][\"Cancel\"]}\n                    </button>\n                </ModalFooter>\n            </Modal>\n\n            {deleteAccountAlert ?\n                <SweetAlert primary showCancel\n                    confirmBtnText={accountDetailsSidebarText[appContext.locale][\"Yes, delete it!\"]}\n                    confirmBtnBsStyle=\"primary\"\n                    cancelBtnBsStyle=\"default\"\n                    cancelBtnText={accountDetailsSidebarText[appContext.locale][\"Cancel\"]}\n                    title={accountDetailsSidebarText[appContext.locale][\"Are you sure?\"]}\n                    onConfirm={() => handleConfirmDeleteAccountButton()}\n                    onCancel={() => toggleDeleteAccountAlert()}\n                >\n                    {accountDetailsSidebarText[appContext.locale][\"Are you sure you want to delete this account?\"]}\n                </SweetAlert>\n                : null}\n            {cannotDeleteAccountAlert ?\n                <SweetAlert danger showConfirm={false} showCancel={true}\n                    cancelBtnBsStyle=\"default\"\n                    cancelBtnText={accountDetailsSidebarText[appContext.locale][\"Cancel\"]}\n                    title={accountDetailsSidebarText[appContext.locale][\"Cannot delete this account.\"]}\n                    onConfirm={() => toggleCannotDeleteAccountAlert()}\n                    onCancel={() => toggleCannotDeleteAccountAlert()}\n                >\n                    {accountDetailsSidebarText[appContext.locale][\"Please remove all line items from this account and try again.\"]}\n                </SweetAlert>\n                : null}\n\n        </div>\n    )\n}\n\nexport default AccountDetailsSidebar","/Users/kyle/Easy_Ledger/front_end/src/pages/user/login-v3-render.js",["612","613","614"],"import React from 'react';\nimport {Link, Redirect} from 'react-router-dom';\nimport {PageSettings} from '../../config/page-settings.js';\nimport {ACCESS_TOKEN, API_BASE_URL, REFRESH_TOKEN, LOCALE_OPTIONS} from '../../utils/constants.js';\nimport axios from 'axios';\nimport {Alert} from 'reactstrap';\nimport {loginV3Text} from '../../utils/i18n/login-v3-text.js'\n\nfunction LoginV3Render(props) {\n    //required props: history\n    const [emailInput, setEmailInput] = React.useState('');\n    const [passwordInput, setPasswordInput] = React.useState('');\n    const [loginAlert, setLoginAlert] = React.useState(false);\n    const [accountDisabledAlert, setAccountDisabledAlert] = React.useState(false);\n    const [lastAttemptedEmail, setLastAttemptedEmail] = React.useState('');\n    const [verificationSentAlert, setVerificationSentAlert] = React.useState(false);\n\n    const appContext = React.useContext(PageSettings);\n    const axiosLoginInstance = axios.create();\n\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        setLoginAlert(false);\n        setAccountDisabledAlert(false);\n        setVerificationSentAlert(false);\n        setLastAttemptedEmail(emailInput.slice());\n\n        let requestBody = {\n            email: emailInput,\n            password: passwordInput\n        }\n\n        axiosLoginInstance.post(`${API_BASE_URL}/auth/signin`, requestBody).then( response => {\n            localStorage.setItem(ACCESS_TOKEN, response.data.accessToken);\n            localStorage.setItem(REFRESH_TOKEN, response.data.refreshToken);\n            appContext.checkForAuthentication();\n            props.history.push('/');\n        }).catch( error => {\n            if (error.response.data.message == \"User is disabled\") {\n                setAccountDisabledAlert(true);\n            } else {\n                setLoginAlert(true);\n            }\n        });\n\n    }\n\n    const handleResendEmail = () => {\n        axiosLoginInstance.get(`${API_BASE_URL}/verification/resend/${lastAttemptedEmail}`).then( response => {\n            setAccountDisabledAlert(false);\n            setVerificationSentAlert(true);\n        }).catch(console.log);\n    }\n\n\n\n    return (\n        <div className=\"login login-with-news-feed\">\n            <div className=\"news-feed\">\n                <div className=\"news-image\" style={{backgroundImage: 'url(/assets/img/login-bg/login-bg-11.jpg)'}}></div>\n                <div className=\"news-caption\">\n                    <h4 className=\"caption-title\"><b>Easy</b> Ledger App</h4>\n                    <p>\n                        {loginV3Text[appContext.locale][\"App description 1\"]}\n                    </p>\n                </div>\n            </div>\n            <div className=\"right-content\">\n                <div className=\"login-header\">\n                    <div className=\"brand\">\n                        <span className=\"logo\"></span> <b>Easy</b> Ledger\n                    </div>\n                    <div className=\"icon\">\n                        <i className=\"fa fa-sign-in\"></i>\n                    </div>\n                </div>\n                <div className=\"login-content\">\n                    {loginAlert? <Alert color=\"danger\">{loginV3Text[appContext.locale][\"Invalid email or password.\"]}</Alert> : null}\n                    {accountDisabledAlert? \n                        <Alert color=\"danger\">\n                            {loginV3Text[appContext.locale][\"Email not verified\"]}\n                            &nbsp;<Link to=\"#\" onClick={() => handleResendEmail()} className=\"alert-link\">{loginV3Text[appContext.locale][\"Click here to send a new verification email.\"]}</Link>\n                        </Alert> \n                    : null}\n                    {verificationSentAlert? <Alert color=\"success\">{loginV3Text[appContext.locale][\"Verification email sent!\"]}</Alert> : null}\n                    <form className=\"margin-bottom-0\" onSubmit={event => handleSubmit(event)}>\n                        <div className=\"form-group m-b-15\">\n                            <input type=\"email\" className=\"form-control form-control-lg\" placeholder={loginV3Text[appContext.locale][\"Email Address\"]} required value={emailInput} onChange={event => setEmailInput(event.target.value)}/>\n                        </div>\n                        <div className=\"form-group m-b-15\">\n                            <input type=\"password\" className=\"form-control form-control-lg\" placeholder={loginV3Text[appContext.locale][\"Password\"]} required value={passwordInput} onChange={event => setPasswordInput(event.target.value)} />\n                        </div>\n                        <div className=\"login-buttons\">\n                            <button type=\"submit\" className=\"btn btn-success btn-block btn-lg\">{loginV3Text[appContext.locale][\"Sign me in\"]}</button>\n                        </div>\n                        <div className=\"m-t-20 m-b-40 p-b-40 text-inverse\">\n                            {loginV3Text[appContext.locale][\"Not a member\"]}\n                        </div>\n                        <div>\n                            {LOCALE_OPTIONS.map(localeOption => {\n                                return (\n                                    appContext.locale == localeOption.value ?\n                                        <b className=\"mr-3 font-weight-600\">{localeOption.label}</b> :\n                                        <Link replace to=\"#\" onClick={() => appContext.handleSetLocale(localeOption.value)} className=\"mr-3\">{localeOption.label}</Link>\n                                )\n                            })}\n                        </div>\n                        <hr />\n                        <p className=\"text-center text-grey-darker\">\n                            {loginV3Text[appContext.locale][\"Copyright text\"]}\n                        </p>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nexport default LoginV3Render;","/Users/kyle/Easy_Ledger/front_end/src/pages/user/register-v3-render.js",["615","616","617"],"import React from 'react';\nimport axios from 'axios';\nimport { Alert } from 'reactstrap';\nimport {Link} from 'react-router-dom';\nimport {PageSettings} from '../../config/page-settings.js';\nimport {API_BASE_URL, LOCALE_OPTIONS, CURRENCY_OPTIONS} from '../../utils/constants.js';\nimport {registerV3Text} from '../../utils/i18n/register-v3-text';\nimport Select from 'react-select';\n\nfunction RegisterV3Render(props) {\n    //required props: history\n\n    const [firstNameInput, setFirstNameInput] = React.useState('');\n    const [lastNameInput, setLastNameInput] = React.useState('');\n    const [emailInput, setEmailInput] = React.useState('');\n    const [reEnterEmailInput, setReEnterEmailInput] = React.useState('');\n    const [organizationNameInput, setOrganizationNameInput] = React.useState('');\n    const [passwordInput, setPasswordInput] = React.useState('');\n    const [reEnterPasswordInput, setReEnterPasswordInput] = React.useState('');\n    const [agreeInput, setAgreeInput] = React.useState(false);\n    const [selectedCurrency, setSelectedCurrency] = React.useState(CURRENCY_OPTIONS.find(option => option.value == \"USD\"));\n    const [isEnterprise, setIsEnterprise] = React.useState(true);\n\n    const [emailMatchAlert, setEmailMatchAlert] = React.useState(false);\n    const [emailTakenAlert, setEmailTakenAlert] = React.useState(false);\n    const [passwordMatchAlert, setPasswordMatchAlert] = React.useState(false);\n    const [agreeAlert, setAgreeAlert] = React.useState(false);\n\n    const appContext = React.useContext(PageSettings);\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        setEmailMatchAlert(false);\n        setEmailTakenAlert(false);\n        setPasswordMatchAlert(false);\n        setAgreeAlert(false);\n\n        if (emailInput !== reEnterEmailInput) {\n            setEmailMatchAlert(true);\n            return;\n        }\n\n        if (passwordInput !== reEnterPasswordInput) {\n            setPasswordMatchAlert(true);\n            return;\n        }\n\n        if (!agreeInput) {\n            setAgreeAlert(true);\n            return;\n        }\n\n        let requestBody = {\n            firstName: firstNameInput,\n            lastName: lastNameInput,\n            email: emailInput,\n            reEnterEmail: reEnterEmailInput,\n            password: passwordInput,\n            reEnterPassword: reEnterPasswordInput,\n            agree: agreeInput,\n            organizationName: organizationNameInput,\n            locale: appContext.locale,\n            isEnterprise: isEnterprise,\n            currency: selectedCurrency.value\n        }\n\n        axios.post(`${API_BASE_URL}/auth/signup`, requestBody).then(response => {\n             props.history.push('/user/registration-successful')  \n        }).catch(response => {\n            if (response && response.response.data.message == \"Email is already taken!\") {\n                setEmailTakenAlert(true);\n            }\n        })\n        \n    }\n\n    return (\n        <div className=\"register register-with-news-feed\">\n            <div className=\"news-feed\">\n                <div className=\"news-image\" style={{ backgroundImage: 'url(/assets/img/login-bg/login-bg-9.jpg)' }}></div>\n                <div className=\"news-caption\">\n                    <h4 className=\"caption-title\"><b>Easy</b> Ledger App</h4>\n                    <p>\n                        {registerV3Text[appContext.locale][\"App description\"]}\n                    </p>\n                </div>\n            </div>\n            <div className=\"right-content\">\n                <h1 className=\"register-header\">\n                    {registerV3Text[appContext.locale][\"Sign Up\"]}\n                    <small>{registerV3Text[appContext.locale][\"Create your Easy Ledger Account.\"]}</small>\n                </h1>\n                <div className=\"register-content\">\n                    <form className=\"margin-bottom-0\" onSubmit={event => handleSubmit(event)}>\n                        <label className=\"control-label\">{registerV3Text[appContext.locale][\"Name\"]} <span className=\"text-danger\">*</span></label>\n                        <div className=\"row row-space-10\">\n                            <div className=\"col-md-6 m-b-15\">\n                                <input type=\"text\" className=\"form-control\" placeholder={registerV3Text[appContext.locale][\"First name\"]} required value={firstNameInput} onChange={event => setFirstNameInput(event.target.value)} />\n                            </div>\n                            <div className=\"col-md-6 m-b-15\">\n                                <input type=\"text\" className=\"form-control\" placeholder={registerV3Text[appContext.locale][\"Last name\"]} required value={lastNameInput} onChange={event => setLastNameInput(event.target.value)}/>\n                            </div>\n                        </div>\n                        <label className=\"control-label\">{registerV3Text[appContext.locale][\"Email\"]} <span className=\"text-danger\">*</span></label>\n                        <div className=\"row m-b-15\">\n                            <div className=\"col-md-12\">\n                                <input type=\"email\" className=\"form-control\" placeholder={registerV3Text[appContext.locale][\"Email address\"]} required value={emailInput} onChange={event => setEmailInput(event.target.value)}/>\n                            </div>\n                        </div>\n                        {emailTakenAlert? <Alert color=\"danger\">{registerV3Text[appContext.locale][\"Email is already taken.\"]}</Alert> : null}\n                        <label className=\"control-label\">{registerV3Text[appContext.locale][\"Re-enter Email\"]} <span className=\"text-danger\">*</span></label>\n                        <div className=\"row m-b-15\">\n                            <div className=\"col-md-12\">\n                                <input type=\"email\" className=\"form-control\" placeholder={registerV3Text[appContext.locale][\"Re-enter email address\"]} required value={reEnterEmailInput} onChange={event => setReEnterEmailInput(event.target.value)}/>\n                            </div>\n                        </div>\n                        {emailMatchAlert ? <Alert color=\"danger\">{registerV3Text[appContext.locale][\"Email does not match.\"]}</Alert> : null}\n                        <label className=\"control-label\">{registerV3Text[appContext.locale][\"Organization Name\"]} <span className=\"text-danger\">*</span></label>\n                        <div className=\"row m-b-15\">\n                            <div className=\"col-md-12\">\n                                <input type=\"text\" className=\"form-control\" placeholder={registerV3Text[appContext.locale][\"Organization Name\"]} required value={organizationNameInput} onChange={event => setOrganizationNameInput(event.target.value)}/>\n                            </div>\n                        </div>\n                        <label className=\"control-label\">{registerV3Text[appContext.locale][\"Password\"]} <span className=\"text-danger\">*</span></label>\n                        <div className=\"row m-b-15\">\n                            <div className=\"col-md-12\">\n                                <input type=\"password\" className=\"form-control\" placeholder={registerV3Text[appContext.locale][\"Password\" ]} required value={passwordInput} onChange={event => setPasswordInput(event.target.value)}/>\n                            </div>\n                        </div>\n                        <label className=\"control-label\">{registerV3Text[appContext.locale][\"Re-enter Password\"]} <span className=\"text-danger\">*</span></label>\n                        <div className=\"row m-b-15\">\n                            <div className=\"col-md-12\">\n                                <input type=\"password\" className=\"form-control\" placeholder={registerV3Text[appContext.locale][\"Password\"]} required value={reEnterPasswordInput} onChange={event => setReEnterPasswordInput(event.target.value)}/>\n                            </div>\n                        </div>\n                        {passwordMatchAlert ? <Alert color=\"danger\">{registerV3Text[appContext.locale][\"Password does not match.\"]}</Alert> : null}\n                        <label className=\"control-label\">Currency<span className=\"text-danger\">*</span></label>\n                        <div className=\"row m-b-15\">\n                            <div className=\"col-md-12\">\n                                <Select\n                                    options={CURRENCY_OPTIONS}\n                                    value={selectedCurrency}\n                                    isSearchable={true}\n                                    onChange={(selectedOption) => {\n                                        setSelectedCurrency(selectedOption);\n                                    }}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"checkbox checkbox-css m-b-30\">\n                            <div className=\"checkbox checkbox-css m-b-30\">\n                                <input type=\"checkbox\" id=\"agreement_checkbox\" value={isEnterprise} onChange={() => setIsEnterprise(!isEnterprise)} />\n                                <label htmlFor=\"agreement_checkbox\">\n                                    isEnterprise\n                                    {/** TODO: make this look good */}\n                                </label> \n                            </div>\n                        </div>\n                        <div className=\"checkbox checkbox-css m-b-30\">\n                            <div className=\"checkbox checkbox-css m-b-30\">\n                                <input type=\"checkbox\" id=\"agreement_checkbox\" value={agreeInput} onChange={() => setAgreeInput(!agreeInput)} />\n                                <label htmlFor=\"agreement_checkbox\">\n                                    {registerV3Text[appContext.locale][\"Agreement text\"]}\n                                    {/** TODO: terms and conditions lol */}\n                                </label> \n                            </div>\n                        </div>\n                        {agreeAlert ? <Alert color=\"danger\">{registerV3Text[appContext.locale][\"Please agree.\"]}</Alert> : null}\n                        <div className=\"register-buttons\">\n                            <button type=\"submit\" className=\"btn btn-primary btn-block btn-lg\">{registerV3Text[appContext.locale][\"Sign Up\"]}</button>\n                        </div>\n                        <div className=\"m-t-20 p-b-40 text-inverse\">\n                            {registerV3Text[appContext.locale][\"Already a member\"]}\n                        </div>\n                        <div>\n                            {LOCALE_OPTIONS.map(localeOption => {\n                                return(\n                                    appContext.locale == localeOption.value? \n                                    <b className=\"mr-3 font-weight-600\">{localeOption.label}</b> : \n                                    <Link replace to=\"#\" onClick={() => appContext.handleSetLocale(localeOption.value)} className=\"mr-3\">{localeOption.label}</Link>\n                                )\n                            })}\n                        </div>\n                        <hr />\n                        <p className=\"text-center\">\n                            {registerV3Text[appContext.locale][\"Copyright text\"]}\n                        </p>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RegisterV3Render;","/Users/kyle/Easy_Ledger/front_end/src/pages/dashboard/components/income-and-expense-summary.js",["618","619","620","621","622","623","624","625","626","627","628"],"import React from 'react';\nimport { Bar, defaults } from 'react-chartjs-2';\nimport { PageSettings } from '../../../config/page-settings';\nimport axios from 'axios';\nimport { API_BASE_URL } from '../../../utils/constants';\nimport {incomeAndExpenseSummaryText} from '../../../utils/i18n/income-and-expense-summary-text.js';\n\nfunction IncomeAndExpenseSummary() {\n    const appContext = React.useContext(PageSettings);\n    const [loading, setLoading] = React.useState(true);\n    const [labels, setLabels] = React.useState([]);\n    const [incomeData, setIncomeData] = React.useState([]);\n    const [expenseData, setExpenseData] = React.useState([]);\n    const [numberOfMonths, setNumberOfMonths] = React.useState(12);\n\n    //fetch data on component mount\n    React.useEffect(() => {\n        axios.get(`${API_BASE_URL}/organization/${appContext.currentOrganizationId}/accountTypeSummary/monthly/${numberOfMonths - 1}`).then(response => {\n            if (response.data) { //Warning: proper formatting of data for the bar chart relies on server-side sorting of AccountTypeSummary by yearMonth ascending.\n                let incomeAndExpenseData = response.data.filter(accountTypeSummary => accountTypeSummary.accountTypeId == 4 || accountTypeSummary.accountTypeId == 5);\n                let unparsedLabels = [];\n                let incomeSummaries = [];\n                let expenseSummaries = [];\n                let currentDate = new Date();\n                let currentYearMonth = (currentDate.getFullYear() * 100) + (currentDate.getMonth() + 1);\n                if (incomeAndExpenseData.length != 0) {\n                    unparsedLabels.push(incomeAndExpenseData[0].yearMonth); //add earliest yearMonth in the returned data set to the array of unparsed date labels\n                    while (unparsedLabels.length < numberOfMonths) { //generate consecutive months from the earliest yearMonth to the present yearMonth\n                        let nextMonth = unparsedLabels[unparsedLabels.length - 1] % 100;\n                        let nextYear = (unparsedLabels[unparsedLabels.length - 1] - nextMonth) / 100;\n                        if (nextMonth == 12) {\n                            nextMonth = 1;\n                            nextYear++;\n                        } else {\n                            nextMonth++;\n                        }\n                        let nextYearMonth = nextYear * 100 + nextMonth;\n                        unparsedLabels.push(nextYearMonth);\n                        if (nextYearMonth == currentYearMonth) {\n                            break;\n                        }\n                    }\n                    unparsedLabels.forEach(unparsedLabel => { //populate income and expense summary arrays with data from corresponding objects\n                        let incomeSummary = incomeAndExpenseData.find(summaryObject => summaryObject.accountTypeId == 4 && summaryObject.yearMonth == unparsedLabel);\n                        let expenseSummary = incomeAndExpenseData.find(summaryObject => summaryObject.accountTypeId == 5 && summaryObject.yearMonth == unparsedLabel);\n                        if (incomeSummary) {\n                            incomeSummaries.push(incomeSummary.creditAmount - incomeSummary.debitAmount);\n                        } else {\n                            incomeSummaries.push(0);\n                        }\n                        if (expenseSummary) {\n                            expenseSummaries.push(expenseSummary.debitAmount - expenseSummary.creditAmount);\n                        } else {\n                            expenseSummaries.push(0);\n                        }\n                    })\n                    setIncomeData(incomeSummaries);\n                    setExpenseData(expenseSummaries);\n                    setLabels(unparsedLabels.map(label => parseYearMonth(label)));\n                }\n\n            }\n            setLoading(false);\n        }).catch(console.log);\n\n    }, [appContext.currentOrganizationId])\n\n    defaults.global.defaultFontColor = \"#333\"; //chartJS font color\n\n\n    //takes integer representing a year and month in format yyyymm and returns a string \"yyyy MonthName\"\n    const parseYearMonth = yyyymm => {\n        let month = yyyymm % 100;\n        let year = (yyyymm - month) / 100;\n        let monthString = ''\n        switch (month) {\n            case 1:\n                monthString = incomeAndExpenseSummaryText[appContext.locale][\" Jan\"];\n                break;\n            case 2:\n                monthString = incomeAndExpenseSummaryText[appContext.locale][\" Feb\"];\n                break;\n            case 3:\n                monthString = incomeAndExpenseSummaryText[appContext.locale][\" Mar\"];\n                break;\n            case 4:\n                monthString = incomeAndExpenseSummaryText[appContext.locale][\" Apr\"];\n                break;\n            case 5:\n                monthString = incomeAndExpenseSummaryText[appContext.locale][\" May\"];\n                break;\n            case 6:\n                monthString = incomeAndExpenseSummaryText[appContext.locale][\" June\"];\n                break;\n            case 7:\n                monthString = incomeAndExpenseSummaryText[appContext.locale][\" July\"];\n                break;\n            case 8:\n                monthString = incomeAndExpenseSummaryText[appContext.locale][\" Aug\"];\n                break;\n            case 9:\n                monthString = incomeAndExpenseSummaryText[appContext.locale][\" Sept\"];\n                break;\n            case 10:\n                monthString = incomeAndExpenseSummaryText[appContext.locale][\" Oct\"];\n                break;\n            case 11:\n                monthString = incomeAndExpenseSummaryText[appContext.locale][\" Nov\"];\n                break;\n            case 12:\n                monthString = incomeAndExpenseSummaryText[appContext.locale][\" Dec\"];\n                break;\n            default:\n                break;\n        }\n        return (year.toString() + monthString);\n    }\n\n\n    const barChart = {\n        data: {\n            labels: labels,\n            datasets: [{\n                label: incomeAndExpenseSummaryText[appContext.locale][\"Income\"],\n                borderWidth: 2,\n                borderColor: '#727cb6',\n                backgroundColor: 'rgba(114, 124, 182, 0.3)',\n                data: incomeData\n            }, {\n                label: incomeAndExpenseSummaryText[appContext.locale][\"Expenses\"],\n                borderWidth: 2,\n                borderColor: '#8f103c',\n                backgroundColor: 'rgba(143, 16, 60, 0.3)',\n                data: expenseData\n            }]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false\n        }\n    };\n\n\n\n\n\n\n    return (\n        <div className=\"card border-0 widget widget-rounded mb-3\">\n            <div className=\"widget-header bg-light border-bottom\">\n                <h4 className=\"widget-header-title\">{incomeAndExpenseSummaryText[appContext.locale][\"Income and Expenses\"]}</h4>\n            </div>\n            {loading ? <div className=\"d-flex justify-content-center fa-3x py-3\"><i className=\"fas fa-circle-notch fa-spin\"></i></div> :\n                <div className=\"card-body\" style={{ height: '500px' }}>\n                    <Bar className=\"text-white\" data={barChart.data} options={barChart.options} />\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default IncomeAndExpenseSummary;","/Users/kyle/Easy_Ledger/front_end/src/pages/dashboard/components/balance-summary.js",["629","630","631"],"import React from 'react';\nimport axios from 'axios';\nimport { API_BASE_URL } from '../../../utils/constants.js';\nimport { PageSettings } from '../../../config/page-settings';\nimport { useHistory } from \"react-router-dom\";\nimport {balanceSummaryText} from \"../../../utils/i18n/balance-summary-text.js\";\n\n\nfunction BalanceSummary() {\n    const appContext = React.useContext(PageSettings);\n    const history = useHistory();\n    const [loading, setLoading] = React.useState(true);\n    const [assetAndLiabilityAccounts, setAssetAndLiabilityAccounts] = React.useState([]);\n\n    //fetch data on component mount\n    React.useEffect(() => {\n        axios.get(`${API_BASE_URL}/organization/${appContext.currentOrganizationId}/accountBalance`).then(response => {\n            if (response.data) {\n                let filteredAccounts = response.data.filter(accountBalance => accountBalance.accountTypeId == 1 || accountBalance.accountTypeId == 2);\n                filteredAccounts.forEach(account => (account.amount = (account.accountTypeId == 1 ?\n                    account.debitTotal - account.creditTotal : account.creditTotal - account.debitTotal)));\n                setAssetAndLiabilityAccounts(filteredAccounts);\n            }\n            setLoading(false);\n        }).catch(console.log);\n\n    }, [appContext.currentOrganizationId])\n\n\n    return (\n        <div className=\"widget widget-rounded mb-3\">\n            <div className=\"widget-header bg-light border-bottom\">\n                <h4 className=\"widget-header-title\">{balanceSummaryText[appContext.locale][\"Balance Summary\"]}</h4>\n            </div>\n            <div className=\"overflow-auto px-2\" style={{ height: '500px' }}>\n                {loading ? <div className=\"d-flex justify-content-center fa-3x py-3\"><i className=\"fas fa-circle-notch fa-spin\"></i></div> :\n                    <table className='table table-hover'>\n                        <thead>\n                            <tr>\n                                <th>{balanceSummaryText[appContext.locale][\"Account\"]}</th>\n                                <th className=\"text-right\">{balanceSummaryText[appContext.locale][\"Balance\"]}</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {assetAndLiabilityAccounts.map(account => {\n                                return (\n                                    <tr key={account.accountId} className=\"cursor-pointer\" onClick={() => history.push(`/account-details/${account.accountId}`)}>\n                                        <td>\n                                            {account.accountName}\n                                        </td>\n                                        <td className={\"text-right \" + (account.creditTotal > account.debitTotal ? \"text-red\" : \"\")}>\n                                            {new Intl.NumberFormat(appContext.locale, { style: 'currency', currency: appContext.currency }).format(account.amount)}\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default BalanceSummary;","/Users/kyle/Easy_Ledger/front_end/src/pages/reports/components/income-statement-render.js",["632","633","634","635","636","637","638","639","640","641","642","643","644","645"],"import React from 'react';\nimport { PageSettings } from '../../../config/page-settings';\nimport { API_BASE_URL} from '../../../utils/constants';\nimport axios from 'axios';\nimport {incomeStatementRenderText} from '../../../utils/i18n/income-statement-render-text';\n\n/**\n * INCOME STATEMENT FORMAT\n * \n * 21 Revenue\n *      Revenue account groups\n *          Total Revenue\n * empty\n * 23 Cost of sales\n *      COS account groups\n *          total COS\n *          Gross Profit \n * empty\n * Operating Expenses\n *      24 R&D\n *      25 SG&A\n *      26 Depreciation\n *      27 Amortization\n *          Total operating expenses\n * empty\n * Operating income\n * 22 - 28 Other income/expense, net\n * Income before provision for income taxes\n * 29 Income taxes\n * empty\n * Net income\n */\nfunction IncomeStatementRender() {\n    const appContext = React.useContext(PageSettings);\n\n    const today = new Date();\n    const [startDate, setStartDate] = React.useState(today.getFullYear() + \"-01-01\");\n    const [endDate, setEndDate] = React.useState(today.toISOString().split('T')[0]);\n    const [loading, setLoading] = React.useState(true);\n\n    const [totalRevenue, setTotalRevenue] = React.useState(null);\n    const [totalCostOfSales, setTotalCostOfSales] = React.useState(null);\n    const [grossProfit, setGrossProfit] = React.useState(null);\n    const [rd, setRd] = React.useState(null);\n    const [sga, setSga] = React.useState(null);\n    const [depreciation, setDepreciation] = React.useState(null);\n    const [amortization, setAmortization] = React.useState(null);\n    const [totalOperatingExpenses, setTotalOperatingExpenses] = React.useState(null);\n    const [operatingIncome, setOperatingIncome] = React.useState(null);\n    const [netOtherIncomeExpense, setNetOtherIncomeExpense] = React.useState(null);\n    const [incomeBeforeTax, setIncomeBeforeTax] = React.useState(null);\n    const [incomeTax, setIncomeTax] = React.useState(null);\n    const [netIncome, setNetIncome] = React.useState(null);\n\n    const [revenueSubtypeId, setRevenueSubtypeId] = React.useState(null);\n    const [otherIncomeSubtypeId, setOtherIncomeSubtypeId] = React.useState(null);\n    const [costOfSalesSubtypeId, setCostOfSalesSubtypeId] = React.useState(null);\n    const [researchAndDevelopmentSubtypeId, setResearchAndDevelopmentSubtypeId] = React.useState(null);\n    const [sgaSubtypeId, setSgaSubtypeId] = React.useState(null);\n    const [depreciationSubtypeId, setDepreciationSubtypeId] = React.useState(null);\n    const [amortizationSubtypeId, setAmortizationSubtypeId] = React.useState(null);\n    const [otherExpensesSubtypeId, setOtherExpensesSubtypeId] = React.useState(null);\n    const [incomeTaxSubtypeId, setIncomeTaxSubtypeId] = React.useState(null);\n\n    const [accountGroupBalances, setAccountGroupBalances] = React.useState(null);\n    const [accountBalances, setAccountBalances] = React.useState(null);\n\n\n    React.useEffect(() => {\n        async function fetchData() {\n            setLoading(true);\n            await axios.get(`${API_BASE_URL}/organization/${appContext.currentOrganizationId}/reports/incomeStatement/${startDate}/${endDate}`).then(response => {\n                if (response.data) {\n                    setTotalRevenue(response.data.totalRevenue);\n                    setTotalCostOfSales(response.data.totalCostOfSales);\n                    setGrossProfit(response.data.grossProfit);\n                    setRd(response.data.totalResearchAndDevelopment);\n                    setSga(response.data.totalSalesGeneralAndAdministration);\n                    setDepreciation(response.data.totalDepreciation);\n                    setAmortization(response.data.totalAmortization);\n                    setTotalOperatingExpenses(response.data.totalOperatingExpenses);\n                    setOperatingIncome(response.data.operatingIncome);\n                    setNetOtherIncomeExpense(response.data.otherIncomeExpense);\n                    setIncomeBeforeTax(response.data.incomeBeforeTax);\n                    setIncomeTax(response.data.incomeTax);\n                    setNetIncome(response.data.netIncome);\n                    setAccountGroupBalances(response.data.accountGroupBalances);\n                    setAccountBalances(response.data.accountBalances);\n                    setRevenueSubtypeId(response.data.revenueSubtypeId);\n                    setOtherIncomeSubtypeId(response.data.otherIncomeSubtypeId);\n                    setCostOfSalesSubtypeId(response.data.costOfSalesSubtypeId);\n                    setResearchAndDevelopmentSubtypeId(response.data.researchAndDevelopmentSubtypeId);\n                    setSgaSubtypeId(response.data.sgaSubtypeId);\n                    setDepreciationSubtypeId(response.data.depreciationSubtypeId);\n                    setAmortizationSubtypeId(response.data.amortizationSubtypeId);\n                    setOtherExpensesSubtypeId(response.data.otherExpensesSubtypeId);\n                    setIncomeTaxSubtypeId(response.data.incomeTaxSubtypeId);\n                }\n            }).catch(error => {\n                console.log(error);\n            });\n            setLoading(false);\n        }\n        fetchData();\n    }, [startDate, endDate]);\n\n    const handleChangeStartDate = date => {\n        setStartDate(date);\n    }\n    const handleChangeEndDate = date => {\n        setEndDate(date);\n    }\n\n    const numberAsCurrency = (number) => {\n        if (number == 0) {\n            return new Intl.NumberFormat(appContext.locale, { style: 'currency', currency: appContext.currency }).format(0);\n        }\n        return new Intl.NumberFormat(appContext.locale, { style: 'currency', currency: appContext.currency }).format(number)\n    }\n\n\n    return (\n        <div className=\"widget widget-rounded m-b-30\">\n            <div className=\"widget-header bg-light border-bottom\">\n                <div className=\"widget-header-title\">\n                    <div className=\"form-inline justify-content-between\">\n                        <div className=\"font-weight-600\">{incomeStatementRenderText[appContext.locale][\"Income Statement\"]}</div>    \n                        <div className=\"form-group\">\n                            <label className=\"ml-sm-5 px-1\">{incomeStatementRenderText[appContext.locale][\"From:\"]} </label>\n                            <input type=\"date\" className=\"form-control form-control-sm width-125\" value={startDate} onChange={event => handleChangeStartDate(event.target.value)} />\n                            <label className=\"ml-sm-5 px-1\">{incomeStatementRenderText[appContext.locale][\"to:\"]} </label>\n                            <input type=\"date\" className=\"form-control form-control-sm width-125\" value={endDate} onChange={event => handleChangeEndDate(event.target.value)} />\n                        </div> \n                    </div>\n                </div>\n            </div>\n            <div>\n                {loading? <div className=\"d-flex justify-content-center fa-3x py-3\"><i className=\"fas fa-circle-notch fa-spin\"></i></div> : \n                <div>\n                    <table className=\"table table-striped m-b-0\">\n                        <tbody>\n                            {!accountGroupBalances.filter(accountGroup => accountGroup.accountSubtypeId == revenueSubtypeId).length? null : \n                                <>\n                                <tr><td className=\"font-weight-600\">{incomeStatementRenderText[appContext.locale][\"Revenue\"]}</td></tr>\n                                    {accountGroupBalances.filter(accountGroup => accountGroup.accountSubtypeId == revenueSubtypeId).map(accountGroup => {\n                                        return(\n                                            <tr key={accountGroup.accountGroupId}><td className=\"d-flex justify-content-between p-l-30\"><div>{accountGroup.accountGroupName}</div><div>{numberAsCurrency(accountGroup.debitsMinusCredits * -1)}</div></td></tr>\n                                        )\n                                    })}\n                                    <tr><td className=\"d-flex justify-content-between p-l-30 font-weight-600\"><div className=\"p-l-30\">{incomeStatementRenderText[appContext.locale][\"Total revenue\"]}</div><div>{numberAsCurrency(totalRevenue)}</div></td></tr>\n                                    <tr><td>{/* empty row */}<div className=\"visibility-hidden\">spacer row</div></td></tr>\n                                </>\n                            }\n                            {!accountGroupBalances.filter(accountGroup => accountGroup.accountSubtypeId == costOfSalesSubtypeId).length? null : \n                                <>\n                                    <tr><td className=\"font-weight-600\">{incomeStatementRenderText[appContext.locale][\"Cost of sales\"]}</td></tr>\n                                    {accountGroupBalances.filter(accountGroup => accountGroup.accountSubtypeId == costOfSalesSubtypeId).map(accountGroup => {\n                                        return(\n                                            <tr key={accountGroup.accountGroupId}><td className=\"d-flex justify-content-between p-l-30\"><div>{accountGroup.accountGroupName}</div><div>{numberAsCurrency(accountGroup.debitsMinusCredits)}</div></td></tr>\n                                        )\n                                    })}\n                                    <tr><td className=\"d-flex justify-content-between p-l-30 font-weight-600\"><div className=\"p-l-30\">{incomeStatementRenderText[appContext.locale][\"Total cost of sales\"]}</div><div>{numberAsCurrency(totalCostOfSales)}</div></td></tr>\n                                    <tr><td>{/* empty row */}<div className=\"visibility-hidden\">spacer row</div></td></tr>\n                                </>\n                            }\n                            <tr><td className=\"d-flex justify-content-between font-weight-600\"><div>{incomeStatementRenderText[appContext.locale][\"Gross profit\"]}</div><div>{numberAsCurrency(grossProfit)}</div></td></tr>\n                            <tr><td>{/* empty row */}<div className=\"visibility-hidden\">spacer row</div></td></tr>\n                            <tr><td className=\"font-weight-600\">{incomeStatementRenderText[appContext.locale][\"Operating expenses\"]}</td></tr>\n                            {!rd? null : <tr><td className=\"d-flex justify-content-between p-l-30\"><div>{incomeStatementRenderText[appContext.locale][\"Research and development\"]}</div><div>{numberAsCurrency(rd)}</div></td></tr>}\n                            {!sga? null : <tr><td className=\"d-flex justify-content-between p-l-30\"><div>{incomeStatementRenderText[appContext.locale][\"Sales, general, and administration\"]}</div><div>{numberAsCurrency(sga)}</div></td></tr>}\n                            {!depreciation? null : <tr><td className=\"d-flex justify-content-between p-l-30\"><div>{incomeStatementRenderText[appContext.locale][\"Depreciation\"]}</div><div>{numberAsCurrency(depreciation)}</div></td></tr>}\n                            {!amortization? null : <tr><td className=\"d-flex justify-content-between p-l-30\"><div>{incomeStatementRenderText[appContext.locale][\"Amortization\"]}</div><div>{numberAsCurrency(amortization)}</div></td></tr>}\n                            <tr><td className=\"d-flex justify-content-between p-l-30 font-weight-600\"><div className=\"p-l-30\">{incomeStatementRenderText[appContext.locale][\"Total operating expenses\"]}</div><div>{numberAsCurrency(totalOperatingExpenses)}</div></td></tr>\n                            <tr><td>{/* empty row */}<div className=\"visibility-hidden\">spacer row</div></td></tr>\n                            <tr><td className=\"d-flex justify-content-between font-weight-600\"><div>{incomeStatementRenderText[appContext.locale][\"Operating income\"]}</div><div>{numberAsCurrency(operatingIncome)}</div></td></tr>\n                            <tr><td className=\"d-flex justify-content-between\"><div>{incomeStatementRenderText[appContext.locale][\"Other income/expense, net\"]}</div><div>{numberAsCurrency(netOtherIncomeExpense)}</div></td></tr>\n                            <tr><td className=\"d-flex justify-content-between font-weight-600\"><div>{incomeStatementRenderText[appContext.locale][\"Income before tax\"]}</div><div>{numberAsCurrency(incomeBeforeTax)}</div></td></tr>\n                            <tr><td className=\"d-flex justify-content-between\"><div>{incomeStatementRenderText[appContext.locale][\"Income tax\"]}</div><div>{numberAsCurrency(incomeTax)}</div></td></tr>\n                            <tr><td>{/* empty row */}<div className=\"visibility-hidden\">spacer row</div></td></tr>\n                            <tr><td className=\"d-flex justify-content-between font-weight-600\"><div>{incomeStatementRenderText[appContext.locale][\"Net income\"]}</div><div>{numberAsCurrency(netIncome)}</div></td></tr>\n                        </tbody>\n                    </table>\n                </div>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default IncomeStatementRender;","/Users/kyle/Easy_Ledger/front_end/src/components/sidebar/toggle-mobile-sidebar-button.jsx",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/login-v3-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/balance-sheet-render-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/report-type-list-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/income-statement-render-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/balance-sheet-report-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/income-statement-report-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/reports-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/journal-entry-view-mode-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/general-journal-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/journal-entry-edit-mode-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/table-of-journal-entries-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/journals-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/balance-summary-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/income-and-expense-summary-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/dashboard-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/chart-of-accounts-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/account-details-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/account-details-sidebar-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/sidebar-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/register-v3-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/settings/settings.js",["646","647"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport ToggleMobileSidebarButton from '../../components/sidebar/toggle-mobile-sidebar-button';\nimport Select from 'react-select';\nimport { PageSettings } from '../../config/page-settings';\nimport { settingsText } from '../../utils/i18n/settings-text';\nimport axios from 'axios';\nimport { API_BASE_URL, LOCALE_OPTIONS } from '../../utils/constants'\nfunction Settings() {\n    const appContext = React.useContext(PageSettings);\n    const [selectedLocale, setSelectedLocale] = React.useState(appContext.locale);\n\n    const handleChangeLocaleOption = (selectedOption) => {\n        setSelectedLocale(selectedOption.value);\n    }\n\n    const handleSaveButton = async () => {\n        let requestBody = {\n            locale: selectedLocale\n        }\n        await axios.patch(`${API_BASE_URL}/person/${appContext.personId}`, requestBody).then(response => {\n            console.log(response);\n        }).catch(console.log);\n        appContext.fetchUserInfo(appContext.personId);\n    }\n\n    return (\n        <div>\n            <ol className=\"breadcrumb float-xl-right\">\n                <li className=\"breadcrumb-item\"><Link to=\"/\">{settingsText[appContext.locale][\"Home\"]}</Link></li>\n                <li className=\"breadcrumb-item active\">{settingsText[appContext.locale][\"Settings\"]}</li>\n            </ol>\n            <h1 className=\"page-header\">\n                {settingsText[appContext.locale][\"Settings\"]}\n                <ToggleMobileSidebarButton className=\"d-md-none float-right \" />\n            </h1>\n            <div className=\"widget widget-rounded m-b-15\">\n                <div className=\"widget-header bg-light border-bottom\">\n                    <h4 className=\"widget-header-title\">{settingsText[appContext.locale][\"Personal Settings\"]}</h4>\n                </div>\n                <div className=\"px-3 py-3\">\n                    <div className=\"form-group row\">\n                        <label className=\"col-md-2 col-form-label\">\n                            {settingsText[appContext.locale][\"Language\"]}\n                        </label>\n                        <div className=\"col-md-4\">\n                            <Select\n                                options={LOCALE_OPTIONS}\n                                onChange={handleChangeLocaleOption}\n                                value={LOCALE_OPTIONS.find(localeOption => localeOption.value == selectedLocale)}\n                                menuPortalTarget={document.body}\n                                styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\n                                menuPlacement={'auto'}\n                            />\n                        </div>\n                    </div>\n                    <button className=\"btn btn-primary width-125\" onClick={handleSaveButton}>{settingsText[appContext.locale][\"Save\"]}</button>\n\n                </div>\n            </div>\n            {appContext.permissions.filter(permission => permission.permissionType.id >= 3).length == 0 ? null : //only show this widget if user administrates at least one organization\n                <div className=\"widget widget-rounded widget-list widget-list-rounded m-b-30\">\n                    <div className=\"widget-header bg-light border-bottom\">\n                        <h4 className=\"widget-header-title\">{settingsText[appContext.locale][\"Manage my EasyLedgers...\"]}</h4>\n                    </div>\n                    {appContext.permissions.map(permission => {\n                        return (\n                            <Link key={permission.id} to={`/manage-easyledger/${permission.organization.id}`} className=\"widget-list-item bg-white\">\n                                <div className=\"widget-list-content px-3\">\n                                    <div className=\"widget-list-title\">{permission.organization.name}</div>\n                                </div>\n                                <div className=\"m-r-10 widget-list-action text-right\">\n                                    <i className=\"fa fa-angle-right fa-lg text-muted\"></i>\n                                </div>\n                            </Link>\n                        )\n                    })}\n                </div>\n            }\n        </div>\n\n    )\n}\n\nexport default Settings;","/Users/kyle/Easy_Ledger/front_end/src/utils/i18n/settings-text.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/settings/manage-easyledger.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/settings/components/organization-roster.js",["648","649"],"import React from 'react';\nimport axios from 'axios';\nimport { PageSettings } from '../../../config/page-settings';\nimport { API_BASE_URL, FIRSTNAME_LASTNAME_LOCALES, PERMISSION_TYPE_OPTIONS } from '../../../utils/constants.js';\nimport { Link } from 'react-router-dom';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Alert } from 'reactstrap';\nimport Select from 'react-select';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { settingsText } from '../../../utils/i18n/settings-text';\n\n\nfunction OrganizationRoster(props) {\n    //required props: organizationId\n    //TODO: currently users may only edit and remove those with lower permissions, i.e. owners cannot edit their own permissions, and may not add others to owner permissions. maybe change this at some point.\n    const appContext = React.useContext(PageSettings);\n    const permissionTypeOptions = PERMISSION_TYPE_OPTIONS(appContext.locale);\n    const [loading, setLoading] = React.useState(true);\n    const [personInRosterDTOs, setPersonInRosterDTOs] = React.useState(null);\n    const [addAPersonModal, setAddAPersonModal] = React.useState(false);\n    const [editAPersonModal, setEditAPersonModal] = React.useState(false);\n    const [selectedPerson, setSelectedPerson] = React.useState(null);\n    const [emailInput, setEmailInput] = React.useState('');\n    const [selectedPermissionTypeOption, setSelectedPermissionTypeOption] = React.useState(permissionTypeOptions[0]);\n\n    const [removePersonAlert, setRemovePersonAlert] = React.useState(false);\n\n    const [emailNotFoundAlert, setEmailNotFoundAlert] = React.useState(false);\n\n\n    React.useEffect(() => {\n        fetchRoster(props.organizationId);\n    }, [props.organizationId])\n\n    const fetchRoster = (organizationId) => {\n        axios.get(`${API_BASE_URL}/organization/${organizationId}/person`).then(response => {\n            setPersonInRosterDTOs(response.data);\n            setLoading(false);\n        }).catch(console.log);\n    }\n\n    const toggleAddAPersonModal = () => {\n        setAddAPersonModal(!addAPersonModal);\n        setEmailInput('');\n        setSelectedPermissionTypeOption(permissionTypeOptions[0]);\n        setEmailNotFoundAlert(false);\n    }\n\n    const handleEditAPersonButton = (person) => {\n        setSelectedPerson(person);\n        setSelectedPermissionTypeOption(permissionTypeOptions.find(option => option.value == person.permissionTypeId));\n        setEditAPersonModal(true);\n    }\n    const toggleEditAPersonModal = () => {\n        setEditAPersonModal(!editAPersonModal);\n    }\n    const toggleRemovePersonAlert = () => {\n        setRemovePersonAlert(!removePersonAlert);\n    }\n    const handleSaveEditAPersonButton = () => {\n        let requestBody = {\n            permissionTypeId: selectedPermissionTypeOption.value\n        };\n        axios.patch(`${API_BASE_URL}/permission/${selectedPerson.permissionId}`, requestBody).then(response => {\n            console.log(response);\n            fetchRoster(props.organizationId);\n            toggleEditAPersonModal();\n        }).catch(console.log);\n    }\n    const handleRemoveAPersonButton = () => {\n        toggleEditAPersonModal();\n        toggleRemovePersonAlert();\n    }\n    const handleConfirmRemovePersonButton = () => {\n        axios.delete(`${API_BASE_URL}/permission/${selectedPerson.permissionId}`).then(response => {\n            console.log(response);\n            fetchRoster(props.organizationId);\n            toggleRemovePersonAlert();\n        })\n    }\n    \n\n    const handleAddAPersonButton = () => {\n        let payload = {\n            email: emailInput,\n            organizationId: props.organizationId,\n            permissionTypeId: selectedPermissionTypeOption.value\n        }\n        axios.post(`${API_BASE_URL}/organization/${props.organizationId}/permission`, payload).then(response => {\n            console.log(response);\n            fetchRoster(props.organizationId);\n            toggleAddAPersonModal();\n        }).catch(error => {\n            if (error.response) {\n                if (error.response.status === 404) {\n                    setEmailNotFoundAlert(true);\n                }\n            }\n            console.log(error);\n        })\n    }\n\n    const handleChangePermissionTypeOption = (selectedOption) => {\n        setSelectedPermissionTypeOption(selectedOption);\n    }\n\n    return (\n        <div className=\"widget widget-rounded mb-3\">\n            <div className=\"widget-header bg-light border-bottom\">\n                <h4 className=\"widget-header-title\">{\"People with access to \" + appContext.currentOrganizationName}</h4>\n                {appContext.currentPermissionTypeId >= 3? \n                    <div className=\"px-3\">\n                        <Link replace className=\"icon-link-text-muted\" to=\"#\" onClick={toggleAddAPersonModal}>\n                            <i className=\"fa fa-plus\"></i>\n                        </Link>\n                    </div> \n                : null}\n            </div>\n            <div className=\"overflow-auto px-2\" style={{ height: '300px' }}>\n                {loading ? <div className=\"d-flex justify-content-center fa-3x py-3\"><i className=\"fas fa-circle-notch fa-spin\"></i></div> :\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>{settingsText[appContext.locale][\"Name\"]}</th>\n                                <th>{settingsText[appContext.locale][\"Email\"]}</th>\n                                <th>{settingsText[appContext.locale][\"Permissions\"]}</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {personInRosterDTOs.map(person => {\n                                return (\n                                    <tr key={person.personId}>\n                                        <td>{FIRSTNAME_LASTNAME_LOCALES.includes(person.locale) ? person.firstName + \" \" + person.lastName : person.lastName + \" \" + person.firstName}</td>\n                                        <td>{person.email}</td>\n                                        <td>{person.permissionTypeName}</td>\n                                        <td>\n                                            <Link replace \n                                                className={\"icon-link-text-muted\" + (person.permissionTypeId < appContext.permissions.find(permission => permission.organization.id == props.organizationId).permissionType.id ? \"\" : \" visibility-hidden\")}\n                                                to=\"#\" onClick={() => handleEditAPersonButton(person)}>\n                                                <i className=\"fa fa-edit\"></i>\n                                            </Link>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n                }\n            </div>\n            <Modal isOpen={addAPersonModal} toggle={toggleAddAPersonModal} centered={true} size=\"lg\">\n                <ModalHeader> {settingsText[appContext.locale][\"Add user modal header\"](appContext.currentOrganizationName)} </ModalHeader>\n                <ModalBody>\n                    {emailNotFoundAlert ?\n                        <Alert color=\"danger\">\n                            {settingsText[appContext.locale][\"Could not find a user registered to this email.\"]}\n                        </Alert>\n                        : null}\n                    <form onSubmit={event => {event.preventDefault(); handleAddAPersonButton()}}>\n                        <div className=\"form-group row justify-content-center\">\n                            <label className=\"col-form-label col-lg-3\">\n                                {settingsText[appContext.locale][\"Add a user by email:\"]}\n                            </label>\n                            <div className=\"col-lg-7\">\n                                <input\n                                    className=\"form-control\"\n                                    value={emailInput}\n                                    onChange={event => {\n                                        setEmailInput(event.target.value);\n                                    }}\n                                />\n                            </div>\n                        </div>\n                    </form>\n                    <div className=\"form-group row justify-content-center\"> {/**React-select must exist outside of <form> if we want the form to be submittable with the enter key. */}\n                        <label className=\"col-form-label col-lg-3\">\n                            {settingsText[appContext.locale][\"Permissions for this user\"] + \":\"}\n                            </label>\n                        <div className=\"col-lg-7\">\n                            <Select\n                                options={permissionTypeOptions.filter(option => option.value < appContext.currentPermissionTypeId)}\n                                value={selectedPermissionTypeOption}\n                                isSearchable={true}\n                                onChange={handleChangePermissionTypeOption}\n                            />\n                        </div>\n                    </div>\n                </ModalBody>\n                <ModalFooter>\n                    <button\n                        className=\"btn btn-primary width-10ch\"\n                        onClick={handleAddAPersonButton}\n                    >\n                        {settingsText[appContext.locale][\"Add\"]}\n                    </button>\n                    <button\n                        className=\"btn btn-white width-10ch\"\n                        onClick={toggleAddAPersonModal}\n                    >\n                        {settingsText[appContext.locale][\"Cancel\"]}\n                    </button>\n                </ModalFooter>\n            </Modal>\n\n            \n            <Modal isOpen={editAPersonModal} toggle={toggleEditAPersonModal} centered={true} size=\"lg\">\n                <ModalHeader>{settingsText[appContext.locale][\"Edit User Privileges\"]} </ModalHeader>\n                <ModalBody>\n                    {selectedPerson?\n                    <div>\n                        <div className=\"form-group row justify-content-center\">\n                            <div className=\"col-lg-3\">\n                                {settingsText[appContext.locale][\"Name\"] + \":\"}\n                            </div>\n                            <div className=\"col-lg-6\">\n                                {FIRSTNAME_LASTNAME_LOCALES.includes(selectedPerson.locale)? selectedPerson.firstName + \" \" + selectedPerson.lastName : selectedPerson.lastName + \" \" + selectedPerson.firstName}\n                            </div>\n                        </div>\n                        <div className=\"form-group row justify-content-center\">\n                            <div className=\"col-lg-3\">\n                                {settingsText[appContext.locale][\"Email\"] + \":\"}\n                            </div>\n                            <div className=\"col-lg-6\">\n                                {selectedPerson.email}\n                            </div>\n                        </div>\n                        <div className=\"form-group row justify-content-center\"> {/**React-select must exist outside of <form> if we want the form to be submittable with the enter key. */}\n                            <label className=\"col-form-label col-lg-3\">\n                                {settingsText[appContext.locale][\"Permissions for this user\"] + \":\"}\n                            </label>\n                            <div className=\"col-lg-6\">\n                                <Select\n                                    options={permissionTypeOptions.filter(option => option.value < appContext.currentPermissionTypeId)}\n                                    value={selectedPermissionTypeOption}\n                                    isSearchable={true}\n                                    onChange={handleChangePermissionTypeOption}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    : <div className=\"d-flex justify-content-center fa-3x py-3\"><i className=\"fas fa-circle-notch fa-spin\"></i></div>}\n                </ModalBody>\n                <ModalFooter className=\"justify-content-between\">\n                        <div>\n                            <button className=\"btn btn-danger width-10ch\"\n                                onClick={handleRemoveAPersonButton}\n                            >\n                                {settingsText[appContext.locale][\"Remove\"]}\n                            </button>\n                        </div>\n                        <div>\n                            <button\n                                className=\"btn btn-primary width-10ch\"\n                                onClick={handleSaveEditAPersonButton}\n                            >\n                                {settingsText[appContext.locale][\"Save\"]}\n                            </button>\n                            <button\n                                className=\"btn btn-white width-10ch m-l-10\"\n                                onClick={toggleEditAPersonModal}\n                            >\n                                {settingsText[appContext.locale][\"Cancel\"]}\n                            </button>\n                        </div>\n                </ModalFooter>\n            </Modal>\n\n            {removePersonAlert ?\n                <SweetAlert danger showCancel\n                    confirmBtnText=\"Yes, remove this person!\"\n                    confirmBtnBsStyle=\"danger\"\n                    cancelBtnBsStyle=\"default\"\n                    cancelBtnText=\"Cancel\"\n                    title=\"Are you sure?\"\n                    onConfirm={handleConfirmRemovePersonButton}\n                    onCancel={toggleRemovePersonAlert}\n                >\n                    {settingsText[appContext.locale][\"Are you sure you want to remove this user?\"]}\n                </SweetAlert>\n                : null}\n        </div>\n\n    )\n}\n\nexport default OrganizationRoster;","/Users/kyle/Easy_Ledger/front_end/src/components/sidebar/create-a-new-organization.js",[],"/Users/kyle/Easy_Ledger/front_end/src/components/sidebar/new-organization-form.js",["650","651","652"],"import React from 'react';\nimport { PageSettings } from '../../config/page-settings';\nimport { API_BASE_URL, CURRENCY_OPTIONS } from '../../utils/constants';\nimport { sidebarText } from '../../utils/i18n/sidebar-text';\nimport Select from 'react-select';\nimport {useHistory} from 'react-router-dom';\nimport axios from 'axios';\n\nfunction NewOrganizationForm(props) {\n    const appContext = React.useContext(PageSettings);\n    const history = useHistory();\n    const currencyOptions = CURRENCY_OPTIONS(appContext.locale);\n    const [organizationNameInput, setOrganizationNameInput] = React.useState('');\n    const [selectedCurrency, setSelectedCurrency] = React.useState(appContext.currency);\n    const [isEnterprise, setIsEnterprise] = React.useState(false);\n\n    const handleChangeIsEnterprise = (event) => {\n        if (event.target.value === \"false\") {\n            setIsEnterprise(false);\n        } else {\n            setIsEnterprise(true);\n        }\n    }\n    const handleSaveButton = async () => {\n        let requestBody = {\n            name: organizationNameInput,\n            currency: selectedCurrency,\n            isEnterprise: isEnterprise\n        };\n        await axios.post(`${API_BASE_URL}/organization`, requestBody).then(response => {\n            console.log(response);\n            appContext.fetchUserInfo(appContext.personId);\n            history.push(\"/\");\n        }).catch(console.log);\n    }\n\n\n    return (\n        <div className=\"widget widget-rounded m-b-15\">\n            <div className=\"px-3 py-3\">\n                <div className=\"form-group row\">\n                    <label className=\"col-xl-3 col-form-label\">\n                        {sidebarText[appContext.locale][\"Enter a name for this EasyLedger\"] + \":\"}\n                    </label>\n                    <div className=\"col-xl-4\">\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value={organizationNameInput}\n                            onChange={event => setOrganizationNameInput(event.target.value)}\n                        />\n                    </div>\n                </div>\n                <div className=\"form-group row\">\n                    <label className=\"col-xl-3 col-form-label\">\n                        {sidebarText[appContext.locale][\"Select a currency for this EasyLedger\"] + \":\"}\n                    </label>\n                    <div className=\"col-xl-4\">\n                        <Select\n                            options={currencyOptions}\n                            onChange={selectedOption => setSelectedCurrency(selectedOption.value)}\n                            value={currencyOptions.find(currencyOption => currencyOption.value == selectedCurrency)}\n                            menuPortalTarget={document.body}\n                            styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\n                            menuPlacement={'auto'}\n\n                        />\n                    </div>\n                </div>\n                <div className=\"form-group row\">\n                    <label className=\"col-xl-3 col-form-label\">\n                        {sidebarText[appContext.locale][\"Create an EasyLedger for\"] + \":\"}\n                    </label>\n                    <div className=\"col-xl-4 p-t-10\">\n                        <div className=\"radio\">\n                            <input type=\"radio\" value={false} checked={isEnterprise == false} onChange={handleChangeIsEnterprise} />\n                            <label className=\"p-l-10\">{sidebarText[appContext.locale][\"Personal\"]}</label>\n                        </div>\n                        <div className=\"radio\">\n                            <input type=\"radio\" value={true} checked={isEnterprise == true} onChange={handleChangeIsEnterprise} />\n                            <label className=\"p-l-10\">{sidebarText[appContext.locale][\"Enterprise\"]}</label>\n                        </div>\n                    </div>\n                </div>\n                <button className=\"btn btn-primary\" onClick={handleSaveButton}>{sidebarText[appContext.locale][\"Create this EasyLedger\"]}</button>\n\n            </div>\n        </div>\n    )\n}\n\nexport default NewOrganizationForm;","/Users/kyle/Easy_Ledger/front_end/src/pages/journals/journals.js",[],"/Users/kyle/Easy_Ledger/front_end/src/pages/journals/enterprise/general-journal.jsx",["653","654"],"import React from 'react';\nimport { API_BASE_URL } from '../../../utils/constants.js';\nimport axios from 'axios';\nimport { PageSettings } from '../../../config/page-settings';\nimport TableOfJournalEntries from './table-of-journal-entries';\nimport {generalJournalText} from '../../../utils/i18n/general-journal-text.js';\n\n\nfunction GeneralJournal() {\n\n  const appContext = React.useContext(PageSettings);\n  \n  const columns = React.useMemo(\n    () => [ // accessor is the \"key\" in the data},\n      { Header: generalJournalText[appContext.locale][\"Date\"], accessor: 'journalEntryDate', width:\"20%\"},\n      { Header: generalJournalText[appContext.locale][\"Description\"], accessor: 'description', width:\"50%\"},\n      { Header: generalJournalText[appContext.locale][\"Debit\"], accessor: 'debitAmount', width:\"15%\"},\n      { Header: generalJournalText[appContext.locale][\"Credit\"], accessor: 'creditAmount', width: \"15%\"},\n    ],\n    []\n  )\n\n  // We'll start our table without any data\n  const [data, setData] = React.useState([])\n  const [pageCount, setPageCount] = React.useState(0)\n  const [elementCount, setElementCount] = React.useState(0)\n\n  const fetchData = React.useCallback(({ pageSize, pageIndex }) => {\n    // This will get called when the table needs new data\n        \n    //fetch data from Easy Ledger API\n    const url = `${API_BASE_URL}/organization/${appContext.currentOrganizationId}/journalEntryViewModel/?page=${pageIndex}&size=${pageSize}`;\n    axios.get(url).then(response => {\n        var dataContent = response.data.content;\n        setData(dataContent);\n        setPageCount(response.data.totalPages);\n        setElementCount(response.data.totalElements);\n      })\n      .catch(console.log);\n  }, [API_BASE_URL, appContext.currentOrganizationId])\n  \n  return (\n    <div >\n      <TableOfJournalEntries\n        columns={columns}\n        data={data}\n        fetchData={fetchData}\n        pageCount={pageCount}\n        elementCount={elementCount}\n        tableTitle={generalJournalText[appContext.locale][\"Accounting Entries\"]}\n        hasAddEntryButton={true}\n      />\n    </div>\n  )\n}\n\n\n\n\nexport default GeneralJournal","/Users/kyle/Easy_Ledger/front_end/src/pages/journals/enterprise/table-of-journal-entries.jsx",["655","656","657","658","659","660","661","662","663","664"],"import React from 'react'\nimport { useTable, usePagination } from 'react-table'\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport {API_BASE_URL} from '../../../utils/constants.js';\nimport JournalEntryViewMode from './journal-entry-view-mode';\nimport JournalEntryEditMode from './journal-entry-edit-mode';\nimport { PageSettings } from '../../../config/page-settings.js';\nimport {tableOfJournalEntriesText} from '../../../utils/i18n/table-of-journal-entries-text.js';\n\n//Generates a table with react-table 7 using pagination\n\n// Let's add a fetchData method to our Table component that will be used to fetch\n// new data when pagination state changes\n// We can also add a loading state to let our table know it's loading new data\nfunction TableOfJournalEntries({\n  columns,\n  data,\n  fetchData,\n  pageCount: controlledPageCount,\n  elementCount,\n  tableTitle,\n  hasAddEntryButton\n}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    // Get the state from the instance\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0, pageSize: 10 }, // Pass our hoisted table state\n      manualPagination: true, // Tell the usePagination\n      // hook that we'll handle our own data fetching\n      // This means we'll also have to provide our own\n      // pageCount.\n      pageCount: controlledPageCount,\n    },\n    usePagination\n  )\n  \n  const appContext = React.useContext(PageSettings);\n\n  const [journalEntryExpanded, setJournalEntryExpanded] = React.useState(false); //Whether or not the modal  is shown\n  const toggleJournalEntryExpanded = () => setJournalEntryExpanded(!journalEntryExpanded); //Toggles modal on or off\n  const expandJournalEntry = i => { //fetches a journalEntry from the API and toggles the modal on\n    fetchJournalEntry(i);\n    toggleJournalEntryExpanded();\n  }\n  const [editMode, setEditMode] = React.useState(false); //Toggle editmode for an expanded entry\n  const [createMode, setCreateMode] = React.useState(false);\n  const toggleEditMode = () => setEditMode(!editMode);\n\n\n  const [journalEntryId, setJournalEntryId] = React.useState(null);\n  const [journalEntryDescription, setJournalEntryDescription] = React.useState('');\n  const [journalEntryDate, setJournalEntryDate] = React.useState('');\n  const [lineItemData, setLineItemData] = React.useState([]); //Data to be passed in to lineItemTable\n  const [accountOptions, setAccountOptions] = React.useState([]);\n\n  const [alertMessages, setAlertMessages] = React.useState([]);\n\n  const fetchJournalEntry = i => {\n    const url = `${API_BASE_URL}/journalEntry/${i}`;\n    axios.get(url).then(response => {\n      var journalEntry = response.data;\n      var formattedLineItems = [];\n      journalEntry.lineItems.forEach(lineItem => {\n        var formattedLineItem = {\n          lineItemId: lineItem.lineItemId,\n          accountName: lineItem.accountName,\n          accountId: lineItem.accountId,\n          description: lineItem.description,\n          debitAmount: (lineItem.isCredit ? null : lineItem.amount),\n          creditAmount: (lineItem.isCredit ? lineItem.amount : null)\n        };\n        formattedLineItems.push(formattedLineItem);\n      })\n      formattedLineItems.sort((a, b) => (a.lineItemId > b.lineItemId) ? 1 : -1) //sort by LineItemId to preserve insertion order\n      setLineItemData(formattedLineItems);\n      setJournalEntryId(journalEntry.journalEntryId);\n      setJournalEntryDescription(journalEntry.description);\n      setJournalEntryDate(journalEntry.journalEntryDate);\n      setAlertMessages([]); //reset alert messages every time an entry is fetched to refresh the page\n    })\n      .catch(console.log);\n  }\n  const openEditorForNewEntry = () => {\n    setJournalEntryId(null);\n    let today = new Date();\n    setJournalEntryDate(today.toISOString().split('T')[0]);\n    setJournalEntryDescription('');\n    setLineItemData([{\n      lineItemId: \"\",\n      accountName: \"\",\n      accountId: \"\",\n      description: \"\",\n      debitAmount: 0,\n      creditAmount: 0\n    }, \n    {\n      lineItemId: \"\",\n      accountName: \"\",\n      accountId: \"\",\n      description: \"\",\n      debitAmount: 0,\n      creditAmount: 0\n    }])\n    toggleEditMode();\n    setCreateMode(true);\n    toggleJournalEntryExpanded();\n  }\n\n  const cancelCreateMode = () => {\n    setCreateMode(false);\n    setAlertMessages([]);\n    toggleJournalEntryExpanded();\n  }\n\n  // Listen for changes in pagination and use the state to fetch our new data\n  React.useEffect(() => {\n    fetchData({ pageIndex, pageSize });\n  }, [fetchData, pageIndex, pageSize])\n  \n  //initially retrieve categories and accounts from API\n  React.useEffect(() => {\n    axios.get(`${API_BASE_URL}/organization/${appContext.currentOrganizationId}/account`).then(response => {\n      const formattedAccounts = response.data.map(account => {\n        return({\n          value: account.accountId,\n          label: account.accountName,\n          object: account\n        })\n      });\n      setAccountOptions(formattedAccounts);\n    })\n      .catch(console.log);\n  }, [API_BASE_URL, appContext.currentOrganizationId])\n\n  //refresh lists of accounts and categories, should be called every time the 'edit' button for an entry is clicked\n  const refreshAccounts = () => {\n    axios.get(`${API_BASE_URL}/organization/${appContext.currentOrganizationId}/account`).then(response => {\n      const formattedAccounts = response.data.map(account => {\n        return({\n          value: account.accountId,\n          label: account.accountName,\n          object: account\n        })\n      });\n      setAccountOptions(formattedAccounts);\n    })\n      .catch(console.log);\n  }\n\n  //format table cell value based on column name and locale\n  const formatCellValue = cell => {\n    let columnId = cell.column.id;\n    switch (columnId) {\n      case \"creditAmount\":\n      case \"debitAmount\":\n        if (cell.value == 0) {\n          return '';\n        }\n        return (new Intl.NumberFormat(appContext.locale, { style: 'currency', currency: appContext.currency }).format(cell.value));\n      default:\n        return (cell.value);\n    }\n  }\n\n  const checkEntryForValidationErrors = () => {\n    let errorMessages = [];\n    if (!journalEntryDate) {\n      errorMessages.push(tableOfJournalEntriesText[appContext.locale][\"Please choose a date for this entry.\"]);\n    }\n    if (!journalEntryDescription) {\n      errorMessages.push(tableOfJournalEntriesText[appContext.locale][\"Please provide a description for this entry.\"]);\n    }\n\n    let debitSum = 0;\n    let creditSum = 0;\n    let missingAmount = false;\n    let missingAccount = false;\n    lineItemData.forEach(lineItem => { // check for missing fields within lineItems, and sum debits and credits.\n      if (!lineItem.creditAmount && !lineItem.debitAmount) { \n        missingAmount = true;\n      }\n      if (!lineItem.accountId) {\n        missingAccount = true;\n      }\n      \n      // sum debits and credits\n      if (lineItem.debitAmount) {\n        debitSum += lineItem.debitAmount;\n      }\n      if (lineItem.creditAmount) {\n        creditSum += lineItem.creditAmount;\n      }\n    })\n    //move missing description and missing amount error messages out of the loop to avoid duplicate messages\n    if (missingAmount) {\n      errorMessages.push(tableOfJournalEntriesText[appContext.locale][\"Line-items must have either a debit or credit.\"]);\n    }\n    if (missingAccount) {\n      errorMessages.push(tableOfJournalEntriesText[appContext.locale][\"Line-items must be assigned to an account.\"]);\n    }\n    if (debitSum.toFixed(2) !== creditSum.toFixed(2)) {\n      errorMessages.push(tableOfJournalEntriesText[appContext.locale][\"Debits and Credits must balance.\"])\n    }\n    setAlertMessages(errorMessages);\n    return errorMessages;\n  }\n\n  //Returns a POSTable/PUTable journalEntry created from this function's state POSTable entries have null journalEntryId, otherwise they should be PUT instead. \n  //Before calling this function please check for validity of the entry by making sure checkEntryForValidationErrors().length == 0\n  const formatJournalEntryToSendToServer = () => {\n    let lineItems = lineItemData.map(lineItem => {\n      return {\n        accountId: lineItem.accountId,\n        amount: (lineItem.debitAmount ? lineItem.debitAmount : lineItem.creditAmount),\n        description: lineItem.description,\n        isCredit: (lineItem.creditAmount ? true : false)\n      }\n    });\n    return {\n      journalEntryId : journalEntryId,\n      journalEntryDate: journalEntryDate,\n      description: journalEntryDescription,\n      personId: appContext.personId,\n      organizationId: appContext.currentOrganizationId,\n      lineItems: lineItems\n    }\n  }\n\n  const postJournalEntry = (data) => {\n    console.log(data);\n    axios.post(`${API_BASE_URL}/journalEntry`, data)\n      .then(response => {\n        fetchData({pageIndex, pageSize});\n        fetchJournalEntry(response.data.journalEntryId);\n        setCreateMode(false);\n        toggleEditMode();\n      }).catch(console.log);\n  }\n\n  const putJournalEntry = (id, data) => {\n    axios.put(`${API_BASE_URL}/journalEntry/${id}`, data)\n      .then(response => {\n        console.log(response);\n        fetchData({pageIndex, pageSize});\n        fetchJournalEntry(id);\n        toggleEditMode();\n      }).catch(console.log);\n  }\n\n  const handleCopyJournalEntryButton = () => {\n      let today = new Date();\n      setJournalEntryDate(today.toISOString().split('T')[0]);\n      toggleEditMode();\n      setCreateMode(true);\n      setJournalEntryId(null); //must set journalEntryId to null, otherwise program will edit the original journal entry instead of posting a copy to the server. Server requires journalEntryId to be null for POST requests, so we cannot check for createMode=true to determine PUT/POST instead.\n    }\n\n  const handleSaveJournalEntryButton = () => {\n    if (checkEntryForValidationErrors().length === 0) {\n      let formattedEntry = formatJournalEntryToSendToServer();\n      if (journalEntryId) {\n        putJournalEntry(journalEntryId, formattedEntry);\n      } else {\n        postJournalEntry(formattedEntry);\n      }\n    }\n  }\n  const handleDeleteJournalEntryButton = (id) => {\n    axios.delete(`${API_BASE_URL}/journalEntry/${id}`)\n      .then(response => {\n        console.log(response)\n        fetchData({pageIndex, pageSize});\n        toggleEditMode();\n        toggleJournalEntryExpanded();\n    });\n  }\n\n  const handleExitJournalEntryModal = () => {\n    setCreateMode(false);\n    setEditMode(false);\n    setAlertMessages([]);\n    toggleJournalEntryExpanded();\n  }\n\n  // Render the UI for your table\n  return (\n    <>\n      <div className=\"widget widget-rounded m-b-30\">\n        <div className=\"widget-header bg-light\">\n          <h4 className=\"widget-header-title d-flex justify-content-between \">\n            <div className=\"align-self-center\">{tableTitle}</div>\n            <div>\n              {hasAddEntryButton ? \n                <button className=\"btn btn-sm btn-primary align-self-center\" onClick={() => openEditorForNewEntry()}>\n                  <i className=\"ion ion-md-add fa-fw fa-lg\"></i>{tableOfJournalEntriesText[appContext.locale][\"Add an entry\"]}\n                </button> : null}\n            </div>\n\n          </h4>\n     \n        </div>\n        <div className=\"table-responsive bg-white border-top\">\n          <table className=\"table table-hover m-b-0 text-inverse\" {...getTableProps()}>\n            <thead>\n              {headerGroups.map(headerGroup => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                  {headerGroup.headers.map(column => (\n                    <th style={{width: column.width}} className={column.id == \"debitAmount\" || column.id == \"creditAmount\" ? \"text-right\" : \"\"} {...column.getHeaderProps()}>\n                      {column.render('Header')}\n                      <span>\n                        {column.isSorted\n                          ? column.isSortedDesc\n                            ? ' 🔽'\n                            : ' 🔼'\n                          : ''}\n                      </span>\n                    </th>\n\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {page.map((row, i) => {\n                prepareRow(row)\n                return (\n                  <tr className=\"cursor-pointer\" onClick={() => expandJournalEntry(data[i].journalEntryId)} {...row.getRowProps()}>{/* entry is represented as a clickable row that opens a modal when clicked*/}\n                    {row.cells.map(cell => {\n                      return <td className={cell.column.id == \"debitAmount\" || cell.column.id == \"creditAmount\" ? \"text-right\" : \"\"} {...cell.getCellProps()}> {formatCellValue(cell)} </td>\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        </div>\n        <div className=\"d-flex justify-content-between px-1 py-2 border-top bg-light\" >\n          <span style={{ width: \"25ch\" }}>\n            <ul className=\"pager align-self-center m-t-0 m-b-0\">\n              <li className={canPreviousPage ? \"previous\" : \"previous disabled\"}>\n                {canPreviousPage ? <Link onClick={() => previousPage()} to=\"/journals\">&larr; {tableOfJournalEntriesText[appContext.locale][\"Newer\"]}</Link> : null}\n              </li>\n            </ul>\n          </span>\n          <span className=\"align-self-center\">\n            Showing {((pageIndex * pageSize) + 1) + \"-\" + ((pageIndex * pageSize) + page.length)} of {elementCount}{' '}\n                      results\n          </span>{/**TODO replace with page selector */}\n          <span>\n            <ul className=\"pager align-self-center m-t-0 m-b-0\" style={{ width: \"25ch\" }}>\n              <li className={canNextPage ? \"next\" : \"next disabled\"}>\n                {canNextPage ? <Link onClick={() => nextPage()} to=\"/journals\">{tableOfJournalEntriesText[appContext.locale][\"Older\"]} &rarr;</Link> : null}\n              </li> \n            </ul>\n          </span>\n        </div>\n      </div>\n      {/* Modal that opens when a row in the table is clicked */}\n      <Modal\n        isOpen={journalEntryExpanded}\n        toggle={handleExitJournalEntryModal}\n        size=\"lg\" style={{ maxWidth: '1600px', width: '80%', margin: 'auto' }}\n        centered={true}\n      >\n        <ModalHeader style={{backgroundColor: \"#e4e4e4\"}}>{tableOfJournalEntriesText[appContext.locale][\"Journal Entry\"]}</ModalHeader>\n        <ModalBody className=\"bg-light\">\n          {editMode ?\n            <JournalEntryEditMode\n              data={lineItemData} setLineItemData={setLineItemData}\n              journalEntryDate={journalEntryDate} setJournalEntryDate={setJournalEntryDate}\n              journalEntryDescription={journalEntryDescription} setJournalEntryDescription={setJournalEntryDescription}\n              accountOptions={accountOptions}\n              alertMessages={alertMessages}\n              handleSaveJournalEntryButton={handleSaveJournalEntryButton}>\n            </JournalEntryEditMode> :\n            <JournalEntryViewMode\n              data={lineItemData}\n              journalEntryDate={journalEntryDate}\n              journalEntryDescription={journalEntryDescription}\n            >\n            </JournalEntryViewMode>\n          }\n        </ModalBody>\n        <ModalFooter className=\"justify-content-between\" style={{ backgroundColor: \"#e4e4e4\" }}>\n          {editMode ?\n            <>\n              <div>\n                {createMode ? null : \n                <button \n                  className=\"btn btn-red width-10ch\" \n                  onClick={() => handleDeleteJournalEntryButton(journalEntryId)}>{tableOfJournalEntriesText[appContext.locale][\"Delete\"]}</button>}\n              </div>\n              <div>\n                <button className=\"btn btn-primary width-10ch\"\n                  onClick={() => handleSaveJournalEntryButton()}>\n                  {tableOfJournalEntriesText[appContext.locale][\"Save\"]}</button>\n                <button\n                  className=\"btn btn-white m-l-10 width-10ch\"\n                  onClick={() => {\n                    createMode ? cancelCreateMode() : fetchJournalEntry(journalEntryId);\n                    toggleEditMode();\n                  }}>\n                  {tableOfJournalEntriesText[appContext.locale][\"Cancel\"]}</button>\n              </div>\n            </> :\n            <>\n              <div>{/*empty div to push the other two buttons to the right*/}</div>\n              <div>\n                <button className=\"btn btn-info width-10ch\" onClick={() => {handleCopyJournalEntryButton()}}>{tableOfJournalEntriesText[appContext.locale][\"Copy\"]}</button>\n                <button className=\"btn btn-primary m-l-10 width-10ch\" onClick={() => {toggleEditMode(); refreshAccounts()}}>{tableOfJournalEntriesText[appContext.locale][\"Edit\"]}</button>\n                <button className=\"btn btn-white m-l-10 width-10ch\" onClick={() => toggleJournalEntryExpanded()}>{tableOfJournalEntriesText[appContext.locale][\"Close\"]}</button>\n              </div>\n            </>\n          }\n        </ModalFooter>\n      </Modal>\n    </>\n  )\n}\n\nexport default TableOfJournalEntries\n\n","/Users/kyle/Easy_Ledger/front_end/src/pages/journals/enterprise/journal-entry-view-mode.jsx",["665","666","667","668","669"],"import React from 'react';\nimport { useTable } from 'react-table';\nimport { PageSettings } from '../../../config/page-settings';\nimport {journalEntryViewModeText} from '../../../utils/i18n/journal-entry-view-mode-text.js'\n\nfunction JournalEntryViewMode({ data, journalEntryDescription, journalEntryDate}) {\n  const appContext = React.useContext(PageSettings);\n  const columns = React.useMemo(\n    () => [ // accessor is the \"key\" in the data},\n      { Header: journalEntryViewModeText[appContext.locale]['Memo'], accessor: 'description', width:'50%'},\n      { Header: journalEntryViewModeText[appContext.locale]['Account'], accessor: 'accountName', width:'24%'},\n      { Header: journalEntryViewModeText[appContext.locale]['Debit'], accessor: 'debitAmount', width:'13%'},\n      { Header: journalEntryViewModeText[appContext.locale]['Credit'], accessor: 'creditAmount', width:'13%'},\n    ],\n    []\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data\n    }\n  )\n\n  const sumAmountsInColumn = columnName => {\n    let sum = 0;\n    data.forEach(row => {\n        sum += row[columnName];\n    });\n    if (isNaN(sum)) {\n        return 0\n    } else {\n        return sum;\n    }\n  }\n\n  const formatCell = cell => {\n    let columnId = cell.column.id;\n    switch (columnId) {\n      case \"debitAmount\":\n      case \"creditAmount\":\n        if (cell.value) {\n          return (new Intl.NumberFormat(appContext.locale, { style: 'currency', currency: appContext.currency }).format(cell.value));\n        } else {\n          return null;\n        }\n      default:\n        return cell.value;\n    }\n  }\n\n  return (\n    <>\n      <div className=\"row m-b-10\">\n        <div className=\"col-md-1\"><strong>{journalEntryViewModeText[appContext.locale][\"Date\"]}</strong></div> <div className=\"col-md-11\">{journalEntryDate}</div>\n      </div>\n      <div className=\"row m-b-10\">\n        <div className=\"col-md-1\"><strong>{journalEntryViewModeText[appContext.locale][\"Description\"]}</strong></div> <div className=\"col-md-11\">{journalEntryDescription}</div>\n      </div>\n      <br></br>\n      \n      <div className=\"table-responsive\">\n      <table className=\"table\"{...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                // Add the sorting props to control sorting. For this example\n                // we can add them into the header props\n                <th {...column.getHeaderProps()} style={{width: column.width}} className={column.id == \"debitAmount\" || column.id == \"creditAmount\" ? \"text-right\" : \"\"}>\n                  {column.render('Header')}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map(\n            (row, i) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map(cell => {\n                    return (\n                      <td className={cell.column.id == \"debitAmount\" || cell.column.id == \"creditAmount\" ? \"text-right\" : \"\"} {...cell.getCellProps()}>{formatCell(cell)}</td>\n                    )\n                  })}\n                </tr>\n              )}\n          )}\n        </tbody>\n        <tfoot>\n          <tr>\n            <td>{journalEntryViewModeText[appContext.locale][\"Total\"]}</td>\n            <td></td>\n            <td className=\"text-right\">\n              {new Intl.NumberFormat(appContext.locale, { style: 'currency', currency: appContext.currency }).format(sumAmountsInColumn(\"debitAmount\"))}\n            </td>\n            <td className=\"text-right\">\n              {new Intl.NumberFormat(appContext.locale, { style: 'currency', currency: appContext.currency }).format(sumAmountsInColumn(\"creditAmount\"))}\n            </td>\n          </tr>\n        </tfoot>\n      </table>\n      </div>\n    </>\n  )\n}\n\nexport default JournalEntryViewMode\n","/Users/kyle/Easy_Ledger/front_end/src/pages/journals/enterprise/journal-entry-edit-mode.jsx",["670","671"],"import React from 'react';\nimport { useTable } from 'react-table';\nimport { Alert } from 'reactstrap';\nimport { PageSettings } from '../../../config/page-settings';\nimport Select from 'react-select';\nimport {journalEntryEditModeText} from '../../../utils/i18n/journal-entry-edit-mode-text';\n\nfunction JournalEntryEditMode({\n    data, setLineItemData,\n    journalEntryDate, setJournalEntryDate,\n    journalEntryDescription, setJournalEntryDescription,\n    accountOptions,\n    alertMessages,\n    handleSaveJournalEntryButton\n}) {\n    const appContext = React.useContext(PageSettings);\n\n    const columns = React.useMemo(\n        () => [ // accessor is the \"key\" in the data},\n            { Header: journalEntryEditModeText[appContext.locale]['Memo'], accessor: 'description', width:'50%', minWidth:\"9em\" },\n            { Header: journalEntryEditModeText[appContext.locale]['Account'], accessor: 'accountName', width:'20%', minWidth:\"6em\" },\n            { Header: journalEntryEditModeText[appContext.locale]['Debit'], accessor: 'debitAmount', width:'13%', minWidth:\"6em\" },\n            { Header: journalEntryEditModeText[appContext.locale]['Credit'], accessor: 'creditAmount', width:'13%', minWidth:\"6em\" },\n        ],\n        []\n    )\n\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n    } = useTable(\n        {\n            columns,\n            data\n        }\n    )\n    \n    const returnFormByColumnType = cell => {\n        const columnId = cell.column.id;\n        switch (columnId) {\n            case \"description\":\n                return(\n                    <form onSubmit={event => {event.preventDefault(); handleSaveJournalEntryButton()}}> \n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value={cell.value ? cell.value : ''}\n                            onChange={event => {\n                                let updatedLineItemData = data.slice();\n                                updatedLineItemData[cell.row.index].description = event.target.value;\n                                setLineItemData(updatedLineItemData);\n                            }}\n                        />\n                    </form>\n                )\n            case \"debitAmount\":\n                return(\n                    <form onSubmit={event => {event.preventDefault(); handleSaveJournalEntryButton()}}> \n                        <input\n                            type=\"number\"\n                            className=\"form-control\"\n                            value={cell.value ? cell.value : ''}\n                            step=\"any\"\n                            onChange={event => {\n                                let updatedLineItemData = data.slice();\n                                updatedLineItemData[cell.row.index].debitAmount = parseFloat(event.target.value);\n                                updatedLineItemData[cell.row.index].creditAmount = null;\n                                setLineItemData(updatedLineItemData);\n                            }}\n                        />\n                    </form>\n                )\n            case \"creditAmount\":\n                return(\n                    <form onSubmit={event => {event.preventDefault(); handleSaveJournalEntryButton()}}> \n                        <input\n                            type=\"number\"\n                            className=\"form-control\"\n                            value={cell.value ? cell.value : ''}\n                            step=\"any\"\n                            onChange={event => {\n                                let updatedLineItemData = data.slice();\n                                updatedLineItemData[cell.row.index].creditAmount = parseFloat(event.target.value);\n                                updatedLineItemData[cell.row.index].debitAmount = null;\n                                setLineItemData(updatedLineItemData);\n                            }}\n                        />\n                    </form>\n                )\n            case \"accountName\": //Select component must exist outside of <form>. This way, form can be submitted with enter key. Forms unfortunately cannot be submitted with enter key when Select component is focused.\n                return( \n                        <Select\n                                    options={accountOptions}\n                                    value={accountOptions.find(accountOption => accountOption.object.accountId == data[cell.row.index].accountId)}\n                                    isSearchable={true}\n                                    menuPortalTarget={document.body}\n                                    menuShouldScrollIntoView={false}\n                                    styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\n                                    menuPlacement={'auto'}\n                                    onChange={(selectedOption) => {\n                                        let updatedLineItemData = data.slice();\n                                        updatedLineItemData[cell.row.index].accountId = selectedOption.object.accountId;\n                                        updatedLineItemData[cell.row.index].accountName = selectedOption.object.accountName;\n                                        setLineItemData(updatedLineItemData);\n                                    }}\n                        />\n\n                )\n            default:\n                return (cell.value);\n        }\n    }\n\n    const addEmptyLineItem = () => {\n        let updatedLineItemData = data.slice();\n        updatedLineItemData.push({\n            lineItemId: \"\",\n            accountName: \"\",\n            accountId: \"\",\n            description: \"\",\n            debitAmount: 0,\n            creditAmount: 0,\n        })\n        setLineItemData(updatedLineItemData);\n    }\n\n    const sumAmountsInColumn = columnName => {\n        let sum = 0;\n        data.forEach(row => {\n            sum += row[columnName];\n        });\n        if (isNaN(sum)) {\n            return 0\n        } else {\n            return sum;\n        }\n    }\n    \n    const removeRow = i => {\n        let updatedLineItemData = data.slice();\n        updatedLineItemData.splice(i, 1);\n        setLineItemData(updatedLineItemData);\n    }\n\n    const handleCopyDescriptionToLineItemsButton = () => {\n        let updatedLineItemData = data.slice();\n        updatedLineItemData.forEach(lineItem => lineItem.description = journalEntryDescription);\n        setLineItemData(updatedLineItemData);\n    }\n\n    return (\n        <>\n            { alertMessages.length ? \n                <div>\n                    <Alert color=\"danger\" className=\"m-b-15\" style={{borderStyle: \"solid\", borderColor:\"FireBrick\", borderWidth: \"1px\"}}>\n                        <div className=\"d-flex justify-content-center\">\n                            <ul className=\"my-0\">\n                                {alertMessages.map((alertMessage, i) => (\n                                    <li key={i}>{alertMessage}</li>\n                                ))}\n                            </ul>\n                        </div>\n                    </Alert>\n                </div> : null\n            }\n            <div className=\"row m-b-10\">\n                <div className=\"col-xl-1\"><strong>{journalEntryEditModeText[appContext.locale][\"Date\"]}</strong></div> \n                <div className=\"col-xl-2\">\n                    <input \n                        type=\"date\" \n                        className=\"form-control\"\n                        value={journalEntryDate} \n                        onChange={event => setJournalEntryDate(event.target.value)}/>\n                    </div>\n            </div>\n            <div className=\"row m-b-10\">\n                <div className=\"col-xl-1\"><strong>{journalEntryEditModeText[appContext.locale][\"Description\"]}</strong></div> \n                <div className=\"col-xl-8\">\n                    <input \n                        type=\"text\" \n                        className=\"form-control\"\n                        value={journalEntryDescription} \n                        onChange={event => setJournalEntryDescription(event.target.value)}/>\n                </div>\n                <button className=\"btn btn-light border border-rounded m-x-10 my-3 my-xl-0\" onClick={handleCopyDescriptionToLineItemsButton}>\n                    {journalEntryEditModeText[appContext.locale][\"Copy description to line items\"]}\n                </button>\n            </div>\n            <br/>\n\n            <div className=\"table-responsive\">\n                <table className=\"table\"{...getTableProps()}>\n                    <thead>\n                        {headerGroups.map(headerGroup => (\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n                                {headerGroup.headers.map(column => (\n                                    // Add the sorting props to control sorting. For this example\n                                    // we can add them into the header props\n                                    <th {...column.getHeaderProps()} style={{width: column.width, minWidth: column.minWidth}}>\n                                        {column.render('Header')}\n                                    </th>\n                                ))}\n                                <th style={{width: \"4%\"}}></th>\n                            </tr>\n                        ))}\n                    </thead>\n                    <tbody {...getTableBodyProps()}>\n                        {rows.map(\n                            (row, i) => {\n                                prepareRow(row);\n                                return (\n                                    <tr {...row.getRowProps()}>\n                                        {row.cells.map(cell => {\n                                            return (\n                                                <td {...cell.getCellProps()}>\n                                                    {returnFormByColumnType(cell)}\n                                                </td>\n                                            )\n                                        })}\n                                        <td>\n                                            <button className=\"btn btn-lg btn-icon btn-light\" onClick={() => removeRow(i)}>\n                                                <i className=\"ion ion-md-close fa-fw fa-lg\"></i>\n                                            </button>\n                                        </td>\n                                    </tr>\n                                )\n                            }\n                        )}\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td>{journalEntryEditModeText[appContext.locale][\"Total\"]}</td>\n                            <td></td>\n                            <td>{new Intl.NumberFormat(appContext.locale, { style: 'currency', currency: appContext.currency }).format(sumAmountsInColumn(\"debitAmount\"))}</td>\n                            <td>{new Intl.NumberFormat(appContext.locale, { style: 'currency', currency: appContext.currency }).format(sumAmountsInColumn(\"creditAmount\"))}</td>\n                            <td></td>\n                        </tr>\n                    </tfoot>\n                </table>\n                <button className=\"btn btn-light btn-block row\" style={{margin:\"auto\", padding:\"1em\", borderStyle:\"solid\", borderColor:\"LightGray\", borderWidth:\"1px\"}} onClick={() => addEmptyLineItem()}>\n                    <i className=\"ion ion-md-add fa-fw fa-lg\"></i>{journalEntryEditModeText[appContext.locale][\"Add a Line Item\"]}\n                </button>\n            </div>\n        </>\n    )\n}\n\nexport default JournalEntryEditMode\n","/Users/kyle/Easy_Ledger/front_end/src/pages/accounts/accounts.js",["672","673","674","675","676","677","678","679","680","681"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { Alert, Modal, ModalHeader, ModalBody, ModalFooter, TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';\nimport { API_BASE_URL } from '../../utils/constants.js';\nimport { PageSettings } from '../../config/page-settings.js';\nimport Select from 'react-select';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { chartOfAccountsText } from '../../utils/i18n/chart-of-accounts-text.js';\nimport ToggleMobileSidebarButton from '../../components/sidebar/toggle-mobile-sidebar-button';\n\n\n\nclass Accounts extends React.Component {\n    /** Renders a Chart of Accounts. This component uses pills tabs for the different account types. The url param this.props.match.params.activeTabId indicates the current open tab, in order for tab history to be preserved.\n     *  this.props.match.params.activeTabId should always match the accountType.id of the accountType being currently viewed. \n    */\n    static contextType = PageSettings;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            accounts: [],\n            accountGroups: [],\n            accountTypes: [],\n\n            editAccountGroupModal: false,\n            accountGroupNameAlert: false,\n            selectedAccountGroupId: null,\n            accountGroupNameInput: '',\n            editAccountGroup: false, //when true, editAccountGroupModal will have 'edit' in title instead of 'create new'\n\n            accountTypeOptions: [], //for react-select; accountTypes are formatted as {value: accountType.id, label: accountType.name, object: accountType}\n            disableChangeAccountType: false, // disables the react-select field for changing an account group's account type\n\n            selectedAccountTypeOption: null,\n\n            deleteAccountGroupAlert: false,\n            cannotDeleteAccountGroupAlert: false,\n\n            addAnAccountModal: false,\n            accountNameAlert: false,\n            accountNameInput: ''\n        };\n\n        this.handleChangeAccountTypeOption = this.handleChangeAccountTypeOption.bind(this);\n\n        this.handleConfirmDeleteAccountGroupButton = this.handleConfirmDeleteAccountGroupButton.bind(this);\n        this.toggleDeleteAccountGroupAlert = this.toggleDeleteAccountGroupAlert.bind(this);\n        this.toggleCannotDeleteAccountGroupAlert = this.toggleCannotDeleteAccountGroupAlert.bind(this);\n        this.setEditAccountGroupFalse = this.setEditAccountGroupFalse.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.fetchData();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.match.params.activeTabId !== prevProps.match.params.activeTabId) {\n            this.setState({ selectedAccountTypeOption: this.state.accountTypeOptions.find(accountTypeOption => accountTypeOption.value == this.props.match.params.activeTabId) })\n        }\n    }\n\n    fetchData() {\n        axios.get(`${API_BASE_URL}/accountType`).then(response => {\n            let assetsAndLiabilitiesAccountTypeIds = [1, 2];\n            let assetsAndLiabilitiesAccountTypes = response.data.filter(accountType => assetsAndLiabilitiesAccountTypeIds.includes(accountType.id));\n            this.setState({ accountTypes: assetsAndLiabilitiesAccountTypes });\n            if (response.data) {\n                let formattedAccountTypes = assetsAndLiabilitiesAccountTypes.map(accountType => ({ value: accountType.id, label: chartOfAccountsText[this.context.locale][accountType.name], object: accountType }))\n                this.setState({ accountTypeOptions: formattedAccountTypes, selectedAccountTypeOption: formattedAccountTypes.find(formattedAccountType => formattedAccountType.object.id == this.props.match.params.activeTabId) })\n            }\n        })\n        axios.get(`${API_BASE_URL}/organization/${this.context.currentOrganizationId}/accountGroup`).then(response => {\n            this.setState({ accountGroups: response.data });\n        })\n        axios.get(`${API_BASE_URL}/organization/${this.context.currentOrganizationId}/accountBalance`).then(response => {\n            this.setState({ accounts: response.data });\n        }).catch(console.log);\n    }\n\n    /** Utility functions for adding/editing account group */\n    handleAddAnAccountGroupButton() { //adding a fresh account group uses the default empty fields for all inputs\n        this.toggleEditAccountGroupModal();\n    }\n\n    handleEditAccountGroupButton(accountGroup) {\n        //editing an account group prepopulates form fields with data for the selected account group, and disables the field for editing account type.\n        //this function should only be called when opening the modal form for editing an account group. the modal should be closed by resetting all fields using toggleEditAccountGroupModal()\n        this.setState(state => (\n            {\n                selectedAccountGroupId: accountGroup.accountGroupId,\n                accountGroupNameInput: accountGroup.accountGroupName,\n                selectedAccountTypeOption: state.accountTypeOptions.find(accountTypeOption => accountTypeOption.object.id == accountGroup.accountTypeId),\n                disableChangeAccountType: true,\n                accountGroupNameAlert: false,\n                editAccountGroupModal: true,\n                editAccountGroup: true\n            }\n        ))\n    }\n\n    toggleEditAccountGroupModal() { //toggling the modal for adding/editing account groups resets all input fields for the form.\n        this.setState(state => (\n            {\n                selectedAccountGroupId: null, //this field is used in more than one operation so it is imperative to nullify selectedAccountGroupId on toggle\n                accountGroupNameInput: \"\",\n                selectedAccountTypeOption: state.accountTypeOptions.find(accountTypeOption => accountTypeOption.object.id == this.props.match.params.activeTabId),\n                disableChangeAccountType: false,\n                accountGroupNameAlert: false,\n                editAccountGroupModal: !state.editAccountGroupModal,\n            }));\n    }\n\n    setEditAccountGroupFalse() { //called after modal transitions out. ensures that title does not change until modal is done transitioning.\n        this.setState(state => (\n            {editAccountGroup: false}\n        ))\n    }\n\n    handleChangeAccountTypeOption(selectedAccountTypeOption) {\n        this.setState({ selectedAccountTypeOption: selectedAccountTypeOption });\n    }\n\n    async handleSaveAnAccountGroupButton() {\n        if (!this.state.accountGroupNameInput) {\n            this.setState({ accountGroupNameAlert: true });\n        }\n\n        if (this.state.accountGroupNameInput) {\n            if (!this.state.selectedAccountGroupId) {\n                let postedObject = {\n                    accountGroupName: this.state.accountGroupNameInput,\n                    accountSubtypeId: this.state.selectedAccountTypeOption.value == 1 ? 5 : 15, //hardcode; for single-entry (personal) organizations, we shove all asset account groups into 'other current assets' and all liabilities into 'other current liabilities'\n                    organizationId: this.context.currentOrganizationId\n                };\n                await this.postAccountGroup(postedObject);\n                this.toggleEditAccountGroupModal();\n            } else {\n                let putObject = {\n                    accountGroupId: this.state.selectedAccountGroupId,\n                    accountGroupName: this.state.accountGroupNameInput,\n                    accountSubtypeId: this.state.selectedAccountTypeOption.value == 1 ? 5 : 15,\n                    organizationId: this.context.currentOrganizationId\n                };\n                await this.putAccountGroup(this.state.selectedAccountGroupId, putObject);\n                this.toggleEditAccountGroupModal();\n            }\n        }\n    }\n    /** End utility functions for adding/editing account group */\n\n    /** Utility functions for deleting account group */\n    toggleDeleteAccountGroupAlert() {\n        this.setState(state => ({ deleteAccountGroupAlert: !state.deleteAccountGroupAlert }));\n    }\n\n    toggleCannotDeleteAccountGroupAlert() {\n        this.setState(state => ({ cannotDeleteAccountGroupAlert: !state.cannotDeleteAccountGroupAlert }))\n    }\n\n    handleDeleteAccountGroupButton(accountGroup) {\n        this.setState(state => ({ selectedAccountGroupId: accountGroup.accountGroupId }));\n        this.toggleDeleteAccountGroupAlert();\n    }\n\n    async handleConfirmDeleteAccountGroupButton() {\n        if (this.state.accounts.filter(account => account.accountGroupId == this.state.selectedAccountGroupId).length !== 0) {\n            this.toggleDeleteAccountGroupAlert();\n            this.toggleCannotDeleteAccountGroupAlert();\n        } else {\n            await this.deleteAccountGroup(this.state.selectedAccountGroupId);\n            this.toggleDeleteAccountGroupAlert();\n        }\n    }\n    /** End utility functions for deleting account group */\n\n    /** Utility functions for adding account to account group */\n    toggleAddAnAccountModal() {\n        this.setState(state => ({ addAnAccountModal: !state.addAnAccountModal, accountNameInput: '', accountNameAlert: false }))\n    }\n\n    handleAddAnAccountToAccountGroupButton(accountGroup) {\n        this.setState(state => ({ selectedAccountGroupId: accountGroup.accountGroupId }));\n        this.toggleAddAnAccountModal();\n    }\n\n    async handleSaveNewAccount() {\n        let postedObject = {\n            accountName: this.state.accountNameInput,\n            accountGroupId: this.state.selectedAccountGroupId\n        }\n        await this.postAccount(postedObject);\n        this.toggleAddAnAccountModal();\n    }\n\n    /** End utility functions for adding account to account group */\n\n\n    /** api calls for posting/putting/deleting objects to server */\n    async postAccountGroup(accountGroup) {\n        axios.post(`${API_BASE_URL}/accountGroup`, accountGroup).then(response => {\n            console.log(response);\n            this.fetchData();\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    async putAccountGroup(accountGroupId, accountGroup) {\n        axios.put(`${API_BASE_URL}/accountGroup/${accountGroupId}`, accountGroup).then(response => {\n            console.log(response);\n            this.fetchData();\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    async deleteAccountGroup(accountGroupId) {\n        axios.delete(`${API_BASE_URL}/accountGroup/${accountGroupId}`).then(response => {\n            console.log(response);\n            this.fetchData();\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    async postAccount(account) {\n        axios.post(`${API_BASE_URL}/account`, account).then(response => {\n            console.log(response);\n            this.fetchData();\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n    /** End api calls */\n\n    render() {\n        return (\n            <div>\n                <ol className=\"breadcrumb float-xl-right\">\n                    <li className=\"breadcrumb-item\"><Link to=\"/\">{chartOfAccountsText[this.context.locale][\"Home\"]}</Link></li>\n                    <li className=\"breadcrumb-item active\">{chartOfAccountsText[this.context.locale][\"Accounts\"]}</li>\n                </ol>\n                <h1 className=\"page-header\">\n                    {chartOfAccountsText[this.context.locale][\"Accounts\"]}\n                    <ToggleMobileSidebarButton className=\"d-md-none float-right \" />\n                </h1>\n                <Nav pills justified className=\"d-block\">\n                    {!this.state.accountTypes ? <div className=\"d-flex justify-content-center fa-3x py-3\"><i className=\"fas fa-circle-notch fa-spin\"></i></div> :\n                        <div className=\"d-flex justify-content-between px-3 mb-3\">\n                            <div className=\"row \">\n                                {this.state.accountTypes.map(accountType => { //render a pills navlink for each accountType returned by the server, with the active accountType being the one that has an id that matches the url param.\n                                    return (\n                                        <NavItem key={accountType.id}>\n                                            <NavLink\n                                                className={this.props.match.params.activeTabId == accountType.id ? \"active\" : \"cursor-pointer\"}\n                                                onClick={() => this.props.history.push(`/accounts/${accountType.id}`)}\n                                            >\n                                                <span className=\"d-sm-block px-3\">{chartOfAccountsText[this.context.locale][accountType.name]}</span>\n                                            </NavLink>\n                                        </NavItem>\n                                    );\n                                })}\n\n                            </div>\n                            <button\n                                className=\"btn btn-primary my-1 ml-3\"\n                                onClick={() => {\n                                    this.handleAddAnAccountGroupButton();\n                                }}\n                            > {chartOfAccountsText[this.context.locale][\"Create an account group\"]} </button>\n                        </div>\n                    }\n                </Nav>\n                <TabContent activeTab={this.props.match.params.activeTabId} className=\"widget widget-rounded widget-list widget-list-rounded m-b-30\"> {/** active tab is the tab with an activeTabId that matches the url path parameter*/}\n                    {!this.state.accountTypes ? <div className=\"d-flex justify-content-center fa-3x py-3\"><i className=\"fas fa-circle-notch fa-spin\"></i></div> :\n                        this.state.accountTypes.map(accountType => {\n                            return (\n                                <TabPane tabId={accountType.id.toString()} key={accountType.id.toString()}>\n                                    {this.state.accountGroups.filter(accountGroup => accountGroup.accountTypeId == accountType.id).map(accountGroup => { // render a bg-light accountgroup widget list item for each accountGroup in this accountType, then render all of the accounts for at accountGroup\n                                        return (\n                                            <React.Fragment key={accountGroup.accountGroupId}>\n                                                <div className=\"widget-list-item bg-light\">\n                                                    <div className=\"widget-list-content d-flex justify-content-between align-items-center\">\n                                                        <h4 className=\"widget-list-title\">{accountGroup.accountGroupName}</h4>\n                                                        <div>\n                                                            <Link replace className=\"icon-link-text-muted p-l-15\" to=\"#\" onClick={() => this.handleAddAnAccountToAccountGroupButton(accountGroup)}>\n                                                                <i className=\"fa fa-plus\"></i>\n                                                            </Link>\n                                                            <Link replace className=\"icon-link-text-muted p-l-15\" to=\"#\" onClick={() => this.handleEditAccountGroupButton(accountGroup)}>\n                                                                <i className=\"fa fa-edit\"></i>\n                                                            </Link>\n                                                            <Link replace className=\"icon-link-text-muted p-l-15\" to=\"#\" onClick={() => this.handleDeleteAccountGroupButton(accountGroup)}>\n                                                                <i className=\"fa fa-trash-alt\"></i>\n                                                            </Link>\n                                                        </div>\n\n\n                                                    </div>\n                                                </div>\n                                                {!this.state.accounts ? null : this.state.accounts.filter(account => account.accountGroupId == accountGroup.accountGroupId).map(account => {\n                                                    return (\n                                                        <Link className=\"widget-list-item bg-white\" to={`/account-details/${account.accountId}`} key={account.accountId.toString()}>\n                                                            <div className=\"widget-list-content p-l-30\">\n                                                                <div className=\"widget-list-title\">{account.accountName}</div>\n                                                            </div>\n                                                            <div className=\"m-r-10 widget-list-action text-right\">\n                                                                <i className=\"fa fa-angle-right fa-lg text-muted\"></i>\n                                                            </div>\n                                                        </Link>\n                                                    );\n                                                })}\n                                            </React.Fragment>\n                                        );\n                                    })}\n                                </TabPane>\n                            );\n                        })\n                    }\n                </TabContent>\n\n                <Modal isOpen={this.state.editAccountGroupModal} toggle={() => this.toggleEditAccountGroupModal()} centered={true} onClosed={this.setEditAccountGroupFalse}>\n                    <ModalHeader> {this.state.editAccountGroup? chartOfAccountsText[this.context.locale][\"Edit Account Group Details\"] : chartOfAccountsText[this.context.locale][\"Create a New Account Group\"]} </ModalHeader>\n                    <ModalBody>\n                        {this.state.accountGroupNameAlert ? <Alert color=\"danger\">{chartOfAccountsText[this.context.locale][\"Please provide a name for your account group.\"]}</Alert> : null}\n                        <form onSubmit={event => { event.preventDefault(); this.handleSaveAnAccountGroupButton() }}>\n                            <div className=\"form-group row\">\n                                <label className=\"col-md-4 col-form-label\">\n                                    {chartOfAccountsText[this.context.locale][\"Account Group Name\"]}\n                                </label>\n                                <div className=\"col-md-8\">\n                                    <input type=\"text\" className=\"form-control\"\n                                        value={this.state.accountGroupNameInput}\n                                        onChange={event => this.setState({ accountGroupNameInput: event.target.value })}\n                                    />\n                                </div>\n                            </div>\n                        </form>\n                        <div className=\"form-group row\">\n                            <label className=\"col-md-4 col-form-label\">\n                                {chartOfAccountsText[this.context.locale][\"Account Type\"]}\n                            </label>\n                            {!this.state.selectedAccountTypeOption ? <div className=\"d-flex justify-content-center fa-3x py-3\"><i className=\"fas fa-circle-notch fa-spin\"></i></div> :\n                                <div className=\"col-md-8\">\n                                    <Select\n                                        options={this.state.accountTypeOptions}\n                                        value={this.state.selectedAccountTypeOption}\n                                        isSearchable={true}\n                                        isDisabled={this.state.disableChangeAccountType}\n                                        onChange={this.handleChangeAccountTypeOption}\n                                    />\n                                    {/**TODO: style the SELECT components to match form-control */}\n                                </div>\n                            }\n                        </div>\n                    </ModalBody>\n                    <ModalFooter>\n                        <button className=\"btn btn-primary width-10ch\" onClick={() => this.handleSaveAnAccountGroupButton()}>\n                            {chartOfAccountsText[this.context.locale][\"Save\"]}\n                        </button>\n                        <button className=\"btn btn-white width-10ch\" onClick={() => this.toggleEditAccountGroupModal()}>\n                            {chartOfAccountsText[this.context.locale][\"Cancel\"]}\n                        </button>\n                    </ModalFooter>\n                </Modal>\n\n                {this.state.deleteAccountGroupAlert ?\n                    <SweetAlert primary showCancel\n                        confirmBtnText={chartOfAccountsText[this.context.locale][\"Yes, delete it!\"]}\n                        confirmBtnBsStyle=\"primary\"\n                        cancelBtnText={chartOfAccountsText[this.context.locale][\"Cancel\"]}\n                        cancelBtnBsStyle=\"default\"\n                        title={chartOfAccountsText[this.context.locale][\"Are you sure?\"]}\n                        onConfirm={this.handleConfirmDeleteAccountGroupButton}\n                        onCancel={this.toggleDeleteAccountGroupAlert}\n                    >\n                        {chartOfAccountsText[this.context.locale][\"Are you sure you want to delete this account group?\"]}\n                    </SweetAlert>\n                    : null}\n                {this.state.cannotDeleteAccountGroupAlert ?\n                    <SweetAlert danger showConfirm={false} showCancel={true}\n                        cancelBtnBsStyle=\"default\"\n                        cancelBtnText={chartOfAccountsText[this.context.locale][\"Cancel\"]}\n                        title={chartOfAccountsText[this.context.locale][\"Cannot delete this account.\"]}\n                        onConfirm={this.toggleCannotDeleteAccountGroupAlert}\n                        onCancel={this.toggleCannotDeleteAccountGroupAlert}\n                    >\n                        {chartOfAccountsText[this.context.locale][\"Cannot delete this account group. Please delete all accounts in this account group and try again.\"]}\n                    </SweetAlert>\n                    : null}\n\n                <Modal isOpen={this.state.addAnAccountModal} toggle={() => this.toggleAddAnAccountModal()} centered={true}>\n                    <ModalHeader> {chartOfAccountsText[this.context.locale][\"Add an Account\"]} </ModalHeader>\n                    <ModalBody>\n                        {\n                            this.state.accountNameAlert ?\n                                <Alert color=\"danger\">\n                                    {chartOfAccountsText[this.context.locale][\"Please provide a name for your account.\"]}\n                                </Alert>\n                                : null\n                        }\n                        <form onSubmit={event => { event.preventDefault(); this.handleSaveNewAccount() }}>\n                            <div className=\"form-group row\">\n                                <label className=\"col-form-label col-md-3\">\n                                    {chartOfAccountsText[this.context.locale][\"Account Name\"]}\n                                </label>\n                                <div className=\"col-md-9\">\n                                    <input\n                                        className=\"form-control\"\n                                        value={this.state.accountNameInput}\n                                        onChange={event => {\n                                            this.setState({ accountNameInput: event.target.value });\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </form>\n                    </ModalBody>\n                    <ModalFooter>\n                        <button\n                            className=\"btn btn-primary width-10ch\"\n                            onClick={() => this.handleSaveNewAccount()}\n                        >\n                            {chartOfAccountsText[this.context.locale][\"Save\"]}\n                        </button>\n                        <button\n                            className=\"btn btn-white width-10ch\"\n                            onClick={() => {\n                                this.toggleAddAnAccountModal();\n                            }}\n                        >\n                            {chartOfAccountsText[this.context.locale][\"Cancel\"]}\n                        </button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n\n        )\n    }\n}\n\nexport default Accounts;","/Users/kyle/Easy_Ledger/front_end/src/pages/categories/categories.js",["682","683","684","685","686","687","688","689","690","691"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { Alert, Modal, ModalHeader, ModalBody, ModalFooter, TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';\nimport { API_BASE_URL } from '../../utils/constants.js';\nimport { PageSettings } from '../../config/page-settings.js';\nimport Select from 'react-select';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { chartOfAccountsText } from '../../utils/i18n/chart-of-accounts-text.js';\nimport ToggleMobileSidebarButton from '../../components/sidebar/toggle-mobile-sidebar-button';\n\n\n\nclass Categories extends React.Component {\n    /** Renders a Chart of Accounts. This component uses pills tabs for the different account types. The url param this.props.match.params.activeTabId indicates the current open tab, in order for tab history to be preserved.\n     *  this.props.match.params.activeTabId should always match the accountType.id of the accountType being currently viewed. \n    */\n    static contextType = PageSettings;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            accounts: [],\n            accountGroups: [],\n            accountTypes: [],\n\n            editAccountGroupModal: false,\n            accountGroupNameAlert: false,\n            selectedAccountGroupId: null,\n            accountGroupNameInput: '',\n            editAccountGroup: false, //when true, editAccountGroupModal will have 'edit' in title instead of 'create new'\n\n            accountTypeOptions: [], //for react-select; accountTypes are formatted as {value: accountType.id, label: accountType.name, object: accountType}\n            disableChangeAccountType: false, // disables the react-select field for changing an account group's account type\n\n            selectedAccountTypeOption: null,\n\n            deleteAccountGroupAlert: false,\n            cannotDeleteAccountGroupAlert: false,\n\n            addAnAccountModal: false,\n            accountNameAlert: false,\n            accountNameInput: ''\n        };\n\n        this.handleChangeAccountTypeOption = this.handleChangeAccountTypeOption.bind(this);\n\n        this.handleConfirmDeleteAccountGroupButton = this.handleConfirmDeleteAccountGroupButton.bind(this);\n        this.toggleDeleteAccountGroupAlert = this.toggleDeleteAccountGroupAlert.bind(this);\n        this.toggleCannotDeleteAccountGroupAlert = this.toggleCannotDeleteAccountGroupAlert.bind(this);\n        this.toggleEditAccountGroupModal = this.toggleEditAccountGroupModal.bind(this);\n        this.setEditAccountGroupFalse = this.setEditAccountGroupFalse.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.fetchData();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.match.params.activeTabId !== prevProps.match.params.activeTabId) {\n            this.setState({ selectedAccountTypeOption: this.state.accountTypeOptions.find(accountTypeOption => accountTypeOption.value == this.props.match.params.activeTabId) })\n        }\n    }\n\n    fetchData() {\n        axios.get(`${API_BASE_URL}/accountType`).then(response => {\n            let incomeAndExpensesAccountTypeIds = [4, 5];\n            let incomeAndExpensesAccountTypes = response.data.filter(accountType => incomeAndExpensesAccountTypeIds.includes(accountType.id));\n            this.setState({ accountTypes: incomeAndExpensesAccountTypes });\n            if (response.data) {\n                let formattedAccountTypes = incomeAndExpensesAccountTypes.map(accountType => ({ value: accountType.id, label: chartOfAccountsText[this.context.locale][accountType.name], object: accountType }))\n                this.setState({ accountTypeOptions: formattedAccountTypes, selectedAccountTypeOption: formattedAccountTypes.find(formattedAccountType => formattedAccountType.object.id == this.props.match.params.activeTabId) })\n            }\n        })\n        axios.get(`${API_BASE_URL}/organization/${this.context.currentOrganizationId}/accountGroup`).then(response => {\n            this.setState({ accountGroups: response.data });\n        })\n        axios.get(`${API_BASE_URL}/organization/${this.context.currentOrganizationId}/accountBalance`).then(response => {\n            this.setState({ accounts: response.data });\n        }).catch(console.log);\n    }\n\n    /** Utility functions for adding/editing account group */\n    handleAddAnAccountGroupButton() { //adding a fresh account group uses the default empty fields for all inputs\n        this.toggleEditAccountGroupModal();\n    }\n\n    handleEditAccountGroupButton(accountGroup) {\n        //editing an account group prepopulates form fields with data for the selected account group, and disables the field for editing account type.\n        //this function should only be called when opening the modal form for editing an account group. the modal should be closed by resetting all fields using toggleEditAccountGroupModal()\n        this.setState(state => (\n            {\n                selectedAccountGroupId: accountGroup.accountGroupId,\n                accountGroupNameInput: accountGroup.accountGroupName,\n                selectedAccountTypeOption: state.accountTypeOptions.find(accountTypeOption => accountTypeOption.object.id == accountGroup.accountTypeId),\n                disableChangeAccountType: true,\n                accountGroupNameAlert: false,\n                editAccountGroupModal: true,\n                editAccountGroup: true,\n            }\n        ))\n    }\n\n    toggleEditAccountGroupModal() { //toggling the modal for adding/editing account groups resets all input fields for the form.\n        this.setState(state => (\n            {\n                selectedAccountGroupId: null, //this field is used in more than one operation so it is imperative to nullify selectedAccountGroupId on toggle\n                accountGroupNameInput: \"\",\n                selectedAccountTypeOption: state.accountTypeOptions.find(accountTypeOption => accountTypeOption.object.id == this.props.match.params.activeTabId),\n                disableChangeAccountType: false,\n                accountGroupNameAlert: false,\n                editAccountGroupModal: !state.editAccountGroupModal,\n            }\n        ));\n    }\n\n    setEditAccountGroupFalse() { //called after modal transitions out. ensures that title does not change until modal is done transitioning.\n        this.setState(state => (\n            {editAccountGroup: false}\n        ))\n    }\n\n    handleChangeAccountTypeOption(selectedAccountTypeOption) {\n        this.setState({ selectedAccountTypeOption: selectedAccountTypeOption });\n    }\n\n    async handleSaveAnAccountGroupButton() {\n        if (!this.state.accountGroupNameInput) {\n            this.setState({ accountGroupNameAlert: true });\n        }\n\n        if (this.state.accountGroupNameInput) {\n            if (!this.state.selectedAccountGroupId) {\n                let postedObject = {\n                    accountGroupName: this.state.accountGroupNameInput,\n                    accountSubtypeId: this.state.selectedAccountTypeOption.value == 4 ? 22 : 28, //hardcode; for single-entry (personal) organizations, we shove all income account groups into 'other income' subtype and all expenses into 'other expenses'\n                    organizationId: this.context.currentOrganizationId\n                };\n                await this.postAccountGroup(postedObject);\n                this.toggleEditAccountGroupModal();\n            } else {\n                let putObject = {\n                    accountGroupId: this.state.selectedAccountGroupId,\n                    accountGroupName: this.state.accountGroupNameInput,\n                    accountSubtypeId: this.state.selectedAccountTypeOption.value == 4 ? 22 : 28,\n                    organizationId: this.context.currentOrganizationId\n                };\n                await this.putAccountGroup(this.state.selectedAccountGroupId, putObject);\n                this.toggleEditAccountGroupModal();\n            }\n        }\n    }\n    /** End utility functions for adding/editing account group */\n\n    /** Utility functions for deleting account group */\n    toggleDeleteAccountGroupAlert() {\n        this.setState(state => ({ deleteAccountGroupAlert: !state.deleteAccountGroupAlert }));\n    }\n\n    toggleCannotDeleteAccountGroupAlert() {\n        this.setState(state => ({ cannotDeleteAccountGroupAlert: !state.cannotDeleteAccountGroupAlert }))\n    }\n\n    handleDeleteAccountGroupButton(accountGroup) {\n        this.setState(state => ({ selectedAccountGroupId: accountGroup.accountGroupId }));\n        this.toggleDeleteAccountGroupAlert();\n    }\n\n    async handleConfirmDeleteAccountGroupButton() {\n        if (this.state.accounts.filter(account => account.accountGroupId == this.state.selectedAccountGroupId).length !== 0) {\n            this.toggleDeleteAccountGroupAlert();\n            this.toggleCannotDeleteAccountGroupAlert();\n        } else {\n            await this.deleteAccountGroup(this.state.selectedAccountGroupId);\n            this.toggleDeleteAccountGroupAlert();\n        }\n    }\n    /** End utility functions for deleting account group */\n\n    /** Utility functions for adding account to account group */\n    toggleAddAnAccountModal() {\n        this.setState(state => ({ addAnAccountModal: !state.addAnAccountModal, accountNameInput: '', accountNameAlert: false }))\n    }\n\n    handleAddAnAccountToAccountGroupButton(accountGroup) {\n        this.setState(state => ({ selectedAccountGroupId: accountGroup.accountGroupId }));\n        this.toggleAddAnAccountModal();\n    }\n\n    async handleSaveNewAccount() {\n        let postedObject = {\n            accountName: this.state.accountNameInput,\n            accountGroupId: this.state.selectedAccountGroupId\n        }\n        await this.postAccount(postedObject);\n        this.toggleAddAnAccountModal();\n    }\n\n    /** End utility functions for adding account to account group */\n\n\n    /** api calls for posting/putting/deleting objects to server */\n    async postAccountGroup(accountGroup) {\n        axios.post(`${API_BASE_URL}/accountGroup`, accountGroup).then(response => {\n            console.log(response);\n            this.fetchData();\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    async putAccountGroup(accountGroupId, accountGroup) {\n        axios.put(`${API_BASE_URL}/accountGroup/${accountGroupId}`, accountGroup).then(response => {\n            console.log(response);\n            this.fetchData();\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    async deleteAccountGroup(accountGroupId) {\n        axios.delete(`${API_BASE_URL}/accountGroup/${accountGroupId}`).then(response => {\n            console.log(response);\n            this.fetchData();\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    async postAccount(account) {\n        axios.post(`${API_BASE_URL}/account`, account).then(response => {\n            console.log(response);\n            this.fetchData();\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n    /** End api calls */\n\n    render() {\n        return (\n            <div>\n                <ol className=\"breadcrumb float-xl-right\">\n                    <li className=\"breadcrumb-item\"><Link to=\"/\">{chartOfAccountsText[this.context.locale][\"Home\"]}</Link></li>\n                    <li className=\"breadcrumb-item active\">{chartOfAccountsText[this.context.locale][\"Categories\"]}</li>\n                </ol>\n                <h1 className=\"page-header\">\n                    {chartOfAccountsText[this.context.locale][\"Categories\"]}\n                    <ToggleMobileSidebarButton className=\"d-md-none float-right \" />\n                </h1>\n                <Nav pills justified className=\"d-block\">\n                    {!this.state.accountTypes ? <div className=\"d-flex justify-content-center fa-3x py-3\"><i className=\"fas fa-circle-notch fa-spin\"></i></div> :\n                        <div className=\"d-flex justify-content-between px-3 mb-3\">\n                            <div className=\"row \">\n                                {this.state.accountTypes.map(accountType => { //render a pills navlink for each accountType returned by the server, with the active accountType being the one that has an id that matches the url param.\n                                    return (\n                                        <NavItem key={accountType.id}>\n                                            <NavLink\n                                                className={this.props.match.params.activeTabId == accountType.id ? \"active\" : \"cursor-pointer\"}\n                                                onClick={() => this.props.history.push(`/categories/${accountType.id}`)}\n                                            >\n                                                <span className=\"d-sm-block px-3\">{chartOfAccountsText[this.context.locale][accountType.name]}</span>\n                                            </NavLink>\n                                        </NavItem>\n                                    );\n                                })}\n\n                            </div>\n                            <button\n                                className=\"btn btn-primary my-1 ml-3\"\n                                onClick={() => {\n                                    this.handleAddAnAccountGroupButton();\n                                }}\n                            > {chartOfAccountsText[this.context.locale][\"Create a category group\"]} </button>\n                        </div>\n                    }\n                </Nav>\n                <TabContent activeTab={this.props.match.params.activeTabId} className=\"widget widget-rounded widget-list widget-list-rounded m-b-30\"> {/** active tab is the tab with an activeTabId that matches the url path parameter*/}\n                    {!this.state.accountTypes ? <div className=\"d-flex justify-content-center fa-3x py-3\"><i className=\"fas fa-circle-notch fa-spin\"></i></div> :\n                        this.state.accountTypes.map(accountType => {\n                            return (\n                                <TabPane tabId={accountType.id.toString()} key={accountType.id.toString()}>\n                                    {this.state.accountGroups.filter(accountGroup => accountGroup.accountTypeId == accountType.id).map(accountGroup => { // render a bg-light accountgroup widget list item for each accountGroup in this accountType, then render all of the accounts for at accountGroup\n                                        return (\n                                            <React.Fragment key={accountGroup.accountGroupId}>\n                                                <div className=\"widget-list-item bg-light\">\n                                                    <div className=\"widget-list-content d-flex justify-content-between align-items-center\">\n                                                        <h4 className=\"widget-list-title\">{accountGroup.accountGroupName}</h4>\n                                                        <div>\n                                                            <Link replace className=\"icon-link-text-muted p-l-15\" to=\"#\" onClick={() => this.handleAddAnAccountToAccountGroupButton(accountGroup)}>\n                                                                <i className=\"fa fa-plus\"></i>\n                                                            </Link>\n                                                            <Link replace className=\"icon-link-text-muted p-l-15\" to=\"#\" onClick={() => this.handleEditAccountGroupButton(accountGroup)}>\n                                                                <i className=\"fa fa-edit\"></i>\n                                                            </Link>\n                                                            <Link replace className=\"icon-link-text-muted p-l-15\" to=\"#\" onClick={() => this.handleDeleteAccountGroupButton(accountGroup)}>\n                                                                <i className=\"fa fa-trash-alt\"></i>\n                                                            </Link>\n                                                        </div>\n\n\n                                                    </div>\n                                                </div>\n                                                {!this.state.accounts ? null : this.state.accounts.filter(account => account.accountGroupId == accountGroup.accountGroupId).map(account => {\n                                                    return (\n                                                        <Link className=\"widget-list-item bg-white\" to={`/account-details/${account.accountId}`} key={account.accountId.toString()}>\n                                                            <div className=\"widget-list-content p-l-30\">\n                                                                <div className=\"widget-list-title\">{account.accountName}</div>\n                                                            </div>\n                                                            <div className=\"m-r-10 widget-list-action text-right\">\n                                                                <i className=\"fa fa-angle-right fa-lg text-muted\"></i>\n                                                            </div>\n                                                        </Link>\n                                                    );\n                                                })}\n                                            </React.Fragment>\n                                        );\n                                    })}\n                                </TabPane>\n                            );\n                        })\n                    }\n                </TabContent>\n\n                <Modal isOpen={this.state.editAccountGroupModal} toggle={() => this.toggleEditAccountGroupModal()} centered={true} onClosed={this.setEditAccountGroupFalse} >\n                    <ModalHeader> {this.state.editAccountGroup? chartOfAccountsText[this.context.locale][\"Edit Category Group Details\"]: chartOfAccountsText[this.context.locale][\"Create a New Category Group\"]} </ModalHeader>\n                    <ModalBody>\n                        {this.state.accountGroupNameAlert ? <Alert color=\"danger\">{chartOfAccountsText[this.context.locale][\"Please provide a name for your category group.\"]}</Alert> : null}\n                        <form onSubmit={event => { event.preventDefault(); this.handleSaveAnAccountGroupButton() }}>\n                            <div className=\"form-group row\">\n                                <label className=\"col-md-4 col-form-label\">\n                                    {[\"Category Group Name\"]}\n                                </label>\n                                <div className=\"col-md-8\">\n                                    <input type=\"text\" className=\"form-control\"\n                                        value={this.state.accountGroupNameInput}\n                                        onChange={event => this.setState({ accountGroupNameInput: event.target.value })}\n                                    />\n                                </div>\n                            </div>\n                        </form>\n                        <div className=\"form-group row\">\n                            <label className=\"col-md-4 col-form-label\">\n                                {chartOfAccountsText[this.context.locale][\"Category Type\"]}\n                            </label>\n                            {!this.state.selectedAccountTypeOption ? <div className=\"d-flex justify-content-center fa-3x py-3\"><i className=\"fas fa-circle-notch fa-spin\"></i></div> :\n                                <div className=\"col-md-8\">\n                                    <Select\n                                        options={this.state.accountTypeOptions}\n                                        value={this.state.selectedAccountTypeOption}\n                                        isSearchable={true}\n                                        isDisabled={this.state.disableChangeAccountType}\n                                        onChange={this.handleChangeAccountTypeOption}\n                                    />\n                                    {/**TODO: style the SELECT components to match form-control */}\n                                </div>\n                            }\n                        </div>\n                    </ModalBody>\n                    <ModalFooter>\n                        <button className=\"btn btn-primary width-10ch\" onClick={() => this.handleSaveAnAccountGroupButton()}>\n                            {chartOfAccountsText[this.context.locale][\"Save\"]}\n                        </button>\n                        <button className=\"btn btn-white width-10ch\" onClick={() => this.toggleEditAccountGroupModal()}>\n                            {chartOfAccountsText[this.context.locale][\"Cancel\"]}\n                        </button>\n                    </ModalFooter>\n                </Modal>\n\n                {this.state.deleteAccountGroupAlert ?\n                    <SweetAlert primary showCancel\n                        confirmBtnText={chartOfAccountsText[this.context.locale][\"Yes, delete it!\"]}\n                        confirmBtnBsStyle=\"primary\"\n                        cancelBtnText={chartOfAccountsText[this.context.locale][\"Cancel\"]}\n                        cancelBtnBsStyle=\"default\"\n                        title={chartOfAccountsText[this.context.locale][\"Are you sure?\"]}\n                        onConfirm={this.handleConfirmDeleteAccountGroupButton}\n                        onCancel={this.toggleDeleteAccountGroupAlert}\n                    >\n                        {chartOfAccountsText[this.context.locale][\"Are you sure you want to delete this category group?\"]}\n                    </SweetAlert>\n                    : null}\n                {this.state.cannotDeleteAccountGroupAlert ?\n                    <SweetAlert danger showConfirm={false} showCancel={true}\n                        cancelBtnBsStyle=\"default\"\n                        cancelBtnText={chartOfAccountsText[this.context.locale][\"Cancel\"]}\n                        title={chartOfAccountsText[this.context.locale][\"Cannot delete this category.\"]}\n                        onConfirm={this.toggleCannotDeleteAccountGroupAlert}\n                        onCancel={this.toggleCannotDeleteAccountGroupAlert}\n                    >\n                        {chartOfAccountsText[this.context.locale][\"Cannot delete this category group. Please delete all categories in this category group and try again.\"]}\n                    </SweetAlert>\n                    : null}\n\n                <Modal isOpen={this.state.addAnAccountModal} toggle={() => this.toggleAddAnAccountModal()} centered={true}>\n                    <ModalHeader> {chartOfAccountsText[this.context.locale][\"Add a Category\"]} </ModalHeader>\n                    <ModalBody>\n                        {\n                            this.state.accountNameAlert ?\n                                <Alert color=\"danger\">\n                                    {chartOfAccountsText[this.context.locale][\"Please provide a name for your category.\"]}\n                                </Alert>\n                                : null\n                        }\n                        <form onSubmit={event => { event.preventDefault(); this.handleSaveNewAccount() }}>\n                            <div className=\"form-group row\">\n                                <label className=\"col-form-label col-md-3\">\n                                    {chartOfAccountsText[this.context.locale][\"Category Name\"]}\n                                </label>\n                                <div className=\"col-md-9\">\n                                    <input\n                                        className=\"form-control\"\n                                        value={this.state.accountNameInput}\n                                        onChange={event => {\n                                            this.setState({ accountNameInput: event.target.value });\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </form>\n                    </ModalBody>\n                    <ModalFooter>\n                        <button\n                            className=\"btn btn-primary width-10ch\"\n                            onClick={() => this.handleSaveNewAccount()}\n                        >\n                            {chartOfAccountsText[this.context.locale][\"Save\"]}\n                        </button>\n                        <button\n                            className=\"btn btn-white width-10ch\"\n                            onClick={() => {\n                                this.toggleAddAnAccountModal();\n                            }}\n                        >\n                            {chartOfAccountsText[this.context.locale][\"Cancel\"]}\n                        </button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n\n        )\n    }\n}\n\nexport default Categories;","/Users/kyle/Easy_Ledger/front_end/src/pages/journals/personal/table-of-transactions.jsx",["692","693","694","695","696","697","698","699","700","701","702","703"],"/Users/kyle/Easy_Ledger/front_end/src/pages/journals/personal/transaction-view-mode.jsx",["704","705","706"],"import React from 'react';\nimport { useTable } from 'react-table';\nimport { PageSettings } from '../../../config/page-settings';\nimport { journalEntryViewModeText } from '../../../utils/i18n/journal-entry-view-mode-text.js'\n\nfunction JournalEntryViewMode({ data, journalEntryDescription, journalEntryDate, fromAccountName }) {\n    const appContext = React.useContext(PageSettings);\n    const columns = React.useMemo(\n        () => [ // accessor is the \"key\" in the data},\n            { Header: journalEntryViewModeText[appContext.locale]['Transaction Type'], accessor: 'transactionTypeName', width: '25%' },\n            { Header: journalEntryViewModeText[appContext.locale]['Category or Account'], accessor: 'accountName', width: '25%' },\n            { Header: journalEntryViewModeText[appContext.locale]['Memo'], accessor: 'description', width: '25%' },\n            { Header: journalEntryViewModeText[appContext.locale]['Amount'], accessor: 'amount', width: '25%' },\n        ],\n        []\n    )\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n    } = useTable(\n        {\n            columns,\n            data\n        }\n    )\n\n    const sumAmounts = () => {\n        let sum = 0;\n        data.forEach(row => {\n            if (row.transactionType.isCredit) {\n                sum += row.amount;\n            } else {\n                sum -= row.amount;\n            }\n        });\n        if (isNaN(sum)) {\n            return 0\n        } else {\n            return sum;\n        }\n    }\n\n\n    const formatCell = cell => {\n        let columnId = cell.column.id;\n        switch (columnId) {\n            case \"amount\":\n                return (new Intl.NumberFormat(appContext.locale, { style: 'currency', currency: appContext.currency }).format(cell.value));\n            default:\n                return cell.value;\n        }\n    }\n\n    return (\n        <>\n            <div className=\"row m-b-10\">\n                <div className=\"col-lg-2\"><strong>{journalEntryViewModeText[appContext.locale][\"From Account\"]}</strong></div> <div className=\"col-lg-10\">{fromAccountName}</div>\n            </div>\n\n            <div className=\"row m-b-10\">\n                <div className=\"col-lg-2\"><strong>{journalEntryViewModeText[appContext.locale][\"Date\"]}</strong></div> <div className=\"col-lg-10\">{journalEntryDate}</div>\n            </div>\n            <div className=\"row m-b-10\">\n                <div className=\"col-lg-2\"><strong>{journalEntryViewModeText[appContext.locale][\"Description\"]}</strong></div> <div className=\"col-lg-10\">{journalEntryDescription}</div>\n            </div>\n            <br></br>\n\n            <div className=\"table-responsive\">\n                <table className=\"table\"{...getTableProps()}>\n                    <thead>\n                        {headerGroups.map(headerGroup => (\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n                                {headerGroup.headers.map(column => (\n                                    // Add the sorting props to control sorting. For this example\n                                    // we can add them into the header props\n                                    <th {...column.getHeaderProps()} style={{ width: column.width }} className={column.id == \"amount\" ? \"text-right\" : \"\"}>\n                                        {column.render('Header')}\n                                    </th>\n                                ))}\n                            </tr>\n                        ))}\n                    </thead>\n                    <tbody {...getTableBodyProps()}>\n                        {rows.map(\n                            (row, i) => {\n                                prepareRow(row);\n                                return (\n                                    <tr {...row.getRowProps()}>\n                                        {row.cells.map(cell => {\n                                            return (\n                                                <td className={cell.column.id == \"amount\" ? \"text-right\" : \"\"} {...cell.getCellProps()}>{formatCell(cell)}</td>\n                                            )\n                                        })}\n                                    </tr>\n                                )\n                            }\n                        )}\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td>{journalEntryViewModeText[appContext.locale][\"Total\"]}</td>\n                            <td></td>\n                            <td></td>\n                            <td className=\"text-right\">\n                                {new Intl.NumberFormat(appContext.locale, { style: 'currency', currency: appContext.currency }).format(sumAmounts())}\n                            </td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </>\n    )\n}\n\nexport default JournalEntryViewMode\n","/Users/kyle/Easy_Ledger/front_end/src/pages/journals/personal/transaction-edit-mode.jsx",["707","708","709","710","711"],{"ruleId":"712","replacedBy":"713"},{"ruleId":"714","replacedBy":"715"},{"ruleId":"716","severity":1,"message":"717","line":13,"column":8,"nodeType":"718","messageId":"719","endLine":13,"endColumn":20},{"ruleId":"720","severity":1,"message":"721","line":304,"column":99,"nodeType":"722","messageId":"723","endLine":304,"endColumn":101},{"ruleId":"716","severity":1,"message":"724","line":1,"column":10,"nodeType":"718","messageId":"719","endLine":1,"endColumn":25},{"ruleId":"720","severity":1,"message":"721","line":89,"column":85,"nodeType":"722","messageId":"723","endLine":89,"endColumn":87},{"ruleId":"725","severity":1,"message":"726","line":35,"column":11,"nodeType":"727","endLine":35,"endColumn":13,"suggestions":"728"},{"ruleId":"725","severity":1,"message":"729","line":65,"column":8,"nodeType":"727","endLine":65,"endColumn":10,"suggestions":"730"},{"ruleId":"725","severity":1,"message":"731","line":82,"column":8,"nodeType":"727","endLine":82,"endColumn":10,"suggestions":"732"},{"ruleId":"725","severity":1,"message":"731","line":119,"column":8,"nodeType":"727","endLine":119,"endColumn":10,"suggestions":"733"},{"ruleId":"716","severity":1,"message":"734","line":2,"column":16,"nodeType":"718","messageId":"719","endLine":2,"endColumn":26},{"ruleId":"720","severity":1,"message":"721","line":64,"column":136,"nodeType":"722","messageId":"723","endLine":64,"endColumn":138},{"ruleId":"720","severity":1,"message":"721","line":73,"column":185,"nodeType":"722","messageId":"723","endLine":73,"endColumn":187},{"ruleId":"720","severity":1,"message":"721","line":103,"column":123,"nodeType":"722","messageId":"723","endLine":103,"endColumn":125},{"ruleId":"720","severity":1,"message":"721","line":104,"column":135,"nodeType":"722","messageId":"723","endLine":104,"endColumn":137},{"ruleId":"720","severity":1,"message":"721","line":119,"column":123,"nodeType":"722","messageId":"723","endLine":119,"endColumn":125},{"ruleId":"720","severity":1,"message":"721","line":189,"column":74,"nodeType":"722","messageId":"723","endLine":189,"endColumn":76},{"ruleId":"720","severity":1,"message":"721","line":278,"column":96,"nodeType":"722","messageId":"723","endLine":278,"endColumn":98},{"ruleId":"720","severity":1,"message":"721","line":302,"column":113,"nodeType":"722","messageId":"723","endLine":302,"endColumn":115},{"ruleId":"720","severity":1,"message":"721","line":323,"column":141,"nodeType":"722","messageId":"723","endLine":323,"endColumn":143},{"ruleId":"720","severity":1,"message":"721","line":386,"column":157,"nodeType":"722","messageId":"723","endLine":386,"endColumn":159},{"ruleId":"716","severity":1,"message":"734","line":2,"column":16,"nodeType":"718","messageId":"719","endLine":2,"endColumn":26},{"ruleId":"735","severity":1,"message":"736","line":8,"column":2,"nodeType":"737","messageId":"738","endLine":10,"endColumn":6},{"ruleId":"735","severity":1,"message":"736","line":8,"column":2,"nodeType":"737","messageId":"738","endLine":10,"endColumn":6},{"ruleId":"716","severity":1,"message":"734","line":2,"column":10,"nodeType":"718","messageId":"719","endLine":2,"endColumn":20},{"ruleId":"716","severity":1,"message":"739","line":4,"column":8,"nodeType":"718","messageId":"719","endLine":4,"endColumn":21},{"ruleId":"716","severity":1,"message":"740","line":56,"column":12,"nodeType":"718","messageId":"719","endLine":56,"endColumn":32},{"ruleId":"716","severity":1,"message":"741","line":57,"column":12,"nodeType":"718","messageId":"719","endLine":57,"endColumn":27},{"ruleId":"720","severity":1,"message":"721","line":64,"column":20,"nodeType":"722","messageId":"723","endLine":64,"endColumn":22},{"ruleId":"725","severity":1,"message":"742","line":91,"column":8,"nodeType":"727","endLine":91,"endColumn":17,"suggestions":"743"},{"ruleId":"720","severity":1,"message":"721","line":20,"column":182,"nodeType":"722","messageId":"723","endLine":20,"endColumn":184},{"ruleId":"720","severity":1,"message":"721","line":39,"column":133,"nodeType":"722","messageId":"723","endLine":39,"endColumn":135},{"ruleId":"720","severity":1,"message":"744","line":67,"column":32,"nodeType":"722","messageId":"723","endLine":67,"endColumn":34},{"ruleId":"716","severity":1,"message":"745","line":2,"column":15,"nodeType":"718","messageId":"719","endLine":2,"endColumn":23},{"ruleId":"720","severity":1,"message":"721","line":40,"column":45,"nodeType":"722","messageId":"723","endLine":40,"endColumn":47},{"ruleId":"720","severity":1,"message":"721","line":103,"column":55,"nodeType":"722","messageId":"723","endLine":103,"endColumn":57},{"ruleId":"720","severity":1,"message":"721","line":21,"column":113,"nodeType":"722","messageId":"723","endLine":21,"endColumn":115},{"ruleId":"720","severity":1,"message":"721","line":70,"column":60,"nodeType":"722","messageId":"723","endLine":70,"endColumn":62},{"ruleId":"720","severity":1,"message":"721","line":178,"column":55,"nodeType":"722","messageId":"723","endLine":178,"endColumn":57},{"ruleId":"716","severity":1,"message":"746","line":14,"column":28,"nodeType":"718","messageId":"719","endLine":14,"endColumn":45},{"ruleId":"720","severity":1,"message":"721","line":20,"column":120,"nodeType":"722","messageId":"723","endLine":20,"endColumn":122},{"ruleId":"720","severity":1,"message":"721","line":20,"column":161,"nodeType":"722","messageId":"723","endLine":20,"endColumn":163},{"ruleId":"720","severity":1,"message":"744","line":26,"column":49,"nodeType":"722","messageId":"723","endLine":26,"endColumn":51},{"ruleId":"720","severity":1,"message":"721","line":31,"column":39,"nodeType":"722","messageId":"723","endLine":31,"endColumn":41},{"ruleId":"720","severity":1,"message":"721","line":39,"column":43,"nodeType":"722","messageId":"723","endLine":39,"endColumn":45},{"ruleId":"720","severity":1,"message":"721","line":44,"column":116,"nodeType":"722","messageId":"723","endLine":44,"endColumn":118},{"ruleId":"720","severity":1,"message":"721","line":44,"column":148,"nodeType":"722","messageId":"723","endLine":44,"endColumn":150},{"ruleId":"720","severity":1,"message":"721","line":45,"column":117,"nodeType":"722","messageId":"723","endLine":45,"endColumn":119},{"ruleId":"720","severity":1,"message":"721","line":45,"column":149,"nodeType":"722","messageId":"723","endLine":45,"endColumn":151},{"ruleId":"725","severity":1,"message":"747","line":66,"column":8,"nodeType":"727","endLine":66,"endColumn":42,"suggestions":"748"},{"ruleId":"720","severity":1,"message":"721","line":19,"column":108,"nodeType":"722","messageId":"723","endLine":19,"endColumn":110},{"ruleId":"720","severity":1,"message":"721","line":19,"column":145,"nodeType":"722","messageId":"723","endLine":19,"endColumn":147},{"ruleId":"720","severity":1,"message":"721","line":20,"column":94,"nodeType":"722","messageId":"723","endLine":20,"endColumn":96},{"ruleId":"716","severity":1,"message":"749","line":56,"column":12,"nodeType":"718","messageId":"719","endLine":56,"endColumn":32},{"ruleId":"716","severity":1,"message":"750","line":58,"column":12,"nodeType":"718","messageId":"719","endLine":58,"endColumn":43},{"ruleId":"716","severity":1,"message":"751","line":59,"column":12,"nodeType":"718","messageId":"719","endLine":59,"endColumn":24},{"ruleId":"716","severity":1,"message":"752","line":60,"column":12,"nodeType":"718","messageId":"719","endLine":60,"endColumn":33},{"ruleId":"716","severity":1,"message":"753","line":61,"column":12,"nodeType":"718","messageId":"719","endLine":61,"endColumn":33},{"ruleId":"716","severity":1,"message":"754","line":62,"column":12,"nodeType":"718","messageId":"719","endLine":62,"endColumn":34},{"ruleId":"716","severity":1,"message":"755","line":63,"column":12,"nodeType":"718","messageId":"719","endLine":63,"endColumn":30},{"ruleId":"716","severity":1,"message":"741","line":66,"column":12,"nodeType":"718","messageId":"719","endLine":66,"endColumn":27},{"ruleId":"725","severity":1,"message":"756","line":105,"column":8,"nodeType":"727","endLine":105,"endColumn":28,"suggestions":"757"},{"ruleId":"720","severity":1,"message":"721","line":115,"column":20,"nodeType":"722","messageId":"723","endLine":115,"endColumn":22},{"ruleId":"720","severity":1,"message":"721","line":142,"column":105,"nodeType":"722","messageId":"723","endLine":142,"endColumn":107},{"ruleId":"720","severity":1,"message":"721","line":145,"column":112,"nodeType":"722","messageId":"723","endLine":145,"endColumn":114},{"ruleId":"720","severity":1,"message":"721","line":154,"column":105,"nodeType":"722","messageId":"723","endLine":154,"endColumn":107},{"ruleId":"720","severity":1,"message":"721","line":157,"column":112,"nodeType":"722","messageId":"723","endLine":157,"endColumn":114},{"ruleId":"720","severity":1,"message":"721","line":50,"column":95,"nodeType":"722","messageId":"723","endLine":50,"endColumn":97},{"ruleId":"720","severity":1,"message":"721","line":61,"column":100,"nodeType":"722","messageId":"723","endLine":61,"endColumn":102},{"ruleId":"720","severity":1,"message":"721","line":50,"column":91,"nodeType":"722","messageId":"723","endLine":50,"endColumn":93},{"ruleId":"720","severity":1,"message":"721","line":138,"column":181,"nodeType":"722","messageId":"723","endLine":138,"endColumn":183},{"ruleId":"720","severity":1,"message":"721","line":62,"column":96,"nodeType":"722","messageId":"723","endLine":62,"endColumn":98},{"ruleId":"720","severity":1,"message":"721","line":76,"column":85,"nodeType":"722","messageId":"723","endLine":76,"endColumn":87},{"ruleId":"720","severity":1,"message":"721","line":80,"column":84,"nodeType":"722","messageId":"723","endLine":80,"endColumn":86},{"ruleId":"725","severity":1,"message":"758","line":20,"column":5,"nodeType":"727","endLine":20,"endColumn":7,"suggestions":"759"},{"ruleId":"725","severity":1,"message":"760","line":40,"column":6,"nodeType":"727","endLine":40,"endColumn":54,"suggestions":"761"},{"ruleId":"716","severity":1,"message":"762","line":34,"column":5,"nodeType":"718","messageId":"719","endLine":34,"endColumn":16},{"ruleId":"716","severity":1,"message":"763","line":35,"column":5,"nodeType":"718","messageId":"719","endLine":35,"endColumn":14},{"ruleId":"716","severity":1,"message":"764","line":36,"column":5,"nodeType":"718","messageId":"719","endLine":36,"endColumn":13},{"ruleId":"716","severity":1,"message":"765","line":39,"column":5,"nodeType":"718","messageId":"719","endLine":39,"endColumn":16},{"ruleId":"725","severity":1,"message":"766","line":152,"column":6,"nodeType":"727","endLine":152,"endColumn":54,"suggestions":"767"},{"ruleId":"720","severity":1,"message":"721","line":175,"column":24,"nodeType":"722","messageId":"723","endLine":175,"endColumn":26},{"ruleId":"720","severity":1,"message":"721","line":327,"column":76,"nodeType":"722","messageId":"723","endLine":327,"endColumn":78},{"ruleId":"720","severity":1,"message":"721","line":327,"column":106,"nodeType":"722","messageId":"723","endLine":327,"endColumn":108},{"ruleId":"720","severity":1,"message":"721","line":348,"column":60,"nodeType":"722","messageId":"723","endLine":348,"endColumn":62},{"ruleId":"720","severity":1,"message":"721","line":348,"column":95,"nodeType":"722","messageId":"723","endLine":348,"endColumn":97},{"ruleId":"725","severity":1,"message":"758","line":15,"column":5,"nodeType":"727","endLine":15,"endColumn":7,"suggestions":"768"},{"ruleId":"720","severity":1,"message":"721","line":76,"column":101,"nodeType":"722","messageId":"723","endLine":76,"endColumn":103},{"ruleId":"720","severity":1,"message":"721","line":76,"column":131,"nodeType":"722","messageId":"723","endLine":76,"endColumn":133},{"ruleId":"720","severity":1,"message":"721","line":91,"column":53,"nodeType":"722","messageId":"723","endLine":91,"endColumn":55},{"ruleId":"720","severity":1,"message":"721","line":91,"column":88,"nodeType":"722","messageId":"723","endLine":91,"endColumn":90},{"ruleId":"725","severity":1,"message":"758","line":25,"column":9,"nodeType":"727","endLine":25,"endColumn":11,"suggestions":"769"},{"ruleId":"720","severity":1,"message":"721","line":98,"column":112,"nodeType":"722","messageId":"723","endLine":98,"endColumn":114},{"ruleId":"720","severity":1,"message":"721","line":61,"column":136,"nodeType":"722","messageId":"723","endLine":61,"endColumn":138},{"ruleId":"720","severity":1,"message":"721","line":72,"column":185,"nodeType":"722","messageId":"723","endLine":72,"endColumn":187},{"ruleId":"720","severity":1,"message":"721","line":95,"column":123,"nodeType":"722","messageId":"723","endLine":95,"endColumn":125},{"ruleId":"720","severity":1,"message":"721","line":109,"column":123,"nodeType":"722","messageId":"723","endLine":109,"endColumn":125},{"ruleId":"720","severity":1,"message":"721","line":135,"column":82,"nodeType":"722","messageId":"723","endLine":135,"endColumn":84},{"ruleId":"720","severity":1,"message":"721","line":144,"column":82,"nodeType":"722","messageId":"723","endLine":144,"endColumn":84},{"ruleId":"720","severity":1,"message":"721","line":169,"column":74,"nodeType":"722","messageId":"723","endLine":169,"endColumn":76},{"ruleId":"720","severity":1,"message":"721","line":258,"column":96,"nodeType":"722","messageId":"723","endLine":258,"endColumn":98},{"ruleId":"720","severity":1,"message":"721","line":282,"column":113,"nodeType":"722","messageId":"723","endLine":282,"endColumn":115},{"ruleId":"720","severity":1,"message":"721","line":303,"column":141,"nodeType":"722","messageId":"723","endLine":303,"endColumn":143},{"ruleId":"720","severity":1,"message":"721","line":62,"column":136,"nodeType":"722","messageId":"723","endLine":62,"endColumn":138},{"ruleId":"720","severity":1,"message":"721","line":73,"column":185,"nodeType":"722","messageId":"723","endLine":73,"endColumn":187},{"ruleId":"720","severity":1,"message":"721","line":96,"column":123,"nodeType":"722","messageId":"723","endLine":96,"endColumn":125},{"ruleId":"720","severity":1,"message":"721","line":110,"column":123,"nodeType":"722","messageId":"723","endLine":110,"endColumn":125},{"ruleId":"720","severity":1,"message":"721","line":137,"column":82,"nodeType":"722","messageId":"723","endLine":137,"endColumn":84},{"ruleId":"720","severity":1,"message":"721","line":146,"column":82,"nodeType":"722","messageId":"723","endLine":146,"endColumn":84},{"ruleId":"720","severity":1,"message":"721","line":171,"column":74,"nodeType":"722","messageId":"723","endLine":171,"endColumn":76},{"ruleId":"720","severity":1,"message":"721","line":260,"column":96,"nodeType":"722","messageId":"723","endLine":260,"endColumn":98},{"ruleId":"720","severity":1,"message":"721","line":284,"column":113,"nodeType":"722","messageId":"723","endLine":284,"endColumn":115},{"ruleId":"720","severity":1,"message":"721","line":305,"column":141,"nodeType":"722","messageId":"723","endLine":305,"endColumn":143},{"ruleId":"716","severity":1,"message":"762","line":36,"column":9,"nodeType":"718","messageId":"719","endLine":36,"endColumn":20},{"ruleId":"716","severity":1,"message":"763","line":37,"column":9,"nodeType":"718","messageId":"719","endLine":37,"endColumn":18},{"ruleId":"716","severity":1,"message":"764","line":38,"column":9,"nodeType":"718","messageId":"719","endLine":38,"endColumn":17},{"ruleId":"716","severity":1,"message":"765","line":41,"column":9,"nodeType":"718","messageId":"719","endLine":41,"endColumn":20},{"ruleId":"725","severity":1,"message":"770","line":98,"column":8,"nodeType":"727","endLine":98,"endColumn":56,"suggestions":"771"},{"ruleId":"720","severity":1,"message":"721","line":166,"column":44,"nodeType":"722","messageId":"723","endLine":166,"endColumn":46},{"ruleId":"720","severity":1,"message":"721","line":292,"column":54,"nodeType":"722","messageId":"723","endLine":292,"endColumn":56},{"ruleId":"720","severity":1,"message":"721","line":305,"column":32,"nodeType":"722","messageId":"723","endLine":305,"endColumn":34},{"ruleId":"720","severity":1,"message":"721","line":334,"column":98,"nodeType":"722","messageId":"723","endLine":334,"endColumn":100},{"ruleId":"720","severity":1,"message":"721","line":334,"column":128,"nodeType":"722","messageId":"723","endLine":334,"endColumn":130},{"ruleId":"720","severity":1,"message":"721","line":354,"column":82,"nodeType":"722","messageId":"723","endLine":354,"endColumn":84},{"ruleId":"720","severity":1,"message":"721","line":354,"column":117,"nodeType":"722","messageId":"723","endLine":354,"endColumn":119},{"ruleId":"725","severity":1,"message":"758","line":15,"column":9,"nodeType":"727","endLine":15,"endColumn":11,"suggestions":"772"},{"ruleId":"720","severity":1,"message":"721","line":80,"column":123,"nodeType":"722","messageId":"723","endLine":80,"endColumn":125},{"ruleId":"720","severity":1,"message":"721","line":95,"column":79,"nodeType":"722","messageId":"723","endLine":95,"endColumn":81},{"ruleId":"725","severity":1,"message":"758","line":20,"column":9,"nodeType":"727","endLine":20,"endColumn":11,"suggestions":"773"},{"ruleId":"720","severity":1,"message":"721","line":89,"column":63,"nodeType":"722","messageId":"723","endLine":89,"endColumn":65},{"ruleId":"720","severity":1,"message":"721","line":89,"column":149,"nodeType":"722","messageId":"723","endLine":89,"endColumn":151},{"ruleId":"720","severity":1,"message":"721","line":108,"column":101,"nodeType":"722","messageId":"723","endLine":108,"endColumn":103},{"ruleId":"720","severity":1,"message":"721","line":161,"column":100,"nodeType":"722","messageId":"723","endLine":161,"endColumn":102},"no-native-reassign",["774"],"no-negated-in-lhs",["775"],"no-unused-vars","'interceptors' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'transpileModule' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useMemo has missing dependencies: 'appContext.isEnterprise' and 'appContext.locale'. Either include them or remove the dependency array.","ArrayExpression",["776"],"React Hook React.useEffect has missing dependencies: 'appContext.currentOrganizationId' and 'selectedAccountId'. Either include them or remove the dependency array.",["777"],"React Hook React.useCallback has missing dependencies: 'appContext.currentOrganizationId' and 'selectedAccountId'. Either include them or remove the dependency array.",["778"],["779"],"'withRouter' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'LoginV3Render' is defined but never used.","'accountGroupBalances' is assigned a value but never used.","'accountBalances' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'appContext.currentOrganization'. Either include it or remove the dependency array.",["780"],"Expected '!==' and instead saw '!='.","'Redirect' is defined but never used.","'setNumberOfMonths' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'numberOfMonths' and 'parseYearMonth'. Either include them or remove the dependency array.",["781"],"'otherIncomeSubtypeId' is assigned a value but never used.","'researchAndDevelopmentSubtypeId' is assigned a value but never used.","'sgaSubtypeId' is assigned a value but never used.","'depreciationSubtypeId' is assigned a value but never used.","'amortizationSubtypeId' is assigned a value but never used.","'otherExpensesSubtypeId' is assigned a value but never used.","'incomeTaxSubtypeId' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'appContext.currentOrganizationId'. Either include it or remove the dependency array.",["782"],"React Hook React.useMemo has a missing dependency: 'appContext.locale'. Either include it or remove the dependency array.",["783"],"React Hook React.useCallback has an unnecessary dependency: 'API_BASE_URL'. Either exclude it or remove the dependency array. Outer scope values like 'API_BASE_URL' aren't valid dependencies because mutating them doesn't re-render the component.",["784"],"'pageOptions' is assigned a value but never used.","'pageCount' is assigned a value but never used.","'gotoPage' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","React Hook React.useEffect has an unnecessary dependency: 'API_BASE_URL'. Either exclude it or remove the dependency array. Outer scope values like 'API_BASE_URL' aren't valid dependencies because mutating them doesn't re-render the component.",["785"],["786"],["787"],"React Hook React.useEffect has a missing dependency: 'refreshAccounts'. Either include it or remove the dependency array. Outer scope values like 'API_BASE_URL' aren't valid dependencies because mutating them doesn't re-render the component.",["788"],["789"],["790"],"no-global-assign","no-unsafe-negation",{"desc":"791","fix":"792"},{"desc":"793","fix":"794"},{"desc":"793","fix":"795"},{"desc":"793","fix":"796"},{"desc":"797","fix":"798"},{"desc":"799","fix":"800"},{"desc":"801","fix":"802"},{"desc":"803","fix":"804"},{"desc":"805","fix":"806"},{"desc":"805","fix":"807"},{"desc":"803","fix":"808"},{"desc":"803","fix":"809"},{"desc":"810","fix":"811"},{"desc":"803","fix":"812"},{"desc":"803","fix":"813"},"Update the dependencies array to be: [appContext.isEnterprise, appContext.locale]",{"range":"814","text":"815"},"Update the dependencies array to be: [appContext.currentOrganizationId, selectedAccountId]",{"range":"816","text":"817"},{"range":"818","text":"817"},{"range":"819","text":"817"},"Update the dependencies array to be: [appContext.currentOrganization, endDate]",{"range":"820","text":"821"},"Update the dependencies array to be: [appContext.currentOrganizationId, numberOfMonths, parseYearMonth]",{"range":"822","text":"823"},"Update the dependencies array to be: [startDate, endDate, appContext.currentOrganizationId]",{"range":"824","text":"825"},"Update the dependencies array to be: [appContext.locale]",{"range":"826","text":"827"},"Update the dependencies array to be: [appContext.currentOrganizationId]",{"range":"828","text":"829"},{"range":"830","text":"829"},{"range":"831","text":"827"},{"range":"832","text":"827"},"Update the dependencies array to be: [appContext.currentOrganizationId, refreshAccounts]",{"range":"833","text":"834"},{"range":"835","text":"827"},{"range":"836","text":"827"},[2013,2015],"[appContext.isEnterprise, appContext.locale]",[3315,3317],"[appContext.currentOrganizationId, selectedAccountId]",[4056,4058],[5710,5712],[3799,3808],"[appContext.currentOrganization, endDate]",[3935,3969],"[appContext.currentOrganizationId, numberOfMonths, parseYearMonth]",[5152,5172],"[startDate, endDate, appContext.currentOrganizationId]",[927,929],"[appContext.locale]",[1715,1763],"[appContext.currentOrganizationId]",[5325,5373],[894,896],[1224,1226],[3825,3873],"[appContext.currentOrganizationId, refreshAccounts]",[987,989],[1361,1363]]